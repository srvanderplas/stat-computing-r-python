{
  "hash": "403f141609f24dd84b33e6e074e72d73",
  "result": {
    "engine": "knitr",
    "markdown": "# Web Scraping {#sec-data-web}\n\n\n\n\n\n\n\n\n\n\n## Objectives {.nonumber}\n\n-   Understand the structure of XML and HTML files\n-   Use developer tools to locate nodes of interest and CSS or XPATH to precisely identify those nodes\n-   Identify web pages that cannot be scraped using simple methods because of content injection\n-   Scrape data from web pages\n    -   by reading in HTML tables directly using R or Python\n    -   by writing custom functions to pull data from individual fields\n\n## HTML and XML Language Specification\n\nLet's start at the beginning.\n**eXtensible Markup Language (XML)** was developed in the late 1990s to provide a flexible specification for documents, data files, and various other documents.\nYou've (likely) been using XML-based documents for most of your life, either in Microsoft Office (.docx, .xlsx, .pptx - the x is for XML) or in web pages.\n**HyperText Markup Language (HTML)** is a specific flavor of XML [@wikimediacontributorsXML2025] that uses a defined set of fields to specify the composition of a web page[^03-web-scraping-1].\n\n[^03-web-scraping-1]: Technically, HTML was developed first, but it does have many of the same components as XML, and we use similar terminology to describe elements, content, attributes, and values, so it's easiest (imo) to think of HTML as a subset of XML with additional rules and with certain rules relaxed.\n\nIf you right click in your browser on this page, and \"Inspect Source\", you can see the HTML code that generates this book.\n\n::: {#fig-browser-inspect layout-ncol=\"2\"}\n![Chromium right click menu](../images/advanced/chromium-inspect-source.png){fig-alt=\"A screenshot of https://duckduckgo.com in chromium, where the user has right-clicked on the page. The options 'View Page Source' and 'Inspect' are located at the bottom of the pop-up menu and are highlighted.\"}\n\n![Firefox right click menu](../images/advanced/firefox-inspect-source.png){fig-alt=\"A screenshot of https://duckduckgo.com in Firefox, where the user has right-clicked on the page. The options 'View Page Source' and 'Inspect' are located towards the bottom of the pop-up menu and are highlighted.\"}\n\nRight click menu options that allow the user to see the HTML code for a webpage.\n:::\n\n### XML\n\nXML documents are composed of a series of tags that look like this:\n\n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<tag-type attribute=\"value\">Tag contents</tag-type>\n```\n:::\n\n\n\n\nEach tag name, `tag`, is enclosed in angle brackets, `<tag>`, and has a closing tag that starts with a slash but has the same name, `</tag>`.\nTags can include additional information that is typically encoded in `key=\"value\"` pairs - above, there is an **attribute** field (the part before the `=`) that has **value** `\"value\"` (the part after the `=`).\nA set of matching tags is called an **element**, and the information within the start and end tags is called the **content**.\n\nThe XML 1.0 (5th edition) specification requires that\n\n-   The document contains only one element, called the **root** or document element, at the top level.\n    No part of the root element appears in the content of any other element.\n\n-   Any other elements\n    -   are defined by start and end tags, and\n    -   nest properly within each other (are well formed)\n\n-   An element contains **text**, a sequence of characters.\n    Legal characters are tab, carriage return, line feed, and the legal characters of [Unicode](https://home.unicode.org/) and [ISO/IEC 10646 (PDF warning)](https://unicode.org/L2/L2010/10038-fcd10646-main.pdf)[^03-web-scraping-2].\n\n-   Comments: \n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<!-- This is a valid comment -->\n<!-- This is not a valid comment ---> (The end must have exactly 2 dashes)\n<!-- This is not a valid comment -- \n     two dashes cannot be included in the string -->\n```\n:::\n\n\n\n\n[^03-web-scraping-2]: This is a real rabbit hole if you are curious about the very technical details of what makes up a character in text.\n\n::: advanced\n#### Advanced: Additional XML metadata {.unnumbered}\n\nA valid XML document also contains some additional metadata at the start of the file.\nFirst, there should be an **XML declaration** that specifies the version of XML being used: `<?xml version=\"1.0\"?>` (Note the `?` immediately before and after the angle brackets).\n\nIn addition, valid XML documents contain a **Document Type Definition (DTD)** that provides some information about valid tags used within the document.\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<!DOCTYPE Name (ExternalID)? '[' intSubset ']' >\n```\n:::\n\n\n\n\nDocument Type Definition requirements:\n\n-   `Name` in the DTD has the same value as the root node tag name\n-   An Internal or External Subset of valid entity names (tag names) is provided. It is also possible to specify valid tag attributes, types, and other information within these listings.\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<?xml version=\"1.0\"?> # <1> \n<!DOCTYPE greeting SYSTEM \"hello.dtd\"> # <2>\n<greeting>Hello, world!</greeting>  # <3>\n```\n:::\n\n\n\n\n1.  XML version declaration\n2.  Document Type Definition. `greeting` is the name, and the root node matches that name. `hello.dtd` is the system identifier and provides an address leading to an external document type declaration file\n3.  Root node. `greeting` is the tag name. `Hello, world!` is the tag value. The tag is closed with a valid, matching end tag.\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?> # <1> \n<!DOCTYPE greeting [ # <2> \n  <!ELEMENT greeting (#PCDATA)>\n]>\n<greeting>Hello, world!</greeting>  # <3> \n```\n:::\n\n\n\n\n1.  XML version declaration, specifying the document's text encoding\n2.  An internally defined DTD that specifies valid elements (tags) (the only valid element is `greeting`). Additional tags could be specified within the `[` `]` space, if desired.\n3.  The root node with value `Hello, world!`\n:::\n\nElements are typically nested in an XML document.\n\n\nConsider the following set of elements that describe the main characters in the children's TV show [Bluey](https://www.youtube.com/channel/UCVzLLZkDuFGAE2BGdBuBNBg). \nNote that the same information about the family could be described in a number of different hierarchical ways.\n\n::: panel-tabset\n\n##### Bluey {-}\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<family>\n  <adults>\n    <person sex=\"M\" coat=\"blue\">Bandit Heeler</person>\n    <person sex=\"F\" coat=\"orange\">Chili Heeler</person>\n  </adults>\n  <kids>\n    <person sex=\"F\" coat=\"blue\">Bluey Heeler</person>\n    <person sex=\"F\" coat=\"orange\">Bingo Heeler</person>\n  </kids>\n</family>\n```\n:::\n\n\n\n\n-   family contains two **child nodes** - 'adults', and 'kids'. Collectively, family has two direct **children**.\n-   'adults' contains two **child nodes** - persons - that describe the adults in the family, Chili and Bandit Heeler\n-   'kids' contains two **child nodes** - persons - that describe the kids in the family, Bluey and Bingo Heeler.\n-   The **parent** of the element describing Bingo Heeler is 'kids'\n-   The **parent** of the 'kids' element is 'family'\n-   'adults' and 'kids' are **sibling** elements\n\n##### Bluey Alt 1 {-}\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<family>\n    <person status=\"adult\" sex=\"M\" coat=\"blue\"   > Bandit Heeler  </person>\n    <person status=\"adult\" sex=\"F\" coat=\"orange\" > Chili  Heeler  </person>\n    <person status=\"kid\"   sex=\"F\" coat=\"blue\"   > Bluey  Heeler  </person>\n    <person status=\"kid\"   sex=\"F\" coat=\"orange\" > Bingo  Heeler  </person>\n</family>\n```\n:::\n\n\n\n\n##### Bluey Alt 2 {-}\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<family>\n    <person status=\"adult\" sex=\"M\" coat=\"blue\"   > \n      <name><first>Bandit</first> <last>Heeler</last></name> \n    </person>\n    <person status=\"adult\" sex=\"F\" coat=\"orange\" > \n      <name><first>Chili </first> <last>Heeler</last></name> \n    </person>\n    <person status=\"kid\"   sex=\"F\" coat=\"blue\"   > \n      <name><first>Bluey </first> <last>Heeler</last></name> \n    </person>\n    <person status=\"kid\"   sex=\"F\" coat=\"orange\" > \n      <name><first>Bingo </first> <last>Heeler</last></name> \n    </person>\n</family>\n```\n:::\n\n\n\n\n\n##### Bluey Alt 3 {-}\n\n\n\n\n::: {.cell}\n\n```{.xml .cell-code}\n<family>\n    <person>\n      <name><first>Bandit</first> <last>Heeler</last></name> \n      <status>adult</status> \n      <sex>male</sex>   \n      <coat>blue</coat>\n    </person>\n    <person>\n      <name><first>Chili </first> <last>Heeler</last></name> \n      <status>adult</status> \n      <sex>female</sex> \n      <coat>orange</coat>\n    </person>\n    <person>\n      <name><first>Bluey </first> <last>Heeler</last></name> \n      <status>child</status> \n      <sex>female</sex> \n      <coat>blue</coat>\n    </person>\n    <person>\n      <name><first>Bingo </first> <last>Heeler</last></name> \n      <status>child</status> \n      <sex>female</sex> \n      <coat>orange</coat>\n    </person>\n</family>\n```\n:::\n\n\n\n\n:::\n\nWhen working with XML (and HTML), it is important to understand how the data are represented structurally, so that you can get the components of the data back out of this hierarchical format.\n\n::: demo\n#### Demo: Exploring an XML file {.unnumbered}\n\nThe District of Columbia (Washington, DC) local government provides a [dataset of grocery store locations throughout the district](https://catalog.data.gov/dataset/grocery-store-locations) using a definition of full service grocery store that requires:\n\n-   Sales of six of the following categories of food:\n    -   Fresh fruits and vegetables\n    -   Fresh and uncooked meats, poultry and seafood\n    -   Dairy products\n    -   Canned foods\n    -   Frozen foods\n    -   Dry groceries and baked goods\n    -   Non-alcoholic beverages\n-   Either 50% of the store's total square footage, or 6000 square feet must be dedicated to selling the food products above.\n-   At least 5% of the selling area must be dedicated to each food category.\n\nThe city then included some small grocery stores that are very close to meeting the full-service grocery store definition based on [Appendix D of a city-wide food system assessment](https://dcfoodpolicy.org/wp-content/uploads/2019/06/2018-food-system-assessment-final-6.13.pdf) (PDF warning).\n\nWe can [download the KML file](https://opendata.dc.gov/api/download/v1/items/1d7c9d0e3aac49c1aa88d377a3bae430/kml?layers=4) and change the extension to XML so that the file opens in a standard web browser, or we can directly download the KML file as an XML file as in the code chunk below.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://opendata.dc.gov/api/download/v1/items/1d7c9d0e3aac49c1aa88d377a3bae430/kml?layers=4\"\nfilename <- \"../data/DC_Grocery_Stores_2025.xml\"\n\nif(!file.exists(filename)) {\n  download.file(url, destfile = filename, mode = \"wb\")\n}\n\nxml_text <- readLines(filename)\nxml_tbl <- data.frame(line = 1:length(xml_text), \n                      xml = xml_text)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-d11844a08f9cfd79cfdd\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d11844a08f9cfd79cfdd\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[1,2,3,4,5,6,7,8,9,10,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,3145,3146,3147,3148,3149,3150,3151],[\"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?&gt;\",\"&lt;kml xmlns=\\\"http://www.opengis.net/kml/2.2\\\"&gt;\",\"&lt;Document id=\\\"root_doc\\\"&gt;\",\"&lt;Schema name=\\\"Grocery_Store_Locations\\\" id=\\\"Grocery_Store_Locations\\\"&gt;\",\"\\t&lt;SimpleField name=\\\"STORENAME\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"ADDRESS\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"ZIPCODE\\\" type=\\\"int\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"PHONE\\\" type=\\\"float\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"WARD\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"SSL\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"SE_ANNO_CAD_DATA\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"GLOBALID\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"CREATED\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"EDITED\\\" type=\\\"string\\\"&gt;&lt;/SimpleField&gt;\",\"\\t&lt;SimpleField name=\\\"OBJECTID\\\" type=\\\"int\\\"&gt;&lt;/SimpleField&gt;\",\"&lt;/Schema&gt;\",\"&lt;Folder&gt;&lt;name&gt;Grocery_Store_Locations&lt;/name&gt;\",\"  &lt;Placemark&gt;\",\"\\t&lt;ExtendedData&gt;&lt;SchemaData schemaUrl=\\\"#Grocery_Store_Locations\\\"&gt;\",\"\\t\\t&lt;SimpleData name=\\\"STORENAME\\\"&gt;Target &lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"ADDRESS\\\"&gt;7828 GEORGIA AVENUE NW&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"ZIPCODE\\\"&gt;20012&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"PHONE\\\"&gt;2028923822&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"WARD\\\"&gt;Ward 4&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"SSL\\\"&gt;2960    0017&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"PRESENT22\\\"&gt;Yes&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"PRESENT23\\\"&gt;Yes&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"PRESENT24\\\"&gt;Yes&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"PRESENT25\\\"&gt;Yes&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"GIS_ID\\\"&gt;GroceryStorePt_1&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"XCOORD\\\"&gt;397662.57&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"YCOORD\\\"&gt;146280.07&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"MAR_ID\\\"&gt;300512&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"GLOBALID\\\"&gt;{CE302122-4E8D-4DC7-845B-06563B993F66}&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"CREATED\\\"&gt;2022/09/28 22:04:54+00&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"EDITED\\\"&gt;2025/01/14 19:33:19+00&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"OBJECTID\\\"&gt;641&lt;/SimpleData&gt;\",\"\\t&lt;/SchemaData&gt;&lt;/ExtendedData&gt;\",\"      &lt;Point&gt;&lt;coordinates&gt;-77.0269805790129,38.9844552988866&lt;/coordinates&gt;&lt;/Point&gt;\",\"  &lt;/Placemark&gt;\",\"\\t\\t&lt;SimpleData name=\\\"EDITED\\\"&gt;2025/01/14 19:33:19+00&lt;/SimpleData&gt;\",\"\\t\\t&lt;SimpleData name=\\\"OBJECTID\\\"&gt;1921&lt;/SimpleData&gt;\",\"\\t&lt;/SchemaData&gt;&lt;/ExtendedData&gt;\",\"      &lt;Point&gt;&lt;coordinates&gt;-76.9997257446131,38.9545357353458&lt;/coordinates&gt;&lt;/Point&gt;\",\"  &lt;/Placemark&gt;\",\"&lt;/Folder&gt;\",\"&lt;/Document&gt;&lt;/kml&gt;\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>line<\\/th>\\n      <th>xml<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"searching\":false,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":0},{\"name\":\"line\",\"targets\":0},{\"name\":\"xml\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n-   The first line contains the document type definition and encoding.\n-   The second line contains a link to the [KML specification](https://schemas.opengis.net/kml/2.2.0/ogckml22.xsd), which is itself another XML document. Note that it is also a valid tag, so at the end of the file, we should find </kml>.\n-   The third line is another tag that indicates that this is the start of the document.\n-   Lines 4-40 contain the dataset schema -- a list of all of the fields present for each store, along with their data type.\n-   Line 41 defines a folder, which contains Placemarks (Line 42), which contain ExtendedData (Line 43). The `\\t` characters are a text representation of tabs and indicate some indentation.\n-   Each grocery store appears to be described by a Placemark node that contains ExtendedData nodes containing variables, along with a Point node that contains two coordinates (latitude and longitude).\n:::\n\n::: column-margin\n![(Click to Enlarge) Screenshot of DC_Grocery_Stores_2025.xml showing the nodes corresponding to the Schema definition and to one individual grocery store.](../images/advanced/DC_Grocery_Stores_2025_xml_screenshot_annotated.png){.lightbox fig-alt=\"XML document with schema definition and store data for grocery store locations. The top section, labeled \\\"Schema Definition,\\\" is enclosed in a blue border and contains XML schema elements describing various data fields related to grocery store locations. The fields include store name, address, zip code, phone number, and other identifiers. Each field is defined by a SimpleField tag with a name and type attribute. The bottom section, labeled \\\"Individual Grocery Store Data,\\\" is enclosed in an orange border and provides detailed data about a specific grocery store location using XML tags. This includes the store’s name, address, phone number, GIS coordinates, and several other identifiers. The text \\\"Schema Definition\\\" and \\\"Individual Grocery Store Data\\\" are prominently displayed in larger font sizes within their respective sections.\"}\n:::\n\n### HTML\n\nHTML is a markup language that appears very similar to XML.\nTechnically, HTML predates XML by a few years (1993 vs 1996) [@HTMLVsXML2024], but they've been developed in parallel and there are obvious influences in both directions.\n\nImportant differences between HTML and XML [@HTMLVsXML2024]:\n\n-   HTML tags **display** information. XML tags **describe** information.\n-   HTML uses **pre-defined** tags instead of XML's user-defined tags.\n-   HTML doesn't always require closing tags, while XML does.\n-   HTML is more robust than XML, in that it will ignore small errors.\n-   HTML is not case sensitive, while XML is.\n-   HTML ignores white space, but XML doesn't *necessarily* ignore white space.\n\n::: demo\n\n#### Demo: HTML Document Structure {.unnumbered}\n\nLike XML, HTML documents have a basic structure:\n\n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<!DOCTYPE html> <!-- <1> -->\n<html> <!--  <2> -->\n<head> <!--  <3> -->\n<title>Page Title</title> <!--  <4> -->\n</head>\n\n<body> <!--  <5> -->\n<h1>Level 1 Heading</h1>\n<p>This paragraph provides information about the topic in the L1 heading.</p>\n<h2>Level 2 Heading</h2>\n<p>This paragraph provides even more information relating the L2 heading to L1.</p>\n<br> <!--  <6> -->\n</body>\n\n</html> \n```\n:::\n\n\n\n\n1.  This indicates that the document is an HTML5 document\n2.  The root element of an HTML page\n3.  The head element contains meta information about the page. Most scripts and formatting information (CSS) are also loaded in this element.\n4.  The page title is what will show up in the browser tab.\n5.  The body element contains the actual information rendered on the page.\n6.  This element creates a line break, but has no content. Empty elements (elements with no content) do not have to have a closing tag (but you can add one if it makes you happy).\n\n:::\n\nYou can easily see the HTML code that creates any website by right clicking on the web page in your browser and selecting some variant of \"Inspect\" or \"Inspect Source\" or \"View Source\", as shown in @fig-browser-inspect.\nThis is an incredibly helpful tool when you want to figure out how to pull data out of a webpage, getting only the parts you want without the rest of the clutter.\n\nThe best way to think about a HTML page is that it consists of a series of elements that are best thought of as boxes.\nElements like `<h1> </h1>` define a box with specific contents.\nThese boxes are then styled and arranged via the \"magic\" of *Cascading Style Sheets (CSS)*.\nWhen I first learned HTML (circa 2001?), there were a reasonable number of tags and CSS was not really a thing, so it was easier to understand how web pages were laid out, and we could spend our time decking out webpages [with neon colors, animated images, and annoying music](https://www.cameronsworld.net/).\n\n::: column-margin\n\n![CSS is \"magic\" ... finicky and annoying magic.](../images/advanced/css-mug.jpg){#fig-css-awesome fig-alt=\"A mug that says 'CSS is Awesome' with a box around it, but the box cuts off the 'me' in awesome.\"}\n\n:::\n\nNow, there are too many valid HTML tags for to cover in an introduction, but first let's review the anatomy of an XML or HTML element, and then we can look at some of the most important HTML tags.\n\n#### HTML Element Anatomy {.unnumbered}\n\n$$\\underbrace{\\ \\ \\overbrace{< \\text{p}\\ \\  \\underbrace{\\text{class}}_{\\text{Attribute}}=\\underbrace{\\text{'important'}}_{\\text{Value}} >}^{\\text{Start tag}} \\ \\ \\ \\underbrace{\\text{This is a paragraph}}_{\\text{Content}} \\ \\ \\ \\overbrace{</ \\text{p} >}^{\\text{End tag}}\\ \\ \\ }_{\\text{Element}} $$\n\n#### Important HTML Tags {.unnumbered}\n\n-   `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, `<h6>`: Headings.\\\n    Headings should be nested, so you should never have content in `<h2>This is wrong</h2>` unless there is an `<h1> </h1>` element above it in the same block of content.\\\n    Corresponds to `#`, ..., `######` in markdown.\n\n-   `<p>`: Paragraphs.\n    All text that isn't part of some other tag should be contained in paragraph tags.\n\n-   `<a>`: links.\n    `<a href=\"https://google.com\">This links to google</a>`\\\n    `href` is a tag attribute, and `https://google.com` is the attribute's value.\n\n-   `<img>`: Images.\n    `<img src=\"path/to/picture.jpg\" alt=\"Alt-text description of the picture\">`.\n    As with line breaks, you do not have to have a `</img>` tag unless having unclosed tags bothers you.\n\n-   `<table>`: Tables.\n    In HTML, tables are constructed by row.\n    Here is a minimal table that has a header:\n\n:::: columns\n\n::: {.column width=\"45%\"}\n\nHTML:\n\n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<table>   <!--  <1> -->\n  <tr>   <!--  <2> -->\n    <th>Heading Col 1</th>   <!--  <3> -->\n    <th>Heading Col 2</th>\n  </tr>\n  <tr>\n    <td>Value 1</td>   <!--  <4> -->\n    <td>Value 2</td>\n  </tr>\n</table>\n```\n:::\n\n\n\n\n1. The table element contains all table contents\n2. The tr element defines a new row of the table\n3. The th element defines a header cell\n4. The td element defines a normal (body) cell\n\n:::\n\n:::  {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n\nRendered:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<table><tr><th>Heading Col 1</th><th>Heading Col 2</th></tr><tr><td>Value 1</td><td>Value 2</td></tr></table>\n```\n\n:::\n:::\n\n\n\n\n\n:::\n\n::::\n\n-   `<ul>` and `<ol>`: Unordered (bulleted) and ordered lists.\n    List elements are included as child elements and start/end with `<li></li>` (for both types of lists).\n\n-   `<span>`: a container for inline content -- that is, content that is part of another piece of text.\n    Spans are often used to highlight specific text using color or other formatting attributes (font, boldness, size).\n\n-   `<div>`: a container for other content.\n    These containers are often used to help style and lay out content using CSS.\n\n#### Common HTML Attributes {.unnumbered}\n\nSome attributes in HTML are special and are used across a number of different tag types.\n\n-   ID: A shorthand name for the element. For instance, the ID for this level 4 section heading is `common-html-attributes`\n-   Class: The category the element belongs to. Often, this is used to help style the element with appropriate CSS - for instance, to ensure that all level 4 headings have the same font size and color. There can be multiple values for the class attribute, separated by spaces. The class value for this level 4 section heading is `level4 unnumbered`, indicating both the heading level and that I've switched off numbering for this sub-sub-sub-sub-section.\n-   Style: Any CSS items which apply only to the specific element. For this section, only the link to this section added by quarto/pandoc has a style attribute specified (because it is applied automatically when the quarto document is compiled)\n\n::: {.demo collapse=\"true\"}\n##### Demo: HTML for the Common HTML Attributes subsection {.unnumbered}\n\nI have added line-breaks and indentation for readability, but the rest of the code is copied from my browser.\n\n```         \n<section id=\"common-html-attributes\" class=\"level4 unnumbered\">\n  <h4 class=\"unnumbered anchored\" data-anchor-id=\"common-html-attributes\">\n    Common HTML Attributes\n    <a class=\"anchorjs-link \" aria-label=\"Anchor\" data-anchorjs-icon=\"\" \n       href=\"#common-html-attributes\" \n       style=\"font: 1em / 1 anchorjs-icons; margin-left: 0.1875em; \n              padding-right: 0.1875em; padding-left: 0.1875em;\"></a>\n  </h4>\n  <p>Some attributes in HTML are special and are used across a number of \n     different tag types.</p>\n  <ul>\n    <li>ID: A shorthand name for the element. \n        For instance, the ID for this level 4 section heading is \n        <code>common-html-attributes</code></li>\n    <li>Class: The category the element belongs to. \n        Often, this is used to help style the element with appropriate CSS - \n        for instance, to ensure that all level 4 headings have the same font \n        size and color. \n        There can be multiple values for the class attribute, separated by spaces. \n        The class value for this level 4 section heading is \n        <code>level4 unnumbered</code>, \n        indicating both the heading level and that I’ve switched off numbering \n        for this sub-sub-sub-sub-section.</li>\n    <li>Style: Any CSS items which apply only to the specific element. \n        For this section, only the link to this section added by quarto/pandoc \n        has a style attribute specified (because it is applied automatically \n        when the quarto document is compiled)</li>\n  </ul>\n</section>\n```\n:::\n\n### Reading HTML and XML files\n\n::: {.callout-tip collapse=true}\n#### Tip: When searching for help, be sure to specify packages in your query! {-}\n\nThere are many different packages and approaches in both R and Python to working with HTML and XML. \nSome people write their own custom parsers with regular expressions (masochists!), and there are multiple versions of packages (`xml` vs `xml2`, `httr` and `httr2`) as well as packages that have fairly similar syntax (`rvest`, `polite`) and packages that operate at very different technical levels (`curl`, `httr2`, `rvest`). \nIn the python ecosystem, there are multiple packages that have different ways to handle files in addition to different mechanisms and syntax for sifting through the HTML/XML nodes. \n:::\n\n:::: demo\n#### Demo: Reading HTML files from the web\n\nHere is the basic syntax for reading in an XML or HTML file in R and python using commonly recommended packages for the job.\n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\nurl <- \"https://en.wikipedia.org/wiki/HTML\"\n\ndoc <- read_html(url)\n\nxml_children(doc)\n## {xml_nodeset (2)}\n## [1] <head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n## [2] <body class=\"skin--responsive skin-vector skin-vector-search-vue mediawik ...\n```\n:::\n\n\n\n\nWe use `read_html()` to read in the document (the syntax is the same whether you're using a URL or a file path) and then can use `xml_children()` and other parsing functions to make some sense of the structure of the document -- in this case, confirming that it's a valid HTML document with a head and body node. \n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests # Gets files from the web\n\nurl = \"https://en.wikipedia.org/wiki/HTML\"\nresponse = requests.get(url)\n# response.text # This outputs a ton of stuff\n\nfrom bs4 import BeautifulSoup # Parses HTML/XML\nsoup = BeautifulSoup(response.text)\nchildren = soup.html.find_all(recursive=False) # get direct children of the HTML tag\n\nfor child in children:\n  print(child.name) # content is too long to print everything\n## body\n```\n:::\n\n\n\n\nWe have to request the HTML document using `requests.get(url)` and then parse the HTML document with `bs4.BeautifulSoup`. \n\nThe remaining code just serves to confirm that we have both a head and a body node. \n:::\n\n::::\n\n## Filtering Data from HTML/XML: CSS and XPath Selectors\n\nOften, when pulling data from HTML or XML documents, it is useful to be able to navigate to one or more specific elements of the document and extract only those elements.\nThere are two different \"languages\" for doing this - CSS selectors, which primarily are used with HTML documents, and XPath selectors, which can be used with both HTML and XML.\n\n::: learnmore\nYou may find it helpful to reference these guides to XPath and CSS selectors directly:\n\n-   [XPath syntax](https://www.w3schools.com/xml/xpath_syntax.asp)\n-   [CSS selectors](https://www.w3schools.com/cssref/css_selectors.php)\n:::\n\n### Selecting by element type\n\n+--------------------------------------------------------------------------------------------------------+-----------+---------+\n| Task                                                                                                   | CSS       | XPath   |\n+========================================================================================================+===========+=========+\n| Select all `p` elements from the document                                                              | `p`       | `//p`   |\n+--------------------------------------------------------------------------------------------------------+-----------+---------+\n| Select all `p` elements that are direct descendants of an `h1` element                                 | `h1 \\> p` | `h1/p`  |\n+--------------------------------------------------------------------------------------------------------+-----------+---------+\n| Select all `p` elements that are descendants of an `h1` element, no matter where they are under `h1`   | `h1 p`    | `h1//p` |\n+--------------------------------------------------------------------------------------------------------+-----------+---------+\n\nCSS elements can be combined using **combinators** - [specific combination operators](https://www.w3schools.com/cssref/css_ref_combinators.php). \nThere are also [XPath axes](https://www.w3schools.com/xml/xpath_axes.asp) that provide some useful ways to combine selectors to get specific results. \n\n### Selecting by element ID/Class\n\n| Task | CSS | XPath | \n|----|----|----|\n| Select the element with ID \"objectives\" | `#objectives` | `//[@id='objectives']` |\n| Select the `<p>` element with ID \"objectives\" | `p#objectives` | `//p[@id='objectives']` |\n| Select the element with class 'level2' | `.level2` | `//[@class='level2']` |\n| Select the `<p>` element with class 'level2' | `p.level2` | `//p[@class='level2']` |\n\nOf course, you can chain these selectors together just as in the previous section.\n\n### Selecting by element attribute/value\n\n| Task | CSS | XPath |\n|----|----|----|\n| Select all elements with a \"dataID\" attribute | `[dataID]` | `//@dataID` |\n| Select all `<p>` elements with any attribute | not supported | `//p[@*]` | \n| Select all `<p>` elements with a \"dataID\" attribute | `p[dataID]` | `//p[@dataID]` |\n| Select all elements with a \"dataID\" attribute equal to \"mydata\" | `[dataID='mydata']` | `//*[@dataID='mydata']`  |\n| Select all elements with a \"dataID\" attribute containing \"my\" | `[dataID~='my']` or `[dataID*='my']` | `//*[contains(@dataID, 'mydata')]` |\n\n\n\n\n:::: demo\n\n### Demo: Reading in Olympics Medals from HTML {#sec-demo-olympic-medals}\n\nThe IOC (International Olympic Committee) publishes medal counts for each Olympics, including the [2024 Paris games](https://www.olympics.com/en/olympic-games/paris-2024/medals). \nIf the code below doesn't work, try using the [archived page](../data/Paris 2024 Olympic Medal Table - Gold, Silver & Bronze.html) instead. \nA screenshot of the rendered page is available in @fig-olympic-medal-page. \nThough the page *appears* to have a table, in fact, the table does not make use of an HTML table element; instead, each row is a series of `div` elements\n\n::: panel-tabset\n#### R  {-}\n\nIf you're curious about why I'm reading the HTML from a saved version of the webpage, see the explanation in @sec-user-agents.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(xml2)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(stringr)\n\ndoc <- read_html(\"../data/Paris 2024 Olympic Medal Table - Gold, Silver & Bronze.html\")\n\nhtml_element(doc, \"table\") # <1>\n## {xml_missing}\n## <NA>\n```\n:::\n\n\n\n1. Search the HTML for `<table>` -- no results\n\n\n\n#### Python {-}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom bs4 import BeautifulSoup, SoupStrainer # <1>\n\nfile = open(\"../data/Paris 2024 Olympic Medal Table - Gold, Silver & Bronze.html\") # <2>\nindex = file.read() # <3>\n```\n:::\n\n\n\n1. `bs4` is a library for web scraping. `BeautifulSoup` is its primary function.\n2. The HTML page is saved to disk for this example, so we can open that file using `open()`\n3. We can read the HTML using `file.read()`\n\n\nPandas has a function that will read in an HTML table from an HTML page and convert it directly to a data frame. Let's try that first. \nPandas expects an HTML file, not the literal HTML, so we pass in `file` instead of `index`. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npd.read_html(file)\n##   File \"<string>\", line 0\n## lxml.etree.XMLSyntaxError: no text parsed from document\n```\n:::\n\n\n\n\nWell, that didn't work so well, so let's look for an actual table element:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsoup = BeautifulSoup(index)\ntables = soup.find_all(\"table\")\ntables\n## []\n```\n:::\n\n\n\n\n:::\n\n\nNext, we look at the HTML and see that the table itself is wrapped in an element: \n\n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<div class=\"Table-styles__Wrapper-sc-7c5c517a-0 cqlSCS\"></div>\n```\n:::\n\n\n\n\nThat's too much to type, so search for elements with a class that contains \"Table\". \n\n::: panel-tabset\n\n#### R  {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_nodes <- html_element(doc, css = \"[class*='Table']\")\ntable_nodes\n## {html_node}\n## <div class=\"Table-styles__Wrapper-sc-7c5c517a-0 cqlSCS\">\n## [1] <div data-cy=\"order-by\" class=\"styles__OrderBy-sc-2eade904-0 kaHofu\">\\n<s ...\n## [2] <div data-cy=\"table-header\" class=\"Table-styles__CommonGrid-sc-7c5c517a-1 ...\n## [3] <div data-cy=\"table-content\" class=\"Table-styles__CommonGrid-sc-7c5c517a- ...\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntable_nodes = soup.select(\"*[class*=Table]\") # <1>\nlen(table_nodes) # <2>\n\n[i.__str__()[0:100] for i in table_nodes] # <3>\n## 3\n## ['<div class=\"Table-styles__Wrapper-sc-7c5c517a-0 cqlSCS\"><div class=\"styles__OrderBy-sc-2eade904-0 ka', '<div class=\"Table-styles__CommonGrid-sc-7c5c517a-1 Table-styles__Header-sc-7c5c517a-2 dTTMvn bBWhIS\"', '<div class=\"Table-styles__CommonGrid-sc-7c5c517a-1 Table-styles__Content-sc-7c5c517a-3 dTTMvn jfNiTo']\n```\n:::\n\n\n\n1. Get all nodes that have class that starts with Table\n2. How many nodes did we find?\n3. Print out the first 100 characters of each element to see what we found without drowning in text.\n\n:::\n\nIt can be hard to get the hang of \"reading\" HTML to make sense of it -- what I usually do is try to find the narrowest set of nodes I can that have the content I want. \nTo identify this, I'll use a process like that shown in @fig-olympic-html-gif, where I'll right click on the web page in the browser, select \"Inspect element\", and then interactively hover over various HTML elements until I get a sense of what each component of the rendered page looks like in HTML. \n\nIn this case, the 'minimal node' is: \n\n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<div data-cy=\"table-content\" class=\"Table-styles__CommonGrid-sc-7c5c517a-1 Table-styles__Content-sc-7c5c517a-3 dTTMvn jfNiTo\"></div>\n```\n:::\n\n\n\n\nIt has just the content, without the sortable headers and other stuff that we don't particularly care about.\nThat is, the headers and such are important for context, but can be added in to the table relatively quickly (and thus aren't worth the time to scrape). \n\nI also noticed that in each \"column\" of a single row, there are div elements with attributes that contain the row number (`data-row-id` or `data-medal-id`), and that each div element has one or the other of these attributes, but not both. \nThat means that if we can get the row numbers from the attributes and the column numbers based on the relative position of the elements, we can reconstruct the table structure from just a list of disjoint `div` elements. \n\n::: {.learnmore collapse=true}\n\n#### Another Approach: Text Editor HTML Magic {-}\n\nSometimes, if I'm not feeling the interactive inspection in the browser, or if things are complicated and/or the inspection isn't going well, I'll take a more direct approach and copy a subset of the HTML out into a text editor. Then, I do a little bit of find-and-replace magic: \n\n1. Search for `<` and replace it with `\\n<`, to get each tag on its own line in the text document. HTML may not care much about whitespace between text nodes, but it makes it a lot more human-readable. \n2. Search for `\\n</` and replace it with `</` to get the end tags back on the same line as the corresponding start tag (at least for elements with no children). \n\nYou can see the result of this find-and-replace magic in [this file](../data/Paris 2024 Olympic Medal Table - Gold, Silver & Bronze - table only.txt). \n\nIn my simplified view, I start to notice a pattern of div-span-span. \nThat is, each div element contains a couple of span elements, and there are several div- elements that show up for each row in the table.\nSome of these elements have attribute `data-row-id` and some have attribute `data-medal-id`, but the values of each of these attributes have `row-##` where `##` is the row number in the table. \nAs a result, it seems like we might want to focus primarily on the div elements and only work with the span elements if we absolutely have to. \n\n:::\n\nThere is always a \"prettier\" way to do HTML parsing, but in most cases it's faster and more straightforward to take a quick-and-dirty approach and only make things more complicated if necessary. \n\nBased on the basic structure I've described above, let's try to write code that \n\n1. Looks for the div elements that have attributes `data-row-id` and `data-medal-id`\n2. Gets the text from these elements\n3. Rearranges the text from (2) into rows and columns using a pivot operation\n4. Converts medal counts to numeric variables, if they are characters, replacing '-' with `NA`\n\nEach step in this outline may take more than one line of code.\n\n::: panel-tabset\n\n#### R {-}\n\nThe CSS selector we use here is a compound selector - it looks for div elements that have `data-row-id` or `data-medal-id` as an attribute. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_data <- html_elements(doc, css = \"div[data-row-id],div[data-medal-id]\")   # <1>\n\nheader_names <- c(\"row\", \"flag\", \"country_abb\", # <2>\n                  \"gold\", \"silver\", \"bronze\", \"total\", \"country\") # <2>\n\nmedal_data <- tibble(\n  idx = 1:length(table_data), # <3>\n  text = map_chr(table_data, html_text), # <4>\n  medal_attributes = map_chr(table_data, ~html_attr(., \"data-medal-id\")), # <5>\n  row_attributes = map_chr(table_data, ~html_attr(., \"data-row-id\")) # <6>\n) |>\n  mutate(row = if_else(is.na(medal_attributes), # <7>\n                       str_extract(row_attributes, \"\\\\d{1,}\"), # <7>\n                       str_extract(medal_attributes, \"\\\\d{1,}\"))) |> # <7>\n  group_by(row) |> # <8>\n  mutate(column = 1:n()) # <8>\n\n```\n:::\n\n\n\n1. Search for `div` nodes that have either `data-row-id` or `data-medal-id` attributes. \n2. Define a header row that corresponds to the 8 `div` elements in each row.\n3. Create a table with the index of the nodes in the list created in step 1.\n4. Convert each HTML node to text (quick and dirty option)\n5. Get the `data-row-id` if it exists\n6. Get the `data-medal-id` if it exists\n7. Get the row number from `data-row-id` if `medal_attributes` is `NA`, and otherwise, get it from `data-medal-id.`\n8. Group by row number and create column number, assuming the nodes are in row, column order. \n\n\nThese steps account for the first two steps listed in the outline above. \nNext, we need to pivot the data to get the table as it is shown visually on the webpage, and then we need to convert the medal totals from character to numeric variables. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedal_data_wide <- medal_data |>\n  select(-idx, -medal_attributes, -row_attributes) |> # <1>\n  pivot_wider(names_from = column, values_from = text) |> # <2>\n  set_names(header_names) |> # <3>\n  mutate(across(gold:total, as.numeric)) # <4>\n```\n:::\n\n\n\n1. Remove columns that are no longer necessary so they don't interfere with pivot operation\n2. Pivot to replicate structure of original table, using the `column` values as column names for now.\n3. Set column names to descriptive labels\n4. Convert gold, silver, bronze, and total columns to numeric variables, which causes `NA` to replace '-' in the original table. \n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| idx|text    |medal_attributes    |row_attributes      |row | column|\n|---:|:-------|:-------------------|:-------------------|:---|------:|\n|   1|        |NA                  |country-medal-row-1 |1   |      1|\n|   2|MIX AIN |NA                  |country-medal-row-1 |1   |      2|\n|   3|1       |gold-medals-row-1   |NA                  |1   |      3|\n|   4|3       |silver-medals-row-1 |NA                  |1   |      4|\n|   5|1       |bronze-medals-row-1 |NA                  |1   |      5|\n|   6|5       |total-medals-row-1  |NA                  |1   |      6|\n\n\n:::\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntable_nodes = soup.select(\"div[data-row-id],div[data-medal-id]\") # <1>\n\nheader_names = [\"flag\", \"country_abb\", \"gold\", \"silver\", \"bronze\", \"total\", \"country\"] # <2>\n\n\nmedal_data = pd.DataFrame({\n  \"i\": range(0, len(table_nodes)), # <3>\n  \"chr\": [i.get_text() for i in table_nodes], # <4>\n  \"attr\": [dict(i.attrs) for i in table_nodes] # <5>\n  })\n  \nmedal_data[\"row\"] = [medal_data.attr[i]['data-row-id'] # <6>\n                      if 'data-row-id' in medal_data.attr[i]  # <6>\n                      else medal_data.attr[i]['data-medal-id']  # <6>\n                      for i in medal_data.i] # <6>\n\n```\n:::\n\n\n\n1. This gets all of the `div` elements with a `data-row-id` or `data-medal-id` attribute\n2. Create a list of column names (for later)\n3. Create an index along `table_nodes` to match the row number\n4. Get the text from `table_nodes` as it would be rendered in HTML\n5. Create a dictionary of attributes for each of the entries in `table_nodes`. This will allow us to pull values out by attribute name.\n6. This is a fairly long list comprehension (sorry). For each of the rows, we're going to check and see if `attr` has an entry `data-row-id`, and if so, we're going to pull the value out. If not, we'll pull out the value from `data-medal-id`. \n\n\nNext, we need to pivot the data to get the table as it is shown visually on the webpage, and then we need to convert the medal totals from character to numeric variables. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport re # <1>\n\nmedal_data['rownum'] = [re.search(r'\\d+', i).group() for i in medal_data.row] # <2>\nmedal_data['colnum'] = medal_data.groupby('rownum').cumcount() + 1 # <3>\nmedal_data_wide = medal_data.loc[:,['chr', 'rownum', 'colnum']].pivot(columns='colnum', index = 'rownum') # <4>\nmedal_data_wide.columns = header_names # <5>\n\ntmp = [pd.to_numeric(medal_data_wide[i], errors='coerce') for i in ['gold', 'silver', 'bronze', 'total']] # <6>\n\ntmpfix = pd.DataFrame(tmp).transpose() # <7>\nmedal_data_wide[['gold', 'silver', 'bronze', 'total']] = tmpfix # <8>\n```\n:::\n\n\n\n1. Load regular expression library\n2. Search for one or more consecutive digits in the row name\n3. group by the row number and count the rows in each group to get columns\n4. Select only the columns we need - row, col, and the text shown on the HTML page, and then pivot so that rows are rows and cols are cols\n5. Set names to be sensible/meaningful.\n6. For each of the four columns with medal totals, convert to numeric (coercing '-' to NaN). The result is a list of length $4$, and each element in the list is a list with $92$ entries. \n7. Convert the list of lists to a pandas DataFrame with dimensions $4\\times 92$ and then transpose it so that it will fit back in our data frame. \n8. Store the numeric variables back into the wide data frame in the correct columns. \n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|flag |country_abb    | gold| silver| bronze| total|country    |\n|:----|:--------------|----:|------:|------:|-----:|:----------|\n|     |MIX AIN        |    1|      3|      1|     5|AIN        |\n|     |BEL Belgium    |    3|      1|      6|    10|Belgium    |\n|     |BOT Botswana   |    1|      1|    NaN|     2|Botswana   |\n|     |BRA Brazil     |    3|      7|     10|    20|Brazil     |\n|     |BUL Bulgaria   |    3|      1|      3|     7|Bulgaria   |\n|     |CPV Cabo Verde |  NaN|    NaN|      1|     1|Cabo Verde |\n\n\n:::\n:::\n\n\n\n\n\n\n:::\n::: column-margin\n\n![(Click to enlarge) Screenshot of the 2024 Paris Olympics Medal \"Table\"](../images/advanced/paris-2024-medal-table.png){.lightbox #fig-olympic-medal-page fig-alt=\"Screenshot of https://www.olympics.com/en/olympic-games/paris-2024/medals, showing gold, silver, and bronze medal counts for the first 7 countries listed alphabetically.\"}\n\n\n![(Click to enlarge) Screen recording: Using the Developer Console to map web page elements to HTML code in order to identify attributes and document structure that can be parsed.](../images/advanced/Paris-2024-HTML-explorer.gif){.lightbox #fig-olympic-html-gif fig-alt=\"Screen recording of https://www.olympics.com/en/olympic-games/paris-2024/medals, showing the HTML corresponding to the first row of the table. Each div element has an attribute that contains information on the row of the table, and that information can be used along with the rendered text on the HTML page to reconstruct the table quickly.\"}\n\n:::\n\n\n::::\n\n## Ethical Web Scraping\n\nScraping information off of the web can quickly push you into a zone where you have to worry about legality, privacy, and copyright issues.\nIn addition, not all websites want to be scraped, and scraping a website (even if the website is not actively blocking you) can create unacceptable load on the server hosting the site, if you are not careful and ethical about what you are doing.\nThis section describes a couple of important components of scraping websites ethically, but these components also provide some important technical background that can be useful for debugging why your web scraping script isn't working the way you expect.\n\n### robots.txt\n\nThe `robots.txt` file is found at the root level of the website, and gives instructions to web crawlers/scrapers as to what areas of the site are allowed to be scraped, and who is allowed to scrape them.\nWebsites identify who you are using a **User-agent** that is transmitted any time your computer requests information from the internet. \n\nWhen we look at what we're allowed to scrape, we want to find the `User-agent: *` section of the `robots.txt` file that describes what someone with any user agent not otherwise specified is allowed to scrape. \n\nCheck out some robots.txt files to see what things they allow and block.\n\n- https://www.google.com/robots.txt    \nIn google's robots.txt file, they explicitly block scraping search, groups, and other products (patents, citations, scholar, maps), but they allow scraping some books content (related, editions, subject, about). \n\n- https://github.com/robots.txt    \nGithub's robots.txt file provides some information about their API (which is more convenient than scraping, generally - see @sec-data-apis), but allows all user-agents and disallows most of the \"extra\" information about repositories - pulse, projects, forks, issues, milestones, commits, etc. - so you can access the main repositories but not the details via scraping, if you choose to scrape. Github also provides a contact email if you want to crawl the entire site -- likely not relevant unless you're writing a search engine, but it's helpful to know who to contact in any case. \n\n- https://en.wikipedia.org/robots.txt    \nWikipedia's robots.txt file allows some bots and disallows others. They mention paying attention to 429 rate limit response codes and not copying the entire site. Further down, they mention a reasonable request rate of 20 requests per second. \n\n- https://www.olympics.com/robots.txt    \nThis site doesn't allow scraping /athletes/library/*, search (which just prevents infinite recursive scraping -- that's actually helping bots out), test directories, or syndicated videos. No big deal. \n\n- https://www.juniorrollerderby.org/robots.txt    \nThis site doesn't allow crawling /users/ or /event sections of the site, but is otherwise fine with being scraped. \n\n`robots.txt` files will often use a local path - the base site is `https://wikipedia.org/` or `https://google.com/` or `https://github.com/`, so they will list `/search/` as shorthand for `https://google.com/search/`. \nIt is fairly common for links to be specified relative to the base site as well, so you will often have to paste the front part of the URL onto the local path to get a valid URL. \n\nThe `polite` R package will ensure that your requests accommodate anything specified in the `robots.txt` file [@struckIntroductionWebScraping;@polite]. \nThe `reppy` python package [@kempRespectingRobotstxtYour2025;@b4handReppyReplacementRobotstxt2019] has similar functions to facilitate ethical web scraping.\n\nAs with any ethical system, there can be reasons to justify not complying with robots.txt [@EthicsRobotstxt2013;@pierceRiseFallRobotstxt2024]. \nJournalists often want to archive web pages exactly as they were to ensure that their sources are unimpeachable. \nMore broadly, the Internet Archive announced in 2017 that it would no longer observe robots.txt rules because its archival mission had a different goal than bots that crawl the internet for search indexing purposes.\nDuring the 2025 Trump administration directed purge of DEI content from military and government websites [@baldorPentagonsPurgeOfficials2025], internet activists often ignored robots.txt files in order to ensure that content was archived and not entirely erased from historical records. \nHowever, even under these scenarios, ensuring that scraping does not overload the web server is still important, as overloaded servers don't respond to requests, and too many requests may get your IP address blocked by the server entirely. \n\n`robots.txt` is also a primary defense against content being stolen and fed into AI applications; as a result, it is important to be aware of the file both as a consumer of web-based information and as someone who may one day publish content on the web. \n\n:::: demo\n\n#### Demo: Checking `robots.txt` programmatically {-}\n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(polite)\n\nbow(\"https://wikipedia.org\")\n## <polite session> https://wikipedia.org\n##     User-agent: polite R package\n##     robots.txt: 465 rules are defined for 34 bots\n##    Crawl delay: 5 sec\n##   The path is scrapable for this user-agent\nbow(\"https://google.com/search\")\n## <polite session> https://google.com/search\n##     User-agent: polite R package\n##     robots.txt: 525 rules are defined for 5 bots\n##    Crawl delay: 5 sec\n##   The path is not scrapable for this user-agent\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\nimport urllib.robotparser\n\ndef is_allowed(url):\n  # Setup robots.txt parser\n  rp = urllib.robotparser.RobotFileParser()\n  rp.set_url(urljoin(url, '/robots.txt'))\n  rp.read()\n  return rp.can_fetch(\"*\", url)\n\n# Check if you're allowed to scrape the site\nis_allowed(\"https://wikipedia.org\")\n## False\nis_allowed(\"https://google.com/search\")\n## False\n```\n:::\n\n\n\n\n:::\n\n::::\n\n\n:::: example\n\n#### Try it out: Can you scrape these sites? {-}\n\n\n::: panel-tabset\n\n##### Problem {-}\n\nDetermine (using any method you like) whether you're allowed to scrape the following sites, and whether there are any custom restrictions on the interval between requests:\n\n- https://linkedin.com\n- https://lincoln.craigslist.org/mis/\n- https://reddit.com/r/Aww/\n\nAlso determine whether the site has a contact point for individual requests, if the data you want is not scrape-able. \n\n##### Solution (manual) {-}\n\n- LinkedIn: [robots.txt](https://www.linkedin.com/robots.txt)\n```\nUser-agent: *\nDisallow: /\n\n# Notice: If you would like to crawl LinkedIn,\n# please email whitelist-crawl@linkedin.com to apply\n# for white listing.\n```\nScraping LinkedIn is not allowed.\n\n- Craigslist Missed Connections [robots.txt](https://lincoln.craigslist.org/robots.txt)\n```\nUser-agent: *\nDisallow: /reply\nDisallow: /fb/\nDisallow: /suggest\nDisallow: /flag\nDisallow: /mf\nDisallow: /mailflag\nDisallow: /eaf\n```\nScraping Craigslist missed connections is technically allowed. \nEven so, Craigslist is notorious for banning users for too many requests, even when they're spaced out over a significant period of time and handled politely. \n\n- Reddit /r/Aww: [robots.txt](https://www.reddit.com/robots.txt)\n```\n# Welcome to Reddit's robots.txt\n# Reddit believes in an open internet, but not the misuse of public content.\n# See https://support.reddithelp.com/hc/en-us/articles/26410290525844-Public-Content-Policy Reddit's Public Content Policy for access and use restrictions to Reddit content.\n# See https://www.reddit.com/r/reddit4researchers/ for details on how Reddit continues to support research and non-commercial use.\n# policy: https://support.reddithelp.com/hc/en-us/articles/26410290525844-Public-Content-Policy\n\nUser-agent: *\nDisallow: /\n```\nScraping Reddit is not allowed. Some posts may be accessible via the API. \n\n##### Solution (R) {-}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(polite)\n\nbow(\"https://linkedin.com\")\n## <polite session> https://linkedin.com\n##     User-agent: polite R package\n##     robots.txt: 4352 rules are defined for 75 bots\n##    Crawl delay: 5 sec\n##   The path is not scrapable for this user-agent\nbow(\"https://lincoln.craigslist.org/mis/\")\n## <polite session> https://lincoln.craigslist.org/mis/\n##     User-agent: polite R package\n##     robots.txt: 8 rules are defined for 14 bots\n##    Crawl delay: 5 sec\n##   The path is scrapable for this user-agent\nbow(\"https://reddit.com/r/Aww/\")\n## <polite session> https://reddit.com/r/Aww/\n##     User-agent: polite R package\n##     robots.txt: 1 rules are defined for 1 bots\n##    Crawl delay: 5 sec\n##   The path is not scrapable for this user-agent\n```\n:::\n\n\n\n\n##### Solution (Python) {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\nfrom urllib.parse import urljoin, urlparse\nimport urllib.robotparser\n\ndef is_allowed(url):\n  # Setup robots.txt parser\n  rp = urllib.robotparser.RobotFileParser()\n  rp.set_url(urljoin(url, '/robots.txt'))\n  rp.read()\n  return rp.can_fetch(\"*\", url)\n\n# Check if you're allowed to scrape the site\nis_allowed(\"https://linkedin.com\")\n## False\nis_allowed(\"https://lincoln.craigslist.org/mis/\")\n## True\nis_allowed(\"https://reddit.com/r/Aww/\")\n## False\n```\n:::\n\n\n\n\n:::\n\n::::\n\n### User Agents {#sec-user-agents}\n\nWeb traffic logs on servers include your user agent, which provides information about your operating system and browser. \nThis information can help server administrators understand who is accessing their site, and can lead to decisions to e.g. upgrade the web page to no longer accommodate Internet Explorer users, since they make up a tiny fraction of all web traffic.\nFrom a user perspective, some sites will prevent e.g. Linux users from downloading unsupported software, or increase prices if your user agent indicates you're using a Mac [@klosowskiHowWebSites2013], so changing your user agent is not just something you might want to do when scraping the web. \n\n::: column-margin\n\n![You can use the site https://whatmyuseragent.com to find out what information you're providing to websites. Don't depend on the accuracy of the location -- it is often where your internet provider is headquartered, rather than where you're actually located.](../images/advanced/user-agent-info.png){.lightbox fig-alt=\"The image is a screenshot from the website \\\"WhatMyUserAgent.com,\\\" displaying detailed information about the user\\'s browsing and system characteristics. The top section shows the user agent string, highlighted in a blue box, which can be copied. Below that, the \\\"Your IP Address\\\" and \\\"Location\\\" sections provide a partially censored IP address and a geographic location with a Google Earth image depicting a world map. It identifies the city as Bellevue, with latitude 47.6154 and longitude -122.2103. A note on the left states the inaccuracy regarding the actual location. Further down, \\\"Browser Information\\\" details the browser as Firefox with version 139.0, JavaScript and cookies enabled, and screen resolution of 3840x2160 with a window size of 1920x965. The \\\"Opera System Information\\\" section lists \\\"GNU/Linux\\\" as the operating system and the platform as x64. Lastly, the \\\"Device Information\\\" section notes the type as a desktop.\"}\n\n:::\n\n::: {.demo collapse=true}\n\n#### From the Other Side: Examining Access Logs and User Agents {-}\nIt's sometimes helpful to look at what a server administrator might see if you're scraping the web improperly. \nTo demonstrate, I decided to pull the access logs from my personal website just to see who had been snooping around and what their user agents were. \nI've censored the IP addresses and will primarily focus on the browser type, if it is properly defined. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Quick and dirty R code to look at the most common User-agents accessing my home website.\"}\nlibrary(stringr)\nreadLines(\"../data/server-access-log.txt\") |>\n  str_extract(\".*\\\"(.*)\\\"$\", group = 1) |>\n  table() |>\n  sort(decreasing=T) |>\n  head(10) |>\n  as.data.frame() |>\n  set_names(c(\"User-agent\", \"Freq\")) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|User-agent                                                                                                                                                                                                        | Freq|\n|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----:|\n|Scrapy/2.11.2 (+https://scrapy.org)                                                                                                                                                                               |  238|\n|Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36                                                                                                   |  144|\n|Mozilla/5.0 (compatible; AhrefsBot/7.0; +http://ahrefs.com/robot/)                                                                                                                                                |   40|\n|-                                                                                                                                                                                                                 |   39|\n|Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1                                                                       |   30|\n|Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36                                                                                               |   24|\n|Mozilla/5.0 (Linux; Android 10; LIO-AN00 Build/HUAWEILIO-AN00; wv) MicroMessenger Weixin QQ AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/78.0.3904.62 XWEB/2692 MMWEBSDK/200901 Mobile Safari/537.36 |   20|\n|Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36 Edg/114.0.1823.43                                                                                 |   20|\n|Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46                                                                                |   17|\n|'Mozilla/5.0 (compatible; GenomeCrawlerd/1.0; +https://www.nokia.com/genomecrawler)'                                                                                                                              |   16|\n\n\n:::\n:::\n\n\n\n\nIt looks like the most common user agent is `scrapy`, a python library for web scraping, and the second most common is some variant of Mozilla/5.0 on various operating systems and platforms. \nAs a result of this investigation, I blocked `scrapy` using `robots.txt`, because I don't know what that's being used for but there is literally nothing of interest to the wider internet, data-wise, on my personal website. \nI also blocked a bunch of different AI bots because I don't want them indexing my personal site either. \n\nIt's important to note from a server administrator side that `robots.txt` doesn't provide any additional security, as malicious actors can and will ignore ethical/polite web scraping conventions. \n\n:::\n\nConvention dictates that your user agent when scraping should provide some contact information and reasoning, such as \"Graduate student scraping for research on underwater basketweaving. Contact me at name@myuni.edu for more info.\"\nHowever, some sites will block user agents that do not appear to be a normal browser, even if scraping is explicitly allowed. \nIn these cases, you will want to set a header that mimics a browser (Consult this [up-to-date list of common user agents](https://techblog.willshouse.com/2012/01/03/most-common-user-agents/) for a few good choices). \n\n:::: demo\n\n#### Setting a User Agent {-}\n\n::: panel-tabset\n\n##### R: `rvest` {-}\n\nYou may have noticed in @sec-demo-olympic-medals that the R code read the file in from a saved version instead of from the web directly. \nWhen we try to read from the web directly, we get this message:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\ndoc <- read_html(\"https://www.olympics.com/en/olympic-games/paris-2024/medals\")\n```\n:::\n\n\n\n\nBy default, `rvest` uses the default user agent specified in the `curl` package^[`curl` is a very low-level way to interface with the web... be glad we don't have to use it directly.], which is `NULL`. \nSo, let's try setting an informative user agent, instead of NULL.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr) # <1>\n\n# Set the UA to describe what we're doing\nua <- \"Demonstrating web scraping for educational purposes. Contact svanderplas2@unl.edu for more info.\"\nolympics <- GET(\"https://www.olympics.com/en/olympic-games/paris-2024/medals\", \n                user_agent(ua)) # <2>\n## Error in curl::curl_fetch_memory(url, handle = handle): Stream error in the HTTP/2 framing layer [www.olympics.com]:\n## HTTP/2 stream 1 was not closed cleanly: INTERNAL_ERROR (err 2)\n```\n:::\n\n\n\n1. `httr` is used to specify a user agent directly\n2. Use a `GET` request to acquire the HTML page code from the server, instead of reading the HTML directly\n\nOk, well, that doesn't appear to work - we're still getting blocked by the server and can't even read the HTML file properly.\nThe `robots.txt` file for this site allows scraping as long as we're not looking at `/athletes/library/` or `/search/`, so we're in compliance with the rules they've set... but maybe we just need to set a user agent that makes us look like a browser?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr) # <1>\n\n# Set the user agent to a super common one\nua <- \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\"\nolympics <- GET(\"https://www.olympics.com/en/olympic-games/paris-2024/medals\", \n                user_agent(ua)) # <2>\ndoc <- read_html(olympics) # <3>\nhtml_element(doc, \"[data-cy=\\\"table-content\\\"]\") # <4>\n## {html_node}\n## <div data-cy=\"table-content\" class=\"Table-styles__CommonGrid-sc-7c5c517a-1 Table-styles__Content-sc-7c5c517a-3 dTTMvn jfNiTo\">\n##  [1] <div class=\"line\"></div>\\n\n##  [2] <div data-row-id=\"country-medal-row-1\" class=\"sc-26c0a561-2 bNqscu\"><pic ...\n##  [3] <div data-row-id=\"country-medal-row-1\" class=\"sc-26c0a561-4 kaSJtG\">\\n<d ...\n##  [4] <div data-cy=\"medal-module\" data-medal-id=\"gold-medals-row-1\" title=\"Gol ...\n##  [5] <div data-cy=\"medal-module\" data-medal-id=\"silver-medals-row-1\" title=\"S ...\n##  [6] <div data-cy=\"medal-module\" data-medal-id=\"bronze-medals-row-1\" title=\"B ...\n##  [7] <span class=\"mobile-hidden\"></span>\n##  [8] <div data-cy=\"medal-module\" data-medal-id=\"total-medals-row-1\" title=\"\"  ...\n##  [9] <div data-cy=\"country-complete-name\" data-row-id=\"country-medal-row-1\" c ...\n## [10] <div class=\"line\"></div>\\n\n## [11] <div data-row-id=\"country-medal-row-2\" class=\"sc-26c0a561-2 bNqscu\"><pic ...\n## [12] <div data-row-id=\"country-medal-row-2\" class=\"sc-26c0a561-4 kaSJtG\">\\n<d ...\n## [13] <div data-cy=\"medal-module\" data-medal-id=\"gold-medals-row-2\" title=\"Gol ...\n## [14] <div data-cy=\"medal-module\" data-medal-id=\"silver-medals-row-2\" title=\"S ...\n## [15] <div data-cy=\"medal-module\" data-medal-id=\"bronze-medals-row-2\" title=\"B ...\n## [16] <span class=\"mobile-hidden\"></span>\n## [17] <div data-cy=\"medal-module\" data-medal-id=\"total-medals-row-2\" title=\"\"  ...\n## [18] <div data-cy=\"country-complete-name\" data-row-id=\"country-medal-row-2\" c ...\n## [19] <div class=\"line\"></div>\\n\n## [20] <div data-row-id=\"country-medal-row-3\" class=\"sc-26c0a561-2 bNqscu\"><pic ...\n## ...\n```\n:::\n\n\n\n1. `httr` is used to specify a user agent directly\n2. Use a `GET` request to acquire the HTML page code from the server, instead of reading the HTML directly\n3. Use `read_html` to parse the HTML code that the server provided\n4. Check to make sure the information we wanted is present. \n\nAnd, lo and behold, we can scrape the site properly once our user agent is set. \n\n##### R: `polite` {-}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(polite) # <1>\n\n# Set the user agent to a super common one\nua <- \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\"\nurl <- \"https://www.olympics.com/en/olympic-games/paris-2024/medals\"\nolympics <- bow(url, user_agent = ua) # <2>\ndoc <- scrape(olympics) # <3>\nhtml_element(doc, \"[data-cy=\\\"table-content\\\"]\") # <4>\n## {html_node}\n## <div data-cy=\"table-content\" class=\"Table-styles__CommonGrid-sc-7c5c517a-1 Table-styles__Content-sc-7c5c517a-3 dTTMvn jfNiTo\">\n##  [1] <div class=\"line\"></div>\\n\n##  [2] <div data-row-id=\"country-medal-row-1\" class=\"sc-26c0a561-2 bNqscu\"><pic ...\n##  [3] <div data-row-id=\"country-medal-row-1\" class=\"sc-26c0a561-4 kaSJtG\">\\n<d ...\n##  [4] <div data-cy=\"medal-module\" data-medal-id=\"gold-medals-row-1\" title=\"Gol ...\n##  [5] <div data-cy=\"medal-module\" data-medal-id=\"silver-medals-row-1\" title=\"S ...\n##  [6] <div data-cy=\"medal-module\" data-medal-id=\"bronze-medals-row-1\" title=\"B ...\n##  [7] <span class=\"mobile-hidden\"></span>\n##  [8] <div data-cy=\"medal-module\" data-medal-id=\"total-medals-row-1\" title=\"\"  ...\n##  [9] <div data-cy=\"country-complete-name\" data-row-id=\"country-medal-row-1\" c ...\n## [10] <div class=\"line\"></div>\\n\n## [11] <div data-row-id=\"country-medal-row-2\" class=\"sc-26c0a561-2 bNqscu\"><pic ...\n## [12] <div data-row-id=\"country-medal-row-2\" class=\"sc-26c0a561-4 kaSJtG\">\\n<d ...\n## [13] <div data-cy=\"medal-module\" data-medal-id=\"gold-medals-row-2\" title=\"Gol ...\n## [14] <div data-cy=\"medal-module\" data-medal-id=\"silver-medals-row-2\" title=\"S ...\n## [15] <div data-cy=\"medal-module\" data-medal-id=\"bronze-medals-row-2\" title=\"B ...\n## [16] <span class=\"mobile-hidden\"></span>\n## [17] <div data-cy=\"medal-module\" data-medal-id=\"total-medals-row-2\" title=\"\"  ...\n## [18] <div data-cy=\"country-complete-name\" data-row-id=\"country-medal-row-2\" c ...\n## [19] <div class=\"line\"></div>\\n\n## [20] <div data-row-id=\"country-medal-row-3\" class=\"sc-26c0a561-2 bNqscu\"><pic ...\n## ...\n```\n:::\n\n\n\n1. `polite` allows you to specify a user agent directly\n2. `bow` acquires the HTML page code from the server\n3. `scrape` parses the HTML code that the server provided, at which point we can use various `rvest` and `xml2` functions to pull out relevant information. \n4. Check to make sure the information we wanted is present. \n\n\n##### Python {-}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom bs4 import BeautifulSoup, SoupStrainer # <1>\nimport urllib.request # <2>\n\nreq = urllib.request.Request( # <3>\n  \"https://www.olympics.com/en/olympic-games/paris-2024/medals\",  # <3>\n  data = None,  # <3>\n  headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0'} # <3>\n) # <3>\n\npage_bytearray = urllib.request.urlopen(req) # <4>\npage = page_bytearray.read()  # <4>\npage_bytearray.close() # <4>\n\nsoup = BeautifulSoup(page) # <5>\ntable_nodes = soup.select(\"div[data-row-id],div[data-medal-id]\")  # <5>\n```\n:::\n\n\n\n1. `bs4` is a library for web scraping. `BeautifulSoup` is its primary function.\n2. `urllib` helps with web calls, and `request` allows us to set browser headers (so it looks like we're using e.g. Firefox instead of a programming language to access the web). \n3. This requests the URL using headers that suggest we're using an older version of Firefox on Windows. \n4. These lines open the page, read it, and close the open page in memory (which is important because open files in memory can cause memory leaks and other badness)\n5. Check to make sure the information we wanted is present. \n\n:::\n\n::::\n\n## Scraping Static Webpages\n\n**Static** web pages have HTML that stays the same as the web page loads -- all of the content is specified in the HTML, and it doesn't change (much). \nAny scripting changes are cosmetic, in that they might change the appearance of the page somewhat but they don't e.g. insert a data table during the page loading process. \nThese pages can be scraped using `rvest` and `xml2` in R or `bs4` (BeautifulSoup) in Python. \n\n### Reading in HTML Tables {#sec-html-table-direct}\n\nIn the simplest possible scenario, the data is already well-organized in a tabular structure (with actual `<table>` tags, unlike the example in @sec-demo-olympic-medals). \n\n:::: demo\n\n#### Demo: Reading HTML Tables Directly {-}\n\nConsider the Wikipedia page containing a [List of American Revolutionary War Battles](https://en.wikipedia.org/wiki/List_of_American_Revolutionary_War_battles). \n\n::: panel-tabset\n\n##### R {-}\nWe would use the `html_table()` function from `rvest` to read each of the tables on this webpage into a `tibble` object. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nrev_war_tables <- read_html(\"https://en.wikipedia.org/wiki/List_of_American_Revolutionary_War_battles\") |>\n  html_table()\n\nlength(rev_war_tables)\n## [1] 33\n```\n:::\n\n\n\n\n33 tables is a few too many to deal with!\n\nLooking at the page source, we can see that actual data tables (as opposed to tables used for formatting and arranging content^[You aren't supposed to do this because it's hard to make sense of the information with a screen reader - users who are low vision might think the information was actually related structurally when it is not and the table is just for arrangement purposes. As there are other ways to arrange content that are arguably better in other ways, tables should be reserved for situations where the content is actually structurally tabular.]) are sortable and have class `class=\"sortable wikitable jquery-tablesorter\"`. \nThis is a good example of a static page that uses JavaScript (JQuery, to be specific) to enhance the page (e.g. making the table sortable) without injecting large amounts of content into the page. \nWe only need the dynamic scraping solutions if the **content** is injected -- in this case, the JavaScript is only making modifications to the function/appearance of the page. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nrev_war_battles <- read_html(\"https://en.wikipedia.org/wiki/List_of_American_Revolutionary_War_battles\") |>\n  html_element(\".wikitable\") |>\n  html_table()\n\nhead(rev_war_battles)\n## # A tibble: 6 × 5\n##   Battle                             Date                 Location Outcome Ref  \n##   <chr>                              <chr>                <chr>    <chr>   <chr>\n## 1 Powder Alarm*                      September 1, 1774    Massach… Britis… [1]  \n## 2 Storming of Fort William and Mary* December 14, 1774    New Ham… Americ… [2]  \n## 3 Battles of Lexington and Concord   April 19, 1775       Massach… Americ… [3]  \n## 4 Battle of Meriam's Corner          April 19, 1775       Massach… Americ… <NA> \n## 5 Siege of Boston                    April 19, 1775 –Mar… Massach… Americ… [4]  \n## 6 Gunpowder Incident*                April 20, 1775       Virginia Virgin… [1]\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nurl = \"https://en.wikipedia.org/wiki/List_of_American_Revolutionary_War_battles\"\nrev_war_battles = pd.read_html(url, attrs= {\"class\": \"sortable wikitable\"})[0]\n## urllib.error.HTTPError: HTTP Error 403: Forbidden\n\nrev_war_battles.iloc[:,0:3]\n## NameError: name 'rev_war_battles' is not defined\n```\n:::\n\n\n\n\n\n:::\n\n\nIf all we wanted was the date of the battle and the state, we could stop here. \nHowever, if we want any supplemental information, such as links to the battles or a more specific location that would be suitable for plotting on a map, we will need to use a more customized approach... continue on to @sec-html-custom to augment this data some more!\n\n::::\n\n### Scraping HTML with Custom Functions {#sec-html-custom}\n\nMuch of the time, the information we want from a website is not directly in tabular form, even if it may have a common structure. \nConsider, for instance, a school directory listing the names, email addresses, office numbers, and phone numbers of the faculty and staff. \nThis could be formatted as a table (and we probably want the end result to be tabular), but more commonly it's structured on the web as a set of \"Cards\" formatted like the one shown in @fig-cartoon-photo-directory. \n\n::: column-margin\n\n![\"Cards\" are often used to show a combination of image and text information populated from structured data. Image modified from a sample image by [Artguru AI](https://www.artguru.ai/ai-art-generator-from-photo/)](../images/advanced/cartoon-photo-directory.png){#fig-cartoon-photo-directory fig-alt=\"A headshot of a cartoon man with grey hair and a grey suit is shown on top. Underneath, the text reads Prof S. Singh. Statistics Chair. 302 Statistics Bldg, City, State, 97389. 123-867-5309.\" .lightbox}\n\n:::\n\nOften, in addition to the text, you will want to acquire image data, links, or data from linked pages along with the information presented on the landing page. \nOr, you may want to acquire information from several pages with similar structure -- for instance, you may want to get all departments at an institution, or information from all of the animal shelters in your state. \nEven when data is not in a \"cards\" style format, but is instead structured in a table, or something that is visually similar to a table but is not actually contained within `<table></table>` tags, it is typically easy enough to get the data out of the HTML markup systematically.\n\nThe most effective way to write code for web scraping tasks more complicated than just reading in a single table is to write custom functions to extract the components you need (and put in appropriate empty/NA values if those components are missing), and then call those custom functions from a main function that can put everything back together). \nYou may need functions for multiple levels of pages, if you have to follow links from one main page to individual, more specific pages.\nThese functions will need to contain error handling, because it is incredibly common for information to be missing, at which point your searches for specific nodes will come back empty. \nIt is very annoying to have your code fail on the 99th of 100 pages and have to re-scrape everything (and, in fact, you generally don't want to do this -- it is more polite to work in a way that ensures you are saving intermediate results and don't have to rescrape everything each time). \n\n:::: demo\n#### Demo: Revolutionary War Battles {-}\n\n\nIf we want to get information from the table of revolutionary war battles that isn't just text (for instance, the link locations to the pages with more detailed information), then we need to write a bit more custom code -- first, to get the links from the table, and second to get additional information from the specific pages for each battle. \n\nIn this case, it's easiest to think of the table as a set of rows with columns that have a specific order. \nWe can use CSS pseudo-classes (things you can append to elements): `:first-child`, `:nth-child(2)`,  `:nth-child(3)` to get the information from the first 3 columns -- the fourth is text that we don't need right now, and the fifth is a citation. \n\n::: callout\n\nIn order to reduce the load on wikipedia and the compile time for the textbook, I have saved the artifacts from this example after running the code once. \nI am invisibly loading those saved objects rather than re-scraping everything each time this book is re-compiled. \n\n:::\n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(dplyr)\ndoc <- read_html(\"https://en.wikipedia.org/wiki/List_of_American_Revolutionary_War_battles\") \n\nrev_war_rows <- html_elements(doc, \".wikitable tr\")\nhead(rev_war_rows)\n## {xml_nodeset (6)}\n## [1] <tr>\\n<th>Battle</th>\\n<th>Date</th>\\n<th>Location</th>\\n<th>Outcome\\n</t ...\n## [2] <tr>\\n<td>\\n<a href=\"/wiki/Powder_Alarm\" title=\"Powder Alarm\">Powder Alar ...\n## [3] <tr>\\n<td>\\n<a href=\"/wiki/Capture_of_Fort_William_and_Mary#Raid\" title=\" ...\n## [4] <tr>\\n<td><a href=\"/wiki/Battles_of_Lexington_and_Concord\" title=\"Battles ...\n## [5] <tr>\\n<td><a href=\"/w/index.php?title=Battle_of_Meriam%27s_Corner&amp;act ...\n## [6] <tr>\\n<td><a href=\"/wiki/Siege_of_Boston\" title=\"Siege of Boston\">Siege o ...\n```\n:::\n\n\n\n\nOur operational node here will be each row of the table. To keep the data together (in case, for instance, some battles don't have their own pages, and thus don't have a link), we need to get a node list of the rows first, and then use selectors on that list to get our data in a consistent order. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_war_battles <- tibble(\n  name = html_elements(rev_war_rows, \"td:first-child\") |> html_text(),\n  link = html_elements(rev_war_rows, \"td:first-child > a\") |> html_attr(\"href\"),\n  date = html_elements(rev_war_rows, \"td:nth-child(2)\") |> html_text(),\n  location = html_elements(rev_war_rows, \"td:nth-child(3)\") |> html_text()\n)\n## Error in `tibble()`:\n## ! Tibble columns must have compatible sizes.\n## • Size 271: Existing data.\n## • Size 270: Column `link`.\n## ℹ Only values of size one are recycled.\n```\n:::\n\n\n\n\nUnfortunately, that doesn't work either! \nOne of the battles doesn't have a unique page, so there's a row mismatch. \nWe need to process each row separately and then rbind them together, or figure out how to fix the fact that if an element doesn't have a child element `a`, then it won't have a `href` attribute, either, and yet we don't want to lose track of the spot where there isn't a corresponding link.\n\nLet's fix the missing-child issue first, and then I will demonstrate the other approach. \nIn this case, they're approximately the same level of difficulty, but often one approach is easier.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsafe_href <- function(i) {\n  # Safely get a child link href from node i, returning NA if no such link exists\n  j <- html_element(i, \"a\") # <1>\n  if(length(j) == 0){ # <2>\n    return(NA) # <2>\n  } else {\n    res <- try(html_attr(j, \"href\")) # <3>\n    if (\"try-error\" %in% class(res)) return(NA) else return(res) # <3>\n  }\n}\n\nrev_war_battles2 <- tibble(\n  name = html_elements(rev_war_rows, \"td:first-child\") |> html_text(),\n  link = html_elements(rev_war_rows, \"td:first-child\") |> map_chr(safe_href),\n  date = html_elements(rev_war_rows, \"td:nth-child(2)\") |> html_text(),\n  location = html_elements(rev_war_rows, \"td:nth-child(3)\") |> html_text()\n)\n\n```\n:::\n\n\n\n1. First get any child of the node that is `a`\n2. Check if any children exist - if not, return NA \n3. Try to get the `href` attribute from `a`, and if that works, return it; if not, return NA. In reality, every `a` element should have a `href` attribute, but this is also a good example of how to ensure your code doesn't fail unexpectedly. \n\nWhen writing custom functions for web scrapign, it's usually helpful to give yourself an idea of what the function does in a comment -- you can often reuse these functions, but that only works if you're kind to future you and remind yourself what they actually do. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rev_war_battles2)\n## # A tibble: 6 × 4\n##   name                               link                         date  location\n##   <chr>                              <chr>                        <chr> <chr>   \n## 1 <NA>                               <NA>                         <NA>  <NA>    \n## 2 Powder Alarm*                      /wiki/Powder_Alarm           Sept… Massach…\n## 3 Storming of Fort William and Mary* /wiki/Capture_of_Fort_Willi… Dece… New Ham…\n## 4 Battles of Lexington and Concord   /wiki/Battles_of_Lexington_… Apri… Massach…\n## 5 Battle of Meriam's Corner          /wiki/Battle_of_Meriam%27s_… Apri… Massach…\n## 6 Siege of Boston                    /wiki/Siege_of_Boston        Apri… Massach…\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\nprocess_battle_row <- function(node){# <1>\n  link = html_element(node, \"td:first-child a\") |> html_attr(\"href\") # <2>\n  tibble(\n    name = html_element(node, \"td:first-child\") |> html_text(),\n    link = if_else(length(link) == 0, NA, link), # <3>\n    date = html_element(node, \"td:nth-child(2)\") |> html_text(),\n    location = html_element(node, \"td:nth-child(3)\") |> html_text()\n  )\n}\n\nrev_war_battles3 <- map(rev_war_rows, process_battle_row) |> bind_rows() # <4>\n```\n:::\n\n\n\n1. The function is called on a single row of the table, so it's much harder to \"lose\" a value.\n2. First, get all first `td` elements with `a` children, and get the `href` attribute from those children. This will be `NULL` or `c()` (a list of length 0) if there is no `a` child of the first `td` element in the node.\n3. The biggest modification here is to use `if_else()` to handle the missing values and replace them with NA instead.\n4. Call `process_battle_row` on each row and bind the rows together. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(rev_war_battles3)\n## # A tibble: 6 × 4\n##   name                               link                         date  location\n##   <chr>                              <chr>                        <chr> <chr>   \n## 1 <NA>                               <NA>                         <NA>  <NA>    \n## 2 Powder Alarm*                      /wiki/Powder_Alarm           Sept… Massach…\n## 3 Storming of Fort William and Mary* /wiki/Capture_of_Fort_Willi… Dece… New Ham…\n## 4 Battles of Lexington and Concord   /wiki/Battles_of_Lexington_… Apri… Massach…\n## 5 Battle of Meriam's Corner          /w/index.php?title=Battle_o… Apri… Massach…\n## 6 Siege of Boston                    /wiki/Siege_of_Boston        Apri… Massach…\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom bs4 import BeautifulSoup, SoupStrainer\nimport urllib.request\n\nheader={'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0'}\nurl = \"https://en.wikipedia.org/wiki/List_of_American_Revolutionary_War_battles\"\nreq = urllib.request.Request(url, headers=header)\n\npage_bytearray = urllib.request.urlopen(req)\npage = page_bytearray.read()\npage_bytearray.close()\n```\n:::\n\n\n\n\nOur operational node here will be each row of the table. \nTo keep the data together (in case, for instance, some battle doesn't have its own page, and thus doesn't have a link), \nwe need to get a node list of the rows first, and then use selectors on that list to get our data in a consistent order. \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsoup = BeautifulSoup(page)   # <1>\n\nrev_war_rows = soup.select(\"table.sortable tr\")   # <2> \n\ndef getText(x): # <3>\n  try: # <3>\n    return x.text # <3>\n  except: # <3>\n    return \"\" # <3>\n\ndef getLink(x): # <4>\n  try: # <4>\n    return x[0].find_all(\"a\")[0].attrs[\"href\"] # <4>\n  except: # <4>\n    return pd.NA # <4>\n\nbattleCol = [i.select(\"td:first-child\") for i in rev_war_rows][1:] # <5>\ndateCol = [i.select_one(\":nth-child(2)\") for i in rev_war_rows][1:] # <5>\nlocationCol = [i.select_one(\":nth-child(3)\") for i in rev_war_rows][1:] # <5>\n\nname = [getText(i) for i in battleCol] # <6>\nlink = [getLink(i) for i in battleCol] # <6>\ndate = [getText(i) for i in dateCol] # <6>\nlocation = [getText(i) for i in locationCol] # <6>\n\nrev_war_battles = pd.DataFrame({\"name\": name, \"link\": link, \"date\": date, \"location\": location}) # <7>\n```\n:::\n\n\n\n1. Read the HTML for the full page\n2. Select the rows of the table that's sortable (e.g. the main table)\n3. Define a helper function that will return the text of a node if there is any, and \"\" otherwise. This makes list comprehensions much easier to read in step 6.\n4. Define a helper function that will return the `href` attribute of the link of a child node, if one exists, and NA otherwise. This makes list comprehensions much easier to read in step 6. \n5. Select the columns of interest - battle, date, and location. Battle will create two columns in our result - one for the name of the battle, one for the link.\n6. Get the actual columns we intend to have in our data frame, using the helper functions created in steps 3-4. \n7. Create a DataFrame by creating a dict of lists and then converting it. \n\n\n\n\n\n\n\n\n\n\n\n:::\n<!-- End panel tabset -->\n\nNow that we have links to the individual pages (where they exist), we can supplement the data in the original table with data from the more detailed battle-level pages. \nOne way to display this data might be to show an animated map that shows simultaneous actions in different locations. \nTo do this, we need latitude and longitude that are at least approximate (and ideally, at a higher resolution than state-level). \nIf we click on the [Powder Alarm](https://en.wikipedia.org/wiki/Powder_Alarm) battle page, we can see a structured table on the right that contains the location of the battle and links to [Suffolk County, Massachusetts](https://en.wikipedia.org/wiki/Suffolk_County,_Massachusetts). \nThe page for Suffolk County, MA has a latitude and longitude. \n\n::: {#fig-rev-war-page-chain layout=\"[[45, -10, 45]]\"}\n\n![(Click to enlarge) Each battle has a formatted table on the right with a sub-table that has a location field.](../images/advanced/rev-war-battle-page.png){fig-alt=\"The image is a composite screenshot showing a Wikipedia article titled \\\"Powder Alarm\\\" on the left and a web inspector view on the right. The Wikipedia article discusses the historical event known as the Powder Alarm, including its background and significance. It features an infobox with a picture of the Powder House in Somerville, Massachusetts, and details such as the event's date, location, and key figures like Thomas Gage and Paul Revere prominently mentioned throughout the text. The web inspector panel on the right displays HTML code related to the page, with a section highlighted in blue. The page elements are structured into tables, revealing details like styles, links, and locations mentioned in the article.\" .lightbox}\n\n![(Click to enlarge) Each location also has a formatted table on the right. GPS location is located within a span element with class `geo-dms`.](../images/advanced/rev-war-location-page.png){fig-alt='The image is a screenshot of a webpage and includes a section of HTML source code. The left side of the image displays a Wikipedia page about Suffolk County, Massachusetts. It features a historical photograph of the Old Suffolk County Courthouse and a map showing its location within the U.S. state of Massachusetts. The page provides details about the county, including its history, government, and politics. Visible text sections include a county overview table with information such as location, founded date, population, and time zone. A voter registration and party enrollment table is also shown. On the right side, the image shows the browser\\'s Developer Tools interface, specifically the \\\"Inspector\\\" tab, which highlights a segment of the HTML code corresponding to the webpage\\'s content. The code focuses on a table section displaying geographic coordinates with HTML elements and classes revealed. The cursor is highlighting the span containing the latitude and longitude.' .lightbox}\n\nTwo steps are necessary in order to get geographic information from the information provided in the table of revolutionary war battles. \n:::\n\nSo, our function needs to:\n\n1. Identify the structured table on the battle page\n2. Find the location row in that table\n3. Look for a link in the location row and follow it, if it exists, to the linked location page\n4. Look for a latitude/longitude entry in the location link page\n\nIf the structured table doesn't exist, the location row doesn't exist, or there is no location link, the function should return a data frame row with `lat=NA, long=NA`. \n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(tibble)\n\nget_battle_location <- function(battle_link) {\n  if(is.na(battle_link)) return(tibble(latitude = NA, longitude = NA, battle_link = NA))\n  battle_url <- paste0(\"https://en.wikipedia.org/\", battle_link)\n  battle_doc <- try(read_html(battle_url))\n  if(\"try-error\" %in% class(battle_doc)) {\n    return(tibble(latitude = NA, longitude = NA, battle_link = battle_link, location_link = NA))\n  }\n  \n  # Get first (hopefully most specific) location link\n  location_url <- html_node(battle_doc, \".infobox .location a\") |> html_attr(\"href\")\n  if(is.na(location_url)) {\n    return(tibble(latitude = NA, longitude = NA, battle_link = battle_link, location_link = NA))\n  }\n  location_doc <- read_html(paste0(\"https://en.wikipedia.org/\", location_url))\n  if(\"try-error\" %in% class(location_doc)) {\n    return(tibble(latitude = NA, longitude = NA, battle_link = battle_link, location_link = location_url))\n  }\n  \n  # Sleep for one second to limit load on servers - \n  # this limits us to at most 2 requests per second, \n  # well below Wikipedia's 20rps limit\n  Sys.sleep(1)\n  \n  # Get location coords\n  location_node <- html_node(location_doc, \".geo-dms\")\n  tibble(\n    type = location_node |> html_children() |> html_attr(\"class\"),\n    value = location_node |> html_children() |> html_text()\n  ) |> pivot_wider(names_from = \"type\") |>\n    mutate(battle_link = battle_link, location_link = location_url) # makes merging easier\n}\n\nbattle_locations <- purrr::map(rev_war_battles2$link, get_battle_location)\nbattle_locations <- bind_rows(battle_locations)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbattle_locations <- battle_locations |> unique() # filter out NA values that don't have any links at all\n\nrev_war_battles3 <- left_join(rev_war_battles2, battle_locations, by = c(\"link\" = \"battle_link\"))\nhead(rev_war_battles3)\n## # A tibble: 6 × 7\n##   name                     link  date  location latitude longitude location_link\n##   <chr>                    <chr> <chr> <chr>    <chr>    <chr>     <chr>        \n## 1 <NA>                     <NA>  <NA>  <NA>     <NA>     <NA>      <NA>         \n## 2 Powder Alarm*            /wik… Sept… Massach… 42°21′3… 71°03′28… /wiki/Suffol…\n## 3 Storming of Fort Willia… /wik… Dece… New Ham… 43°04′2… 70°42′58… /wiki/New_Ca…\n## 4 Battles of Lexington an… /wik… Apri… Massach… 42°29′N  71°23′W   /wiki/Middle…\n## 5 Battle of Meriam's Corn… /wik… Apri… Massach… 42°27′3… 71°19′27… /wiki/Meriam…\n## 6 Siege of Boston          /wik… Apri… Massach… 42°21′3… 71°3′28″W /wiki/Boston\n```\n:::\n\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom bs4 import BeautifulSoup,SoupStrainer\nimport pandas as pd\nimport urllib.request\nimport time # <1>\n\n\ndef req_page(url): # <2>\n  req = urllib.request.Request(url) # <2>\n  page_bytearray = urllib.request.urlopen(req) # <2>\n  page = page_bytearray.read() # <2>\n  page_bytearray.close() # <2>\n  return page # <2>\n\n\ndef get_battle_location(battle_link): # <3>\n\n  try:                                                                    # <4>\n    page=req_page(\"https://en.wikipedia.org\" + battle_link)               # <4>\n    soup = BeautifulSoup(page)                                            # <4>\n    location = soup.select_one(\".infobox .location a\")                    # <4>\n    if len(location) > 0:                                                 # <4>\n      location_link = location.attrs['href']                              # <4>\n    else:                                                                 # <4>\n      raise Exception(\"No location links found\")                          # <4>\n  except:                                                                 # <4>\n    return {\"latitude\":pd.NA, \"longitude\":pd.NA,                          # <4>\n            \"battle_link\":battle_link, \"location_link\":pd.NA}             # <4>\n  \n  try:                                                                    # <5>\n    time.sleep(1)                                                         # <5>\n    page2 = req_page(\"https://en.wikipedia.org\" + location_link)          # <5>\n    soup2 = BeautifulSoup(page2)                                          # <5>\n    location_node = soup2.select_one(\".geo-dms\").find_all(\"span\")         # <5>\n    if len(location_node) == 2:                                           # <5>\n      coords = [i.string for i in location_node]                          # <5>\n    else:                                                                 # <5>\n      raise Exception(\"Insufficient geo-dms coordinates found\")           # <5>\n  except:                                                                 # <5>\n    return {\"latitude\":pd.NA, \"longitude\":pd.NA,                          # <5>\n            \"battle_link\":battle_link, \"location_link\":location_link}     # <5>\n    \n  return {\"latitude\":coords[0], \"longitude\":coords[1],                    # <6>\n          \"battle_link\":battle_link, \"location_link\":location_link}       # <6>\n\nbattle_locations = [get_battle_location(i) for i in rev_war_battles.link] # <7>\nbattle_locations = pd.DataFrame(battle_locations)                         # <7>\n```\n:::\n\n\n\n1. Use the `time` library to sleep for 1 second before making a 2nd request within the same function.\n2. We'll be making multiple requests in this function, so streamline it so that we don't have to type 4 lines each time by making a short custom function.\n3. Define a function that takes the local link to the battle page and (1) gets the most specific location link provided for the battle, and (2) follows the link to the location page to get the latitude and longitude of that location. Return a dict containing lat/long, battle_link, and location_link. \n4. Use a try/except statement to handle any errors that arise when a link doesn't resolve or a specific element isn't found. Get the battle page and select the first location infobox link, finding the `href` attribute within the link if there is a location (if not, raise an error that should trigger the except part of the statement). If anything fails, return a dict that has NAs for everything but the battle link.\n5. Use a try/except statement to get the location page (after sleeping for 1 sec). Look for a `.geo-dms` node and get its children. If there are exactly two children (lat/long), then extract the coords from the text of the element. Otherwise, raise an exception and return a dict with the battle and location link, but with NA values for latitude and longitude.\n6. If everything works, then return a dict with all of the relevant information.\n7. Call the function for every link in the rev_war_battles object, and then convert the result (a list of dicts) into a DataFrame. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nrev_war_battles_full = rev_war_battles.join(battle_locations.loc[:,[\"latitude\", \"longitude\", \"location_link\"]])\n```\n:::\n\n\n\n\nWe can use the `.join` method because both DataFrames have the same index; thus, we don't have to do a merge operation like we did in R. \n\n:::\n<!-- End panel tabset -->\n\nA spatial package could be used to transform the latitude and longitude into numerical values for plotting, but we will stop here, as this example has demonstrated the utility of using custom functions to extract components of a webpage without cataloging all of the information. \n\n::::\n<!-- End Demo -->\n\n## Scraping Dynamic Webpages\n\nMany modern webpages load page content dynamically using JavaScript. \nThis can have some advantages - for instance, the page loads quickly, and as you scroll, additional content is added, saving the cost of transferring additional data if you decide not to read the full page. \nHowever, it's very annoying when your goal is to scrape content from the page, because tools like `rvest` and `BeautifulSoup` only get the initial HTML, not the HTML after JavaScript has modified the page. \n\nSometimes, there are clever ways around this problem - you may be able to submit a second request to the page and get a response with the content you want. \nBut more often, the best solution is just to emulate a browser and read the dynamic content out of the browser once JavaScript has changed the page. \n\n::: demo\n\n#### Demo: Roller Derby Skater Names {-}\n\n\n[Roller Derby](https://en.wikipedia.org/wiki/Roller_derby) is a team sport played on a roller skating rink, and most leagues seem to be female-dominated.\nThe Junior Roller Derby Association (JRDA) web page contains a [list of US leagues](\nhttps://www.juniorrollerderby.org/us-leagues), and each league contains a list of registered organizations. Organizations can have multiple teams that are either open (anyone can join) or female-only, and each team has a [roster](https://www.juniorrollerderby.org/renegades) on the organization page. \nSuppose that our goal is to examine the names that players register with (examples: \"Hitty Stardust\", \"Collide-a-scope\", \"Malice in Wonderland\", \"The Curly Dervish\", \"Rainbow Bite\") that are often puns with slight hints of violence, gendered humor, or personal characteristics. \nIn addition to players, we want to keep the league, organization, team, and team type (open/female-only). \n\nIn order to scrape this data, we have to consider multiple levels because of the hierarchical nature of both the website and the organization. \nIn these cases, it is often useful to write separate functions which scrape each level of the hierarchy, and then write different functions to clean different components of the data.\nThis provides modularity, but it also keeps your code from getting too long and complex for you to keep track of how each job is getting done. \n\n::: {layout-ncol=2}\n![Roller Derby leagues - 5 tabs, and each tab has a list of organizations. Organization \"blocks\" of information are contained in divs that have class `textBlockElement` -- hopefully, that's enough of a selector to get the information.](../images/advanced/roller-derby-league-html-screenshot.png){fig-alt='The left side of the image shows a map of the United States divided by regions, each in distinct colors. Below the map is the text \"US Leagues Registered for the 2024 - 2025 Season.\" A menu appears with options like \"NORTHWEST,\" \"SOUTHWEST,\" \"MIDWEST,\" \"NORTHEAST,\" and \"SOUTHEAST.\" The tab labeled \"NORTHWEST\" is selected. The right side of the image displays a web browser\\'s developer tools window. The HTML code is visible, highlighting a section related to tab content with a class of \"selected\".' .lightbox}\n\n![Roller Derby organizations are specified within the tab content div. There are several divs, only one of which is displayed (the others correspond to tabs which aren't selected). Organization \"blocks\" of information are contained in divs that have class `textBlockElement` -- hopefully, that's enough of a selector to get the information.](../images/advanced/roller-derby-team-html-screenshot.png){fig-alt='The image is a screenshot of a webpage and its corresponding HTML/CSS code displayed in a developer tools panel. The left side of the image shows a webpage listing US roller derby leagues registered for the 2024-2025 season. The page has a white background with blue and purple accents. Section headers divide leagues into \"National\" and \"Recreational\" categories. Logos of different roller derby teams are displayed along with their names and locations. Notable logos include the 509 Junior Roller Derby and Pikes Peak Junior Roller Derby. The right side is the developer tools interface, displaying HTML code and CSS rules corresponding to the webpage. Selected elements are highlighted, showing details such as class names and style properties.' .lightbox}\n\n:::\n\nWhat's interesting is that the first time you click on a new tab, you see it \"fill\" with data. \nThat is, the data isn't present when the page is loaded. \nThis page is a dynamic webpage -- it is loading the data with scripts, and thus has to be treated more carefully. \n\nWe can do this in one of two ways\n\n1. Mirror the entire site using a command-line tool like `wget`, and then trawl through the downloaded information to see if there's a spreadsheet, table, CSV, or a bunch of HTML files that have the data present. \n2. Launch a remote-controlled browser, click on things using commands, and then read the HTML after the script has run. \n\nThe first approach is usually faster, though many sites will block `wget` using `robots.txt`^[Technically, there is a flag for `wget` to ignore the robots rules, but it's probably better to use an approach that doesn't break the implicit rules set by the server.]. \n\nThe second approach tends to be more successful assuming you can get the infrastructure set up and configured (this has gotten much easier recently, at least in R), and has the bonus effect of making you feel like a very powerful programmer (or mad scientist) as you sit back and watch your computer navigate the web according to your instructions, if you decide to launch the browser window to see the magic happen. \n\nYou will need to install the `chromote` package in R and the `selenium` package in python. \n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(chromote) # <1>\n\nlibrary(xml2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(stringr)\n\nurl <- \"https://www.juniorrollerderby.org/us-leagues\"\n\nrmt <- read_html_live(url) # <2> \nrmt$click(\".pageElement .contentTabs li:first-child\") # <3> \nrmt$click(\".pageElement .contentTabs li:nth-child(2)\") # <3> \nrmt$click(\".pageElement .contentTabs li:nth-child(3)\") # <3> \nrmt$click(\".pageElement .contentTabs li:nth-child(4)\") # <3> \nrmt$click(\".pageElement .contentTabs li:last-child\") # <3> \n\n# rmt$view() # <4>\n\nteams <- rmt |> # <5>\n  html_elements(\".tabContainer .pageEl .textBlockElement\") # <5>\n\nis_team_node <- map_int(teams, ~length(xml_find_first(., \"div\"))) > 0\nteams <- teams[is_team_node]\n\nrmt$close() # <6>\n```\n:::\n\n\n\n1. The `chromote` package allows you to remote control a browser, though by default it will be **headless** - that is, you won't be able to see it. \n2. `rvest` includes a `read_html_live()` function that implicitly sets up a `chromote` session. the `rmt` object here is the browser -- you can interact with it using a bunch of different methods, usually called with `$<function>`. `rmt` is a special type of object called a class, and works very similarly to many python objects, except that instead of using `.`. to access the class methods, you will use `$`. \n3. We remotely click on each of the 5 regional tabs in order to load all of the content for each region\n4. This line is commented out because it doesn't work when the book is compiled, but it will work interactively if you uncomment it -- it allows you to see the browser that you're remote controlling. \n5. You can interact with `rmt` using other `rvest` functions just like you would when using `read_html`, looking for elements and extracting content. \n6. It's good practice to close the session when you're done with it rather than leaving it open. This saves computer memory, but also doesn't keep a connection to the remote server alive, which is polite. \n\nOnce we've extracted the content from the main page, we won't necessarily need anything else read \"live\" - it depends on how the content on the team pages is loaded. \nOur next task is to write a function to extract the info from the main page.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_team_summary <- function(node) {\n  team_img <- html_node(node, \".leftTextImage img\") |> html_attr(\"src\")\n  team_link <- html_node(node, \".text p:nth-child(2) a\") |> html_attr(\"href\")\n  team_name <- html_node(node, \".text p:nth-child(2) a\") |> html_text()\n  team_location <- html_node(node, \".text p:nth-child(3)\") |> html_text()\n  \n  tibble(name = team_name, link = team_link, img = team_img, location = team_location)\n}\n\nteam_df <- map(teams, get_team_summary) |> bind_rows()\n## Error in `map()` at rlang/R/dots.R:91:3:\n## ℹ In index: 1.\n## Caused by error in `xml_find_first.xml_node()`:\n## ! external pointer is not valid\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom io import StringIO\nfrom bs4 import BeautifulSoup,SoupStrainer\nfrom selenium import webdriver\nfrom selenium.webdriver import FirefoxOptions\nfrom selenium.webdriver.common.by import By\nimport time # to ensure page loads before we get source\noptions = FirefoxOptions()                                                               # <1>\noptions.add_argument(\"-headless\")                                                        # <1>\nbrowser = webdriver.Firefox(options = options)                                           # <1>\n\nbrowser.get(\"https://www.juniorrollerderby.org/us-leagues\")                              # <2>\ntime.sleep(2)                                                                            # <2>\n\ntab = browser.find_element(By.CSS_SELECTOR, \".pageElement .contentTabs li:first-child\")  # <3> \ntab.click()                                                                              # <3> \ntab = browser.find_element(By.CSS_SELECTOR, \".pageElement .contentTabs li:nth-child(2)\") # <3> \ntab.click()                                                                              # <3> \ntab = browser.find_element(By.CSS_SELECTOR, \".pageElement .contentTabs li:nth-child(3)\") # <3> \ntab.click()                                                                              # <3> \ntab = browser.find_element(By.CSS_SELECTOR, \".pageElement .contentTabs li:nth-child(4)\") # <3> \ntab.click()                                                                              # <3> \ntab = browser.find_element(By.CSS_SELECTOR, \".pageElement .contentTabs li:last-child\")   # <3> \ntab.click()                                                                              # <3> \n\nsoup = BeautifulSoup(StringIO(browser.page_source))                                      # <4>\n\nbrowser.close()                                                                          # <5>\n\nteams = soup.select(\".tabContainer .pageEl .textBlockElement\")                           # <6>\nteams = [i for i in teams if len(i.find_all('div')) > 0]                                 # <7>\n```\n:::\n\n\n\n1. Open a Firefox window (you could also use `webdriver.Chrome()` to get Chrome/Chromium if you prefer). The  options() statements ensure this driver is \"headless\" - that is, it doesn't actually pop open a window (this allows it to run on a server without a graphical display, like the one that builds the book automatically). You can just replace all three lines with `browser = webdriver.Firefox()` if you want to see the website. \n2. Open the target URL and sleep 2 seconds to let the page load\n3. Find each tab and click on it. \n4. Get the HTML code from the browser after JavaScript has had fun with it (`browser.page_source`), and tell BeautifulSoup it's HTML in string form rather than a request format (`StringIO`). \n5. Close the browser - we don't need it now that we've gotten the HTML.\n6. Select the team div nodes (this selector will include some headings, like \"National\" and \"Regional\")\n7. Remove the extra headings that don't have div children. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef get_team_summary(node):\n  list(list(node.children)[1].children)[1].attrs['src']\n```\n:::\n\n\n\n\n:::\n\n::: column-margin\n\nThere are a LOT of steps when you're cleaning data from the internet. \nIt can be very easy to get overwhelmed. \nI find it's helpful to look at the data as it exists on the web first, and imagine what form you'd like the data to be in at the end. \nThen, sketching out the transformations step by step, as in @fig-roller-derby-cleaning-sketch can help with maintaining focus on one job at a time without getting overwhelmed. \n\n:::\n\nNext, we need to figure out how to get the team roster information from the individual team pages. \nA look at the HTML for the [Renegades team](https://www.juniorrollerderby.org/renegades) shows this interesting node:\n\n\n\n\n::: {.cell}\n\n```{.html .cell-code}\n<iframe src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSZPNZu2hhBDjnxWH58quhER6anponm1YCl512tHLTcURYUDzCXWqT7sNy7S_wcDKy8Wnoj4VNaAYyh/pubhtml?gid=1152027622&amp;single=true&amp;widget=false&amp;headers=false&amp;chrome=false&amp;range=a1:i25\" width=\"100%\" height=\"600\"></iframe>\n```\n:::\n\n\n\n\nAn `iframe` allows you to include another web page inside the current webpage. \nIn this case, we can see that this iframe is showing us a google sheet, rendered as a table. \nIn theory, we could use the `googlesheets4` package to read in the sheet, but `html_table` should work just as well. \n\nIt can be helpful to know a bit about how URLs are constructed in order to simplify this URL a bit. \nAdditional key-value information is often added to the end of a URL, separated from the main part of the URL by a `?`. \nSo, all of the information after the question mark in the iframe `src` attribute is not necessary for our purposes. \n\n\n::: panel-tabset\n\n##### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayers <- read_html(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSZPNZu2hhBDjnxWH58quhER6anponm1YCl512tHLTcURYUDzCXWqT7sNy7S_wcDKy8Wnoj4VNaAYyh/pubhtml\") |>\nhtml_table()\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(players)\n## [1] 64\nplayers[[2]]\n## # A tibble: 48 × 9\n##       `` ``       `` ``                            ``    ``    ``    ``    ``   \n##    <int> <lgl> <int> <chr>                         <chr> <chr> <lgl> <chr> <chr>\n##  1     1 NA       NA \"\"                            \"\"    \"\"    NA    \"\"    \"\"   \n##  2     2 NA       NA \"CURRENT ACTIVE CHARTER ROST… \"CUR… \"CUR… NA    \"LEA… \"Ad …\n##  3     3 NA       NA \"CURRENT ACTIVE CHARTER ROST… \"CUR… \"CUR… NA    \"TEA… \"Ad …\n##  4     4 NA       NA \"Skater Number\"               \"Ska… \"Act… NA    \"DIV… \"FEM…\n##  5     5 NA        1 \"011\"                         \"Wic… \"4/1… NA    \"\"    \"\"   \n##  6     6 NA        2 \"02\"                          \"Ken… \"4/1… NA    \"UNI… \"WHI…\n##  7     7 NA        3 \"09\"                          \"Sas… \"4/1… NA    \"\"    \"BLU…\n##  8     8 NA        4 \"092\"                         \"Poc… \"4/1… NA    \"\"    \"\"   \n##  9     9 NA        5 \"101\"                         \"Slu… \"4/1… NA    \"COA… \"COA…\n## 10    10 NA        6 \"112\"                         \"Gna… \"4/1… NA    \"Leg… \"Der…\n## # ℹ 38 more rows\n```\n:::\n\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplayers = pd.read_html(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSZPNZu2hhBDjnxWH58quhER6anponm1YCl512tHLTcURYUDzCXWqT7sNy7S_wcDKy8Wnoj4VNaAYyh/pubhtml\")\n## ValueError: No tables found\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlen(players)\n## 64\nplayers[1]\n##     Unnamed: 0  ...                    Unnamed: 8\n## 0            1  ...                           NaN\n## 1            2  ...  Ad Astra Junior Roller Derby\n## 2            3  ...                  Ad Astra (F)\n## 3            4  ...                        FEMALE\n## 4            5  ...                           NaN\n## 5            6  ...                         WHITE\n## 6            7  ...                          BLUE\n## 7            8  ...                           NaN\n## 8            9  ...                COACHING STAFF\n## 9           10  ...                    Derby Name\n## 10          11  ...                           NaN\n## 11          12  ...                           NaN\n## 12          13  ...                           NaN\n## 13          14  ...                           NaN\n## 14          15  ...                           NaN\n## 15          16  ...                           NaN\n## 16          17  ...                           NaN\n## 17          18  ...                           NaN\n## 18          19  ...                           NaN\n## 19          20  ...                           NaN\n## 20          21  ...                           NaN\n## 21          22  ...                           NaN\n## 22          23  ...                           NaN\n## 23          24  ...                           NaN\n## 24          25  ...                           NaN\n## 25          26  ...  Ad Astra Junior Roller Derby\n## 26          27  ...                  Ad Astra (O)\n## 27          28  ...                          OPEN\n## 28          29  ...                           NaN\n## 29          30  ...                         WHITE\n## 30          31  ...                          BLUE\n## 31          32  ...                           NaN\n## 32          33  ...                           NaN\n## 33          34  ...                           NaN\n## 34          35  ...                           NaN\n## 35          36  ...                           NaN\n## 36          37  ...                           NaN\n## 37          38  ...                           NaN\n## 38          39  ...                           NaN\n## 39          40  ...                           NaN\n## 40          41  ...                           NaN\n## 41          42  ...                           NaN\n## 42          43  ...                           NaN\n## 43          44  ...                           NaN\n## 44          45  ...                           NaN\n## 45          46  ...                           NaN\n## 46          47  ...                           NaN\n## 47          48  ...                           NaN\n## \n## [48 rows x 9 columns]\n```\n:::\n\n\n\n\n:::\n\nInteresting - we can get all of the player names for all teams from the single sheet!\nSome organizations have multiple teams, but they all use the same basic structure for data - there are 23 rows of structured information, and there are blank lines at the top and bottom of each team. \n\nSo, to clean this up, we have to (roughly):\n\n1. Identify rows that are either primarily blank or primarily NA\n2. Remove any empty columns that aren't particularly needed\n3. Find \"runs\" of the same value indicating that a row is empty-ish\n4. Compute start/end of run sequences, assuming that the run is longer than 1 value\n5. Get only data frame rows corresponding to the run, separating the organization tables into separate teams. \n\nNote that for organizations with multiple teams, there are usually only one set of coaches, so by separating this information out we (somewhat) lose the ability to keep coach information with the team.\nOn the other hand, coaches weren't on our list of critical information. \n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_team_df <- function(df) {\n  is_emptyish <- rowSums(is.na(df) | df == \"\") > 4 # <1>\n  \n  emptycols <- which(colSums(is.na(df))==nrow(df)) # <2>\n  df2 <- df[,-emptycols] # <2>\n  \n  run_stats <- rle(is_emptyish) # <3>\n  run_stats$end <- cumsum(run_stats$lengths) # <4> \n  run_stats$start <- c(1, lag(run_stats$end)[-1] + 1) # <4> \n  team_dfs <- tibble(start = run_stats$start, end = run_stats$end, value = run_stats$values) |> # <4> \n    filter(!value) |> # <4> \n    mutate(data = map2(start, end, ~df2[.x:.y,])) # <5> \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_data <- map(players, split_team_df) |> \n  bind_rows() |>\n  mutate(nrow = end-start) |>\n  filter(nrow > 15) |>\n  magrittr::extract2(\"data\")\n\nteam_data[[1]]\n## # A tibble: 19 × 7\n##       ``    `` ``                            ``                ``    ``    ``   \n##    <int> <int> <chr>                         <chr>             <chr> <chr> <chr>\n##  1     2    NA CURRENT ACTIVE CHARTER ROSTER CURRENT ACTIVE C… CURR… \"LEA… \"509…\n##  2     3    NA CURRENT ACTIVE CHARTER ROSTER CURRENT ACTIVE C… CURR… \"TEA… \"The…\n##  3     4    NA Skater Number                 Skater Name       Acti… \"DIV… \"OPE…\n##  4     5     1 03                            Rumble Guppy      1/14… \"\"    \"\"   \n##  5     6     2 10                            Ruby Roundhouse   1/10… \"UNI… \"WHI…\n##  6     7     3 106                           Ferdinand         1/13… \"\"    \"BLA…\n##  7     8     4 187                           Belle of the Bra… 1/10… \"\"    \"\"   \n##  8     9     5 22                            Badadytude        1/10… \"COA… \"COA…\n##  9    10     6 236                           Hell-no Kitty     1/13… \"Leg… \"Der…\n## 10    11     7 247                           Snot Rocket       1/13… \"Abb… \"\"   \n## 11    12     8 3                             Chicken Nugget    PEND… \"Vir… \"Cle…\n## 12    13     9 312                           Slimy Booger      1/14… \"\"    \"\"   \n## 13    14    10 34                            The Postman       1/10… \"\"    \"\"   \n## 14    15    11 404                           Fatal Error       1/10… \"\"    \"\"   \n## 15    16    12 68                            Graycon The Dest… 1/10… \"\"    \"\"   \n## 16    17    13 710                           Boo Boo           1/10… \"\"    \"\"   \n## 17    18    14 77                            Hurricane         1/10… \"\"    \"\"   \n## 18    19    15 82                            Blackout          1/10… \"\"    \"\"   \n## 19    20    16 911                           Chaos             1/18… \"\"    \"\"\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\ndef split_team_df(df):\n  is_emptyish = pd.isna(df).sum(axis = 1) > 4\n  fullcols = pd.isna(df).sum(axis = 0)!=df.shape[0]\n  \n  # https://stackoverflow.com/questions/66633109/aggregating-row-repeats-in-pandas-run-lengths\n  run_vals = (is_emptyish != is_emptyish.shift()).cumsum()\n  run_vals_tab = run_vals.value_counts()\n  \n  run_vals_full_idx = run_vals[~is_emptyish].value_counts().index\n  run_vals_idx = run_vals_tab.index[run_vals_tab!=1]\n  data_idx = np.intersect1d(run_vals_full_idx.values, run_vals_idx.values)\n  return [df.loc[run_vals==i, fullcols] for i in data_idx]\n\nfrom itertools import chain\n# https://stackoverflow.com/questions/11860476/how-to-unnest-a-nested-list\nteam_data = [split_team_df(i) for i in players]\nteam_data = list(chain(*team_data))\n\nteam_data[0]\n##     Unnamed: 0  Unnamed: 2  ...        Unnamed: 7               Unnamed: 8\n## 1            2         NaN  ...       LEAGUE NAME  509 Junior Roller Derby\n## 2            3         NaN  ...         TEAM NAME      The Killer Bees (O)\n## 3            4         NaN  ...          DIVISION                     OPEN\n## 4            5         1.0  ...               NaN                      NaN\n## 5            6         2.0  ...    UNIFORM COLORS                    WHITE\n## 6            7         3.0  ...               NaN                    BLACK\n## 7            8         4.0  ...               NaN                      NaN\n## 8            9         5.0  ...    COACHING STAFF           COACHING STAFF\n## 9           10         6.0  ...        Legal Name               Derby Name\n## 10          11         7.0  ...      Abby Damerow                      NaN\n## 11          12         8.0  ...  Virginia Thommes             Clean Willie\n## 12          13         9.0  ...               NaN                      NaN\n## 13          14        10.0  ...               NaN                      NaN\n## 14          15        11.0  ...               NaN                      NaN\n## 15          16        12.0  ...               NaN                      NaN\n## 16          17        13.0  ...               NaN                      NaN\n## 17          18        14.0  ...               NaN                      NaN\n## 18          19        15.0  ...               NaN                      NaN\n## 19          20        16.0  ...               NaN                      NaN\n## \n## [19 rows x 7 columns]\n```\n:::\n\n\n\n\n:::\n\nThen, we need to write another set of functions to clean up the multiple tables in the spreadsheet so that they're actually tidy data instead of a set of tables that are laid out in a format that is definitely not tidy. \nIn this case, it seemed easier to handle the player data and then the team data with separate functions, then combine that information. \n\n![Sketch of which components of the spreadsheet need to go where.](../images/advanced/roller-derby-cleaning-sketch.svg){#fig-roller-derby-cleaning-sketch fig-alt='The image depicts a spreadsheet for a roller derby team roster, titled \"CURRENT ACTIVE CHARTER ROSTER.\" The spreadsheet is segmented into different sections with a color-coded design. On the left, a blue-bordered table lists \"Skater Number,\" \"Skater Name,\" and \"Active Date\" for several players. To the right, the sections for \"LEAGUE NAME, TEAM NAME, DIVISION\" and \"UNIFORM COLORS\" are outlined in red and orange, respectively. The league is the \"FoCo Junior Roller Derby,\" the team name is the Spartans, and they compete in the open division, with uniform colors as \"BLACK WHITE BLUE.\" Below, a chart titled \"COACHING STAFF\" in grey features legal names and corresponding derby names. A red arrow connects the League, Team, and Division information to corresponding columns in the \"clean\" data representation. An orange arrow connects the uniform colors to a paste(..., collapse = \",\") statement, and then to the colors column in the \"clean\" data table. The player roster is connected to the final column in the \"clean\" data table with a blue arrow.'}\n\n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_players <- function(sub_df) {\n  # Identify row where player table starts\n  header_row <- which(sub_df[,1] == \"Skater Number\") # <1>\n  \n  if (length(header_row) == 0) return(NA)\n  \n  # Get player info\n  player_info <- sub_df[(header_row+1):(header_row+21),] |>\n    set_names(c(\"Skater_Number\", \"Skater_Name\", \"Skater_Active_Date\")) |>\n    na.omit()\n  \n  player_info\n}\n\nget_team_info <- function(sub_df) {\n  leagueidx <- sub_df[,1] == \"LEAGUE NAME\"\n  league <- if_else(length(leagueidx) == 0, NA, unlist(sub_df[leagueidx,2]))\n  \n  teamidx <- sub_df[,1] == \"TEAM NAME\"\n  team <- if_else(length(teamidx) == 0, NA, unlist(sub_df[teamidx,2]))\n  \n  divisionidx <- sub_df[,1] == \"DIVISION\"\n  division <- if_else(length(divisionidx) == 0, NA, unlist(sub_df[divisionidx,2]))\n  \n  coloridx <- which(sub_df[,1] == \"UNIFORM COLORS\")\n  if (length(coloridx) > 0) {\n    colors <- sub_df[coloridx:(coloridx+1),1:2] |>\n      unlist()\n    colors <- colors[colors != \"UNIFORM COLORS\"]\n    colors <- colors[colors != \"\"]\n    colors <- paste(na.omit(colors), collapse = \",\")\n  } else {\n    colors <- NA\n  }\n  \n  tibble(league = league, team = team, division = division, colors = colors)\n}\n\nclean_team_df <- function(df) {\n  if(nrow(df) <= 10) {\n    warning(\"Insufficient number of rows, returning NULL\")\n    return(NULL)\n  }\n  if(sum(df == \"\", na.rm = T) > 50) {\n    warning(\"Insufficient number of rows, returning NULL\")\n    return(NULL)\n  }\n  \n  players <- get_players(df[,3:5])\n  \n  team_info <- get_team_info(df[,6:7]) |>\n    mutate(players = list(players))\n  return(team_info)\n}\n```\n:::\n\n\n\n\nAfter all of that, we're finally ready to use our cleaning functions!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_data_clean <- map(team_data, clean_team_df) |> \n  bind_rows()\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom warnings import warn\n\ndef get_players(sub_df):\n  sub_df = sub_df.reset_index().drop(\"index\", axis = 1)\n  x = sub_df.iloc[:,0]==\"Skater Number\"\n  header_row = x.index[x][0]\n  \n  if pd.isnull(header_row):\n    return pd.NA\n  \n  stopidx = min(header_row+21, sub_df.shape[0])\n  playerdf = sub_df.iloc[(header_row+1):(stopidx+1),:].reset_index().drop(\"index\", axis = 1)\n  playerdf.columns = [\"skater_number\", \"skater_name\", \"skater_active_date\"]\n  return {\"players\": playerdf.dropna()}\n\ndef get_if_exists(idx, sub_df_col, replace=pd.NA):\n  header_row = idx.index[idx][0]\n  if not pd.isnull(header_row):\n    return sub_df_col[header_row]\n  return replace\n\ndef get_team_info(sub_df):\n  league = get_if_exists(sub_df.iloc[:,0]==\"LEAGUE NAME\", sub_df.iloc[:,1])\n  team = get_if_exists(sub_df.iloc[:,0]==\"TEAM NAME\", sub_df.iloc[:,1])\n  division = get_if_exists(sub_df.iloc[:,0]==\"DIVISION\", sub_df.iloc[:,1])\n  \n  return {\"league\": league, \"team\": team, \"division\": division}\n\ndef clean_team_df(df):\n  if (df.shape[0] < 8):\n    warn(\"fewer than 8 rows in data frame, skipping\")\n    return {}\n  players = get_players(df.iloc[:,2:5])\n  team_info = get_team_info(df.iloc[:,5:7])\n  team_info = [team_info | players]\n  return team_info\n\n\nteam_data_clean = [clean_team_df(i) for i in team_data] \nlen(team_data_clean)\n## 99\nteam_data_clean[0]\n## [{'league': '509 Junior Roller Derby', 'team': 'The Killer Bees (O)', 'division': 'OPEN', 'players':    skater_number            skater_name skater_active_date\n## 0             03           Rumble Guppy            1/14/25\n## 1             10        Ruby Roundhouse            1/10/25\n## 2            106              Ferdinand            1/13/25\n## 3            187     Belle of the Brawl            1/10/25\n## 4             22             Badadytude            1/10/25\n## 5            236          Hell-no Kitty            1/13/25\n## 6            247            Snot Rocket            1/13/25\n## 7              3         Chicken Nugget            PENDING\n## 8            312           Slimy Booger            1/14/25\n## 9             34            The Postman            1/10/25\n## 10           404            Fatal Error            1/10/25\n## 11            68  Graycon The Destroyer            1/10/25\n## 12           710                Boo Boo            1/10/25\n## 13            77              Hurricane            1/10/25\n## 14            82               Blackout            1/10/25\n## 15           911                  Chaos            1/18/25}]\n```\n:::\n\n\n\n\n:::\n\nLet's see if there are any common skater names, after all of that hard work.\n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_data_clean |>\n  unnest(players) |>\n  group_by(Skater_Name) |>\n  count() |>\n  arrange(desc(n)) |>\n  head(10)\n## # A tibble: 10 × 2\n## # Groups:   Skater_Name [10]\n##    Skater_Name          n\n##    <chr>            <int>\n##  1 Cherry Bomb         13\n##  2 Killer Queen         6\n##  3 Lunatic              6\n##  4 Stitches             6\n##  5 Ghost                5\n##  6 Jawbreaker           5\n##  7 Sugar Rush           5\n##  8 Frightening Bolt     4\n##  9 Gnarly Quinn         4\n## 10 Hurricane            4\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplayer_names = pd.concat([i[0]['players'] for i in team_data_clean if len(i) > 0])\nplayer_names.skater_name.value_counts()[0:10]\n## skater_name\n## Cherry Bomb     13\n## Stitches         6\n## Lunatic          6\n## Killer Queen     6\n## Sugar Rush       5\n## Firecracker      5\n## Jawbreaker       5\n## Ghost            5\n## Hurricane        4\n## Gnarly Quinn     4\n## Name: count, dtype: int64\n```\n:::\n\n\n\n\n:::\n\n\n:::\n\n\n## References {#sec-webscraping-refs}\n",
    "supporting": [
      "03-web-scraping_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.34.0/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.2/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.2/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}