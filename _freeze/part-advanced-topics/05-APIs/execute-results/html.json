{
  "hash": "4b889a25da4ac4d37d7322121414708b",
  "result": {
    "engine": "knitr",
    "markdown": "# Application Programming Interfaces {#sec-data-apis}\n\n<!-- https://mixedanalytics.com/blog/list-actually-free-open-no-auth-needed-apis/ -->\n\n<!-- Outline generated with copilot https://copilot.microsoft.com/shares/kXaxscoAnsYpny7LPrAC5 just to test out how useful it is for organizing content. I mostly used the outline and deviated significantly from the 'draft' it wrote -- which I mostly requested so that I could see exactly what scope it thought was appropriate (for kicks). -->\n\n## Objectives\n\n- Understand what APIs are and how to interface with them\n- Connect to RESTful APIs with and without authentication\n- Retrieve and parse data from API queries\n- Handle common API challenges (pagination, rate limits, errors)\n\n## Introduction to APIs\n\nAn **API** is an application programming interface. \nAPIs are designed to let different software and databases communicate with each other. \nStatisicians and data scientists often need to access APIs to acquire data from an external source.\nIn the past, I've used APIs to get weather data, information about adoptable pets in my area, CRAN package statistics, and wikipedia entry edits, but other people might use them to get data on financial market performance, social media posts, and more.\n\n### RESTful APIs\n\nMost APIs are RESTful -- they use the REST architecture (REST stands for Representational State Transfer) [@guptaWhatREST2025]. \n\n::: {.advanced collapse=true}\n### Six guiding principles of RESTful architecture {-}\n\n\n- Uniform interface. \n    - The interface uniquely identifies each resource involved in the interaction between the client (you) and the server (the data).\n    - The server provides a uniform representation of the data that the client can use to modify the resource state.\n    - Each resource representation should have enough information to describe itself and additional actions that are available.\n    - The client should have only the initial URI of the application, and should dynamically interact with the server through the use of hyperlinks.\n    \n- Client-Server. This enforces a separation of concerns so that the user interface (client-side) is separate from the server interface (data storage, platform, dependencies). \n\n- Statelessness. Each request from client to server contains all information necessary to understand and complete the request. That is, the server cannot use previously stored information to complete a request. The client application must maintain the entire session state.\n\n- Cacheable. A response should (implicitly or explicitly) label itself as cacheable or non-cacheable. If cacheable, the client can reuse the response data for equivalent requests (within a certain time period). \n\n- Layered system. The architecture is hierarchical, and each component cannot \"see\" beyond the immediate layer it is interacting with. \n\n- Code on demand (optional). This allows client functionality to be extended by downloading and executing code.\n\n:::\n\nREST abstracts information into a **resource**, which can change state over time. \nAt any given time, the resource state is the **resource representation** and consists of the data, metadata about the data, and the links that help a client transition to another state. \n\n::: callout-info\n### URI Anatomy\n\nA REST API consists of interlinked resources, known as the **resource model**.\n\nThink about a set of tables in a database, where the tables are linked. \nA REST API is a set of syntax that allows you to access the table data using a consistent set of addresses that are called **Resource URIs** \n\nA **URI** (Universal Resource Identifier) is the more updated term for a URL (Universal Resource Locator). Any URI that starts with https:// or ftp:// or mailto:// is a URL -- that is, all URLs are also URIs. ^[These terms are often mixed up and this has been an issue since at least 2003 [@zimmermanURIVsURL2020].]\n\n\nThere are several components of an URI:\n\n- the **scheme** - the part before the colon, such as https, ftp, or mailto\n- the **authority** or **endpoint** - the server address, along with optional user information and port information [userinfo@]host[port].    \nFor instance, RStudio's web server is hosted by default on port 8787, so if the web host is `host.com`, we'd access the RStudio server by `host.com:8787`. By default, port 80 is used for HTTP traffic, and most web servers will map ports to different folders.\n- the **path** - after the server address, there may be some /folder/ paths after the address.     \nSome of these paths may be more friendly ways to access different services hosted on different ports - for instance, I map :8787 to /rstudio on my web server. \n- the **query** or **parameter string** - after the path, there may be a string with `?...`. Often, this will have `key=value` pairs separated by `&`. \n- the **fragment** `#...` that links to a specific part of the page\n\nURIs cannot accommodate certain characters, such as spaces -- these must be [encoded using ASCII values](https://www.w3schools.com/tags//ref_urlencode.asp) [@w3schoolsHTMLURLEncoding2025].\n`%20` is the equivalent for a space, which is why you will often see it in URLs. Not all values in the linked ASCII table need to be encoded -- this usually applies to certain special characters like `/`, `-`, ` `, `(`, and `)`.\n\n:::\n\nWhile most RESTful applications use HTTP methods and an API built around what look like web addresses, this is not required. \n\n### HTTP Methods\n\nThere are several HTTP methods which are commonly used to interact with APIs [@mozilladocumentationnetworkHTTPRequestMethods2025]:\n\n- GET - requests the representation of a resource. These requests should only retrieve data and should not contain a request content. Your web browser submits a GET request every time you type an address in the address bar.\n\n- POST - submits an entity to a resource. This may cause a change in state or side effects on the server. For instance, submitting a web form may create a POST request that uploads your data to the server and updates a database. \n\n- PUT - this method replaces all representations of the target resource with the request content. This updates existing data (that is, be careful!)\n\n- DELETE - this method removes all of the target resource data. \n\n\nHTTP requests have a request header and a request body. \n\n### HTTP Response Codes\n\nHTTP requests will return a response code. \n\nI prefer the very general summary [@AllHTTPStatus2023]: \n\n> 1xx Here's what I'll do.    \n> 2xx Here's what you want.    \n> 3xx I don't have what you want but I know who does.    \n> 4xx It didn't work but it's your fault.    \n> 5xx It didn't work and it's my fault.    \n\n\nYou can find a full list [here](https://www.coderstool.com/http-response-codes). \nYou're probably familiar with a 404 error, which is \"File not found\" -- that is, you passed in an address that isn't valid. \n\n::: column-margin\nJulia Evans [@evansQuestionsHTTPStatus2020] has some lovely Q&A flashcards on HTTP codes, and there is a cartoon-style [zine](https://wizardzines.com/zines/http/) for sale that is also very nice.  \n:::\n\n## Accessing APIs without Authentication\n\n:::: demo\n\n#### Demo: CURL and HTTP Requests {-}\n\nLet's try this out using `curl`, which is a command-line tool for URI manipulation and transfers. \nWe'll send a request to an API that takes a person's name as a parameter and returns information about the likely gender of that person. [Explore the API documentation](https://genderize.io/documentation).\n\nI've told curl to be verbose (to show us everything). \n\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncurl -v https://api.genderize.io?name=Terry > ../data/genderize-api-response.txt 2> ../data/genderize-api-curl-output.txt\n```\n:::\n\n\n\n\nThe first `>` redirects the response/output to `genderize-api-response.txt`; `2>` redirects the messages/errors/warnings to `genderize-api-curl-output.txt`. \nThis allows us to examine the [response](../data/genderize-api-response.txt) and the [output](../data/genderize-api-curl-output.txt) separately. \n\n\nThe first few lines of the output (1-42) are what's required to make a connection using SSL (essentially, when you use https:// instead of http://, you add an extra security layer where the protocol verifies that the server is certified to be what it claims to be). \n\nThen, there's a GET request: \n```\n* Connected to api.genderize.io (165.227.126.8) port 443\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://api.genderize.io/?name=Terry\n* [HTTP/2] [1] [:method: GET]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: api.genderize.io]\n* [HTTP/2] [1] [:path: /?name=Terry]\n* [HTTP/2] [1] [user-agent: curl/8.11.0]\n* [HTTP/2] [1] [accept: */*]\n} [5 bytes data]\n> GET /?name=Terry HTTP/2\n> Host: api.genderize.io\n> User-Agent: curl/8.11.0\n> Accept: */*\n> \n{ [5 bytes data]\n* Request completely sent off\n{ [5 bytes data]\n```\n\nThis splits the URI up into a `Host` (api.genderize.io) and a `query string` (/?name=Terry) containing `parameter(s)` (name) and `value(s)` (Terry) with an associated protocol (HTTP/2). \nCurl identifies itself as having the `user-agent` curl/8.11.0, and provides some idea of what responses it's looking for - in this case, `*/*`, which is internet for \"anything\". \nAt this point, we're not picky, and in any case, most sites have a default or use JSON exclusively.\n\nThe output also contains a set of header information that is easier for us to read when it is formatted as a list. \nRemember, HTTP responses have a header and a body -- this is a formatted version of the header of the server response. \n\n- http/2 200 (response code)\n- server: nginx/1.16.1 (web server software version)\n- date (varies)\n- content-type: application/json; charset=utf-8 (expect a JSON file with encoding UTF-8)\n- content-length: 65 (how many characters the content is)\n- vary: accept-encoding\n- cache-control: max-age=0, private, must-revalidate\n- x-request-id (varies)\n- access-control-allow-credentials: true (whether you're allowed to make requests to the server)\n- access-control-allow-origin: *\n- access-control-expose-headers: x-rate-limit-limit, x-rate-limit-remaining, x-rate-limit-reset (values determining whether we're putting too much load on the server)\n- x-rate-limit-limit: 100\n- x-rate-limit-remaining: 91 (varies)\n- x-rate-limit-reset: 10538\n\nThen, we look at the [body of the server response](../data/genderize-api-response.txt)\n\n```\n{\"count\":89955,\"name\":\"Terry\",\"gender\":\"male\",\"probability\":0.75}\n```\n\nNotice that this has 65 characters and is in JSON format. \nWe get a frequency (`count`), the name we were checking up on, the likely gender, and the probability that someone with that name is of that gender (in this case, male). \n\n::::\n\n:::: demo\n\n#### Example: CURL requests in R and Python {-}\n\n\n::: panel-tabset\n##### Task {-}\n\nBoth R and Python use CURL as a backend to interact with the internet at large, but it is often easier to send requests using a request-specific library, such as `httr2`. \n\nConnect to the Evil Insult Generator API and get one insult from R in Greek (`lang=el`) in XML (`type=xml`) and one from Python in Russian (`lang=ru`), formatted as JSON (`type=json`).\n\nNotes:\n\n- I have no idea how evil/off-color these insults might be, but the idea of an API just to insult you (in many languages) is amusing enough to demonstrate even at the risk that it is crude. \n- I've set the task in non-English languages in the hopes of minimizing the offense (though the comment in the response gives a rough translation). If you are fluent in Russian or Greek, please feel free to substitute Spanish (`es`), German (`de`), French (`fr`), Greek (`el`), Russian (`ru`), Chinese (`zh`), Hindi (`hi`), Polish (`pl`), or another language of your choice. \n- I think this API is using [ISO 639 2-letter language codes](https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes), and it will return a string of asterisks if it doesn't understand your language -- it doesn't seem to have insults in every possible language, but I've verified a few modern/common ones. \n\n\n\n##### R {-}\n\nMake sure you have the `httr2` library installed (it's a dependency of a lot of tidyverse packages, so you may already have it). \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(xml2)\n\nreq <- request(\"https://evilinsult.com/generate_insult.php/?lang=el&type=xml\") |>\n  req_perform()\n\nresp_raw(req) # response header and body\n## HTTP/1.1 200 OK\n## x-powered-by: PHP/7.4.33\n## content-type: text/xml;charset=UTF-8\n## cache-control: public, max-age=172800\n## expires: Sun, 26 Oct 2025 19:36:47 GMT\n## content-length: 193\n## content-encoding: br\n## vary: Accept-Encoding,User-Agent\n## date: Fri, 24 Oct 2025 19:36:47 GMT\n## server: LiteSpeed\n## alt-svc: h3=\":443\"; ma=2592000, h3-29=\":443\"; ma=2592000, h3-Q050=\":443\"; ma=2592000, h3-Q046=\":443\"; ma=2592000, h3-Q043=\":443\"; ma=2592000, quic=\":443\"; ma=2592000; v=\"43,46\"\n## \n## <?xml version=\"1.0\"?>\n## <insult_info>\n##   <number>19</number>\n##   <language>el</language>\n##   <insult>&#x3A0;&#x3BF;&#x3C5;&#x3C4;&#x3AC;&#x3BD;&#x3B1;</insult>\n##   <created>2025-10-16 00:11:11</created>\n##   <shown>1231</shown>\n##   <createdby>emorfili</createdby>\n##   <active>1</active>\n##   <comment>Bitch</comment>\n## </insult_info>\nxml_resp <- resp_body_string(req) # response body, encoded as a string\n\nread_xml(xml_resp)\n## {xml_document}\n## <insult_info>\n## [1] <number>19</number>\n## [2] <language>el</language>\n## [3] <insult>Πουτάνα</insult>\n## [4] <created>2025-10-16 00:11:11</created>\n## [5] <shown>1231</shown>\n## [6] <createdby>emorfili</createdby>\n## [7] <active>1</active>\n## [8] <comment>Bitch</comment>\n```\n:::\n\n\n\n\n##### Python {-}\nIn Python, make sure you have the `requests` library installed. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\n\nreq = requests.get(\"https://evilinsult.com/generate_insult.php/?lang=ru&type=json\")\nreq.headers\n## {'Connection': 'Keep-Alive', 'Keep-Alive': 'timeout=5, max=100', 'X-Powered-By': 'PHP/7.4.33', 'Content-Type': 'application/json', 'Cache-Control': 'public, max-age=172800', 'Expires': 'Sun, 26 Oct 2025 19:36:49 GMT', 'Content-Length': '303', 'Content-Encoding': 'gzip', 'Vary': 'Accept-Encoding,User-Agent', 'Date': 'Fri, 24 Oct 2025 19:36:49 GMT', 'Server': 'LiteSpeed', 'alt-svc': 'h3=\":443\"; ma=2592000, h3-29=\":443\"; ma=2592000, h3-Q050=\":443\"; ma=2592000, h3-Q046=\":443\"; ma=2592000, h3-Q043=\":443\"; ma=2592000, quic=\":443\"; ma=2592000; v=\"43,46\"'}\nreq.json() # python will format JSON as a dict, which is easier to work with\n## {'number': '924', 'language': 'ru', 'insult': 'Иди  обсосы  тяево  папу , как  ты делаешь  каждый день , ты  шлюха  ебаная ', 'created': '2025-10-24 19:32:58', 'shown': '63560', 'createdby': 'Neriman', 'active': '1', 'comment': 'Go suck off your daddy like you usually\\xa0do every night, you fucking whore.'}\n```\n:::\n\n\n\n\n:::\n\nInterestingly, you can also pass the undocumented parameter `number` and get a non-random insult, but this seems to only work in the web browser - the API appears to return a random insult even when `number` is specified. \n\n::::\n\n\n:::: example\n\n#### Example: Weather Data {-}\n\nThe [National Weather Service](https://www.weather.gov/documentation/services-web-api) provides a free API for public weather data access. \nThe only requirement is that you provide a user-agent identifying your application and including contact information (an email address). \nAssemble the temperature forecast data for Moore, OK (lat = 35.339508, long = -97.486702) and plot it using a line graph. \nYou may need to make several requests to get the data you want. \n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(purrr)\n\nuastring <- \"R/python data science demos, svanderplas2@unl.edu\" # Set this to YOUR email, please!\n\npointsreq <- request(\"https://api.weather.gov/points/35.339508,-97.486702\") |>\n  req_user_agent(uastring) |>\n  req_perform()\n\npointsjson <- resp_body_json(pointsreq)\nargs <- pointsjson$properties[c(\"gridId\", \"gridX\", \"gridY\")] # This will get us the forecast info\n\nreq_url_str <- sprintf(\"https://api.weather.gov/gridpoints/%s/%s,%s/forecast/hourly\", args[1], args[2], args[3])\nforecastreq <- request(req_url_str) |>\n  req_user_agent(uastring) |>\n  req_perform()\n\nforecastjson <- resp_body_json(forecastreq)\nforecastjson$properties$periods[[1]]\n## $number\n## [1] 1\n## \n## $name\n## [1] \"\"\n## \n## $startTime\n## [1] \"2025-10-24T14:00:00-05:00\"\n## \n## $endTime\n## [1] \"2025-10-24T15:00:00-05:00\"\n## \n## $isDaytime\n## [1] TRUE\n## \n## $temperature\n## [1] 64\n## \n## $temperatureUnit\n## [1] \"F\"\n## \n## $temperatureTrend\n## [1] \"\"\n## \n## $probabilityOfPrecipitation\n## $probabilityOfPrecipitation$unitCode\n## [1] \"wmoUnit:percent\"\n## \n## $probabilityOfPrecipitation$value\n## [1] 63\n## \n## \n## $dewpoint\n## $dewpoint$unitCode\n## [1] \"wmoUnit:degC\"\n## \n## $dewpoint$value\n## [1] 17.22222\n## \n## \n## $relativeHumidity\n## $relativeHumidity$unitCode\n## [1] \"wmoUnit:percent\"\n## \n## $relativeHumidity$value\n## [1] 97\n## \n## \n## $windSpeed\n## [1] \"12 mph\"\n## \n## $windDirection\n## [1] \"SSE\"\n## \n## $icon\n## [1] \"https://api.weather.gov/icons/land/day/tsra,60?size=small\"\n## \n## $shortForecast\n## [1] \"Showers And Thunderstorms Likely\"\n## \n## $detailedForecast\n## [1] \"\"\n\nmoore_temps <- tibble(\n  start_time = map_vec(forecastjson$properties$periods, \"startTime\"),\n  temp = map_vec(forecastjson$properties$periods, \"temperature\")) |>\n  mutate(start_time = ymd_hms(start_time))\n\nggplot(moore_temps, aes(x = start_time, y = temp)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](05-APIs_files/figure-html/unnamed-chunk-4-1.png){fig-alt='Plot of temperatures in Moore, OK, as reported by the NOAA forecast API.' width=50%}\n:::\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nimport pandas as pd\nimport seaborn.objects as so\n\n# PLEASE edit this to have your email address before you run the code.\nheaders = {'User-Agent': 'R/python data science API demos', 'From': 'svanderplas2@unl.edu'} \n\npointsreq = requests.get(\"https://api.weather.gov/points/35.339508,-97.486702\", headers=headers)\npointsreq.headers\n## {'Server': 'nginx/1.20.1', 'Content-Type': 'application/geo+json', 'Access-Control-Allow-Origin': '*', 'Access-Control-Expose-Headers': 'X-Correlation-Id, X-Request-Id, X-Server-Id', 'X-Request-ID': '756befe1-c2f5-475b-a9b3-af3e1c20036a', 'X-Correlation-ID': '1dc0be11', 'X-Server-ID': 'vm-bldr-api-ops-app2.ncep.noaa.gov', 'Content-Encoding': 'gzip', 'Content-Length': '799', 'Cache-Control': 'public, max-age=71598, s-maxage=120', 'Expires': 'Sat, 25 Oct 2025 15:30:11 GMT', 'Date': 'Fri, 24 Oct 2025 19:36:53 GMT', 'Connection': 'keep-alive', 'Vary': 'Accept-Encoding, Accept,Feature-Flags,Accept-Language', 'X-Edge-Request-ID': '613e23a6', 'Strict-Transport-Security': 'max-age=31536000 ; includeSubDomains ; preload'}\npoints_json = pointsreq.json()\ntarget_url = points_json['properties']['forecast']+'/hourly'\n\n\nforecastreq = requests.get(target_url, headers=headers)\nforecast_json = forecastreq.json()\nforecast_df = pd.DataFrame(forecast_json['properties']['periods'])\nforecast_temp = forecast_df[['startTime', 'temperature']]\n\nso.Plot(forecast_temp, \"startTime\", \"temperature\").add(so.Line()).show()\n```\n\n::: {.cell-output-display}\n![](05-APIs_files/figure-html/unnamed-chunk-5-1.png){fig-alt='Plot of temperatures in Moore, OK, as reported by the NOAA forecast API.' width=50%}\n:::\n:::\n\n\n\n\nThe x-axis is a bit of a mess because I haven't spent the time to format it properly, but that's good enough for now.\n\n:::\n\n::::\n\n## API Authentication\n\nMany APIs require authentication to get response codes other than 4xx (unauthorized). \nAuthentication helps API providers ensure that it's more difficult for users to spam the service and tie up resources. \nIn some cases, you may pay to access an API, and the API may track how many requests you make or how much server time you use in order to bill you appropriately[^gptkey]. \n\n[^gptkey]: It's fairly common for people who are new to working with the ChatGPT AI to accidentally push their keys to github, and then [post](https://www.reddit.com/r/OpenAI/comments/zotyq4/how_did_openai_detect_that_my_api_key_was_pushed/) about it, wondering why they have no credits left in their account. **BE CAREFUL** when using APIs and version control - you need to always make sure your keys are stored securely and not pushed to version control.\n\n\nThere are two common methods APIs use for authentication: key-based authentication, and OAuth 2.0 authentication. \nIn addition to these methods, some APIs implement their own authentication systems that aren't standard.\n\nChances are, you'll have to read the API documentation to figure out how to authenticate, even if they are using a relatively common authentication method. \n\n### Storing Secrets Securely\n\nWhether you're using an API key or OAuth2.0 or some other authentication method, it's important to make sure you store your secrets (passwords, logins, keys, tokens) securely [@INFO2950Securely]. \nThere is always a balance between security and convenience (ease of access), though. \nI don't guard my password for reddit in the same way that I guard my bank account information or my SSN, because the worst someone can do on reddit with my username is post nonsense or offensive stuff -- they can't bankrupt me. \n\nThe solutions for secret storage here are presented roughly from less to more secure (or from more to less convenient). \nAll of these storage methods are preferable to putting the secret directly into your script.\n\n#### Environment files\n\nMost programs have the ability to read in secrets or environment variables using a separate file. \nThe dot at the beginning of the file name indicates that the file is hidden on UNIX-based systems -- just an additional tiny bit of security. \nIn R, secrets can be stored in the `.Renviron` file [@roelpiCustomizingRenvironFile2020], and Python uses the `.env` file (using this requires the `python-dotenv` package, available via pip). \nThe `usethis` package in R can help you manage your `.Renviron` file, if you \nWhen you create an environment file in your project directory, you should immediately add it to your `.gitignore` file, so that git never sees the file and there's no risk that you accidentally add it to your git repository.\nEven better, you can use the global `.gitignore` file and ensure that git NEVER sees the file. \n\nYou will have to recreate this file on each computer you're using, though, since it isn't backed up in git. \nI will often save my API keys to both the environment file and to my password manager ([KeePassXC](https://keepassxc.org/)) so that I have the key stored in an encrypted location that syncs across all of my computers in addition to an environment file.\n\nEnvironment variables are stored in the form `key=value`. \nIf your value has spaces, you may want to store them as `key=\"value with spaces\"` to avoid trouble, but you may not have to do so. \nYour keys should not have spaces.\n\n:::: demo\n##### Demo: Environment File Secret Storage and Access\n\n::: panel-tabset\n###### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!\"usethis\" %in% installed.packages()){\n  install.packages(\"usethis\")\n} \n```\n:::\n\n\n\n\nYou can manually create and edit the `.Renviron` file, or you can use the `usethis` package to do so. \nThe advantage of the `usethis` package is that it makes it much easier to find the user-level `.Renviron` file. \nPersonally, I try to use project-level secrets wherever possible, but some things are used across so many projects that it's easier just to keep them in one place, like my GitHub access token. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\nusethis::edit_r_environ(\"project\") # Store in project folder/working dir\nusethis::edit_r_environ(\"user\") # Store at user level, accessible from any project\n```\n:::\n\n\n\n\n\nAdd these lines to your `.Renviron` file:\n```\nAPI_KEY=test-key\nAPI_SECRET=test-secret\n```\n\nR will automatically load environment variables when the R session is started, but you do need to restart your session after you create or update the `.Renviron` file in order to access new environment variables.\n\n\nYou can then access the values using `Sys.getenv(\"secret-name\")`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.getenv(\"API_KEY\")\n## [1] \"test-key\"\nSys.getenv(\"API_SECRET\")\n## [1] \"test-secret\"\n```\n:::\n\n\n\n\n###### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n%pip install python-dotenv\n```\n:::\n\n\n\n\nIn a `.env` file in the project directory, add these lines:\n\n```\nAPI_KEY=test-key\nAPI_SECRET=test-secret\n```\n\nor, run the following code in a UNIX-compatible terminal (Windows users - use git bash): \n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\necho -ne \"API_KEY=test-key\\nAPI_SECRET=test-secret\" >> .env\n```\n:::\n\n\n\n\nThen, we need to tell Python to check that file using `dotenv.load_dotenv()`\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom dotenv import load_dotenv\nimport os\nload_dotenv()\n## False\n```\n:::\n\n\n\n\nSecrets in the `.env` file can then be accessed by name.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\napi_key = os.getenv(\"API_KEY\")\napi_secret = os.getenv(\"API_SECRET\")\n\nprint(\"API_KEY: \", api_key)\n## API_KEY:  test-key\nprint(\"API_SECRET: \", api_secret)\n## API_SECRET:  test-secret\n```\n:::\n\n\n\n\nYou can also access a dictionary of secrets using the  `dotenv.dotenv_values()` function.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom dotenv import dotenv_values\nsecrets = dotenv_values(\".env\")\n\nsecrets['API_KEY']\n## KeyError: 'API_KEY'\nsecrets['API_SECRET']\n## KeyError: 'API_SECRET'\n```\n:::\n\n\n\n\n:::\n\n::::\n\n\n#### System Credential Storage\n\nAll major operating systems ({{< fa brands windows >}} {{< fa brands apple >}}{{< fa brands linux >}}) have a system password store available.\nBoth R and Python can interface with this system password storage directly [@AccessSystemCredential;@expertHowHandleSecrets2023], ensuring that your passwords are not stored in plaintext anywhere, including on your machine.\n\nYou will need the `keyring` package in both R and Python to use this functionality.\n\n:::: demo\n##### Demo: System Keyring Secret Storage {-}\n\n::: panel-tabset\n###### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"keyring\")\n```\n:::\n\n\n\n\nWith this method, you will typically interactively set the secret value the first time. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(keyring)\n# Run in an interactive session\nkey_set(service = \"default\", \"API_KEY\")\n```\n:::\n\n\n\n\n\n\n\nRunning this command will pop up a window for you to enter the key value directly. \n\nThen, to get the secret back from the keyring, you just need to run `key_get(\"secret-name\")`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_get(service = \"default\", \"API_KEY\")\n```\n:::\n\n::: {.cell}\n\n```\n## [1] \"test-key\"\n```\n:::\n\n\n\n\nIf you want to list out the keys which are available using a specific service (names only, no values), you can use `key_list(service = \"your-service\")`. \n\n::: {.advanced collapse=true}\n###### Non-default backends {-}\n\nYou can [set a different backend](https://keyring.r-lib.org/reference/backends.html) for storing your secrets if you would like to do so. \nIn most cases, the operating system default is fine, but for instance on my machine, the default is to use environment variables (which is perhaps only slightly more secure than using the environment configuration files in the previous section). \nAs it would also be perfectly reasonable to use my system keyring (KDE Wallet or Seahorse + gnome-keyring, in my case), I could configure the package to use that service instead.\n:::\n\n\n###### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n%pip install keyring\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport keyring as kr\n\n# Run this in the python console interactively to leave no trace\nkr.set_password(\"test-service\", \"API_KEY\", \"test-key\")\n\nkr.get_password(\"test-service\", \"API_KEY\")\n## 'test-key'\n```\n:::\n\n\n\n:::\n\n::::\n\n#### Additional Options\n\nThere are other options to store secrets, including cloud secret storage, that are used at the enterprise level but may not be that helpful for you right now.\nI also found a [KeePassXC package for python](https://github.com/hrehfeld/python-keepassxc-browser), but couldn't find a similar one for R. \n\nIf you are using Github Actions to build things, you can emulate environment variable secret storage using custom environment variables for your actions. \nTo my knowledge, you can't easily use system credential storage in a continuous integration environment. \n\n### API Keys\n\nThe simplest method of API authentication is a key-based system. \nYou sign up with the API and they issue you (or your application) a key -- a sequence of characters that uniquely identifies your user or application. \n\nKeys can be  used in two different ways: you either pass the key in with every query (very simple), or you use your key at the start to obtain a token, which you then include with every query or pass along in the request header. \n\nTo determine how the key should be used, you will have to read the API documentation.\nMost APIs will provide you with examples of how you would submit certain queries, so you can often figure out the authentication process from those examples.\n\n:::: demo\n\n#### Demo: API Authentication with NewsAPI\n\n[NewsAPI](https://newsapi.org/) provides access to articles and headlines from around the world. \nAnyone can sign up for an API key that allows 1000 requests per day while you are developing the application (commercial projects and projects which are \"in production\" require a paid license). \n\n\nSign up for an API key so that you can follow along with this demonstration. \nSave your API key using your preferred method (or both of the methods) discussed above, using the service \"NEWSAPI\" and the username \"NEWSAPI_KEY\". \n\nThe homepage of the API provides several example GET queries (replace `<your key>` with your API key):\n\n- Top business headlines in the US right now: \n`GET https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=<your key>` \n\n- Top headlines from TechCrunch right now: `GET https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=<your key>`\n\n- All articles published by the Wall Street Journal in the past 6 months, sorted by recent first: `https://newsapi.org/v2/everything?domains=wsj.com&apiKey=<your key>`\n\nThese examples are often enough to give you a sense of how to construct a query, but for more detail, most sites also provide [documentation](https://newsapi.org/docs). \n\nFor instance, if we look at the [Authentication](https://newsapi.org/docs/authentication) page, you can see that there are 3 options for using your API key:\n\n- passed in using the `apiKey` querystring parameter\n- via the `X-Api-Key` HTTP header\n- via the `Authorization` HTTP header\n\nThe last two are preferable because they don't show up in logs, as they're hidden in the header rather than the URI. \n\n::: panel-tabset\n\n##### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey <- Sys.getenv(\"NEWSAPI_KEY\")\n\nlibrary(httr2)\nuastring <- \"R/python data science demos, svanderplas2@unl.edu\" # Set this to YOUR email, please!\n\nquery <- \"https://newsapi.org/v2/everything?domains=wsj.com&language=en\"\n\n# Option 1: Pass the API Key in using the URI\nres1 <- request(paste0(query, \"&apiKey=\", key)) |>\n  req_perform()\n# Redacting apiKey from various places before printing the object\nres1$url <- gsub(key, \"<your key>\", res1$url)\nres1$request$url <- gsub(key, \"<your key>\", res1$request$url)\nres1\n## <httr2_response>\n## GET https://newsapi.org/v2/everything?domains=wsj.com&language=en&apiKey=<your key>\n## Status: 200 OK\n## Content-Type: application/json\n## Body: In memory (15565 bytes)\n\nres2 <- request(query) |>\n  req_user_agent(uastring) |>\n  req_headers_redacted(\"X-Api-Key\" = key) |>\n  req_perform()\nres2\n## <httr2_response>\n## GET https://newsapi.org/v2/everything?domains=wsj.com&language=en\n## Status: 200 OK\n## Content-Type: application/json\n## Body: In memory (15565 bytes)\n\n\nres3 <- request(query) |>\n  req_user_agent(uastring) |>\n  req_headers_redacted(\"Authorization\" = key) |>\n  req_perform()\nres3\n## <httr2_response>\n## GET https://newsapi.org/v2/everything?domains=wsj.com&language=en\n## Status: 200 OK\n## Content-Type: application/json\n## Body: In memory (15565 bytes)\n```\n:::\n\n\n\n\nThen, we can analyze the response body and re-format it to get rectangular data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(tidyr)\nresponse <- resp_body_string(res1) |>\n  parse_json(simplifyVector = T)\nresponse <- response$articles |>\n  unnest_wider(\"source\")\nhead(response)\n## # A tibble: 6 × 9\n##   id         name  author title description url   urlToImage publishedAt content\n##   <chr>      <chr> <chr>  <chr> <chr>       <chr> <chr>      <chr>       <chr>  \n## 1 the-wall-… The … Nicho… Clev… Cleveland-… http… https://s… 2025-10-20… \"Cleve…\n## 2 the-wall-… The … Alexa… Stro… The bank’s… http… https://s… 2025-10-15… \"Bank …\n## 3 the-wall-… The … Dow J… Glob… Stock futu… http… https://s… 2025-10-15… \"Feder…\n## 4 the-wall-… The … Jack … Blac… The invest… http… https://s… 2025-10-14… \"Black…\n## 5 the-wall-… The … AnnaM… Gold… Investment… http… https://s… 2025-10-14… \"Goldm…\n## 6 the-wall-… The … Alexa… Firs… The Wall S… http… https://s… 2025-10-13… \"Jeffe…\n```\n:::\n\n\n\n\n##### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom dotenv import load_dotenv\nimport os\nload_dotenv()\n## False\nkey = os.environ.get('NEWSAPI_KEY', \"\")\n\nimport requests\n\nquery = \"https://newsapi.org/v2/everything?domains=wsj.com&language=en\"\nreq1 = requests.get(query+\"&apiKey=\"+key)\nreq2 = requests.get(query, headers={\"X-Api-Key\": key})\nreq3 = requests.get(query, headers={\"Authorization\": key})\n```\n:::\n\n\n\n\n\nThen, we can analyze the response body and re-format it to get rectangular data.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\nresponse = pd.json_normalize(req3.json()['articles'])\nresponse\n##                                     author  ...              source.name\n## 0                       Nicholas G. Miller  ...  The Wall Street Journal\n## 1                         Alexander Saeedy  ...  The Wall Street Journal\n## 2                Dow Jones Newswires Staff  ...  The Wall Street Journal\n## 3                             Jack Pitcher  ...  The Wall Street Journal\n## 4                      AnnaMaria Andriotis  ...  The Wall Street Journal\n## 5   Alexander Gladstone and Margot Patrick  ...  The Wall Street Journal\n## 6        Jennifer Williams and Connor Hart  ...  The Wall Street Journal\n## 7                Dow Jones Newswires Staff  ...  The Wall Street Journal\n## 8         Dominic Chopping and Eliot Brown  ...  The Wall Street Journal\n## 9                            Jonathan Weil  ...  The Wall Street Journal\n## 10                           Jonathan Weil  ...  The Wall Street Journal\n## 11                             Kwanwoo Jun  ...  The Wall Street Journal\n## 12                          Adam Whittaker  ...  The Wall Street Journal\n## 13                         Adrià Calatayud  ...  The Wall Street Journal\n## 14        Elena Vardon and Adrià Calatayud  ...  The Wall Street Journal\n## 15            Kimberley Kao and Billy Gray  ...  The Wall Street Journal\n## 16                             Joe Wallace  ...  The Wall Street Journal\n## \n## [17 rows x 9 columns]\n```\n:::\n\n\n\n\n:::\n\n::::\n\n\n### OAuth 2.0\n<!-- https://copilot.microsoft.com/shares/3RwERjUjrhrashJeNiyTd This isn't actually all that useful, lol...  -->\n\n::: callout-warning\n#### Under Construction {-}\n\nThis section is still under construction, as I've had trouble finding a ton of compelling examples of why you should use OAuth instead of API key authentication. \n\nYou should, however, understand the basic premise of OAuth authentication, even if we don't use it to access data.\n:::\n\nKey-based authentication is reasonably secure, but it is hard to guard against keys being shared or used by others if they are exposed. \nJust as passwords are considered less secure than two-factor authentication, API keys are considered less secure than OAuth2.0, a method which requires multiple steps to authenticate:\n\n1. User log in\n2. An authorization code is generated for the application\n3. The authorization code is exchanged for a limited time access token\n4. The token is used to access the API\n\nIn addition, API keys do not have any fine-grained way of ensuring that certain users have access to only certain resources. \nOAuth2.0 allows generation of fine-grained, limited scope permissions -- for instance, you might be allowed to read information but not write it, or read only information relating to certain variables.\n\nYou're already likely familiar with OAuth2.0, because that's how the \"Sign in with Google/Facebook/Github\" links work on various sites (here's a list of [OAuth providers](https://en.wikipedia.org/wiki/List_of_OAuth_providers)). \nYou authorize the application to see that you have a pre-existing profile from another site, and you may also allow the application to see certain information (name, profile picture, email address, ...). \nThe application is given an access token that grants it limited access to your pre-existing profile information, and that is used to allow you access to the application without creating a new profile. \n\n::: column-margin\n\n[A nice explanation of how OAuth2.0 works with cute shapes](https://engineering.backmarket.com/oauth2-explained-with-cute-shapes-7eae51f20d38) [@severOAuth2ExplainedCute2022]\n:::\n\nAs you might expect, preparing to use OAuth 2.0 authentication is a bit more complicated than just getting  an API key.\nIn addition, it will vary by API, so you need to carefully read the documentation. \nI can't provide a demo that is going to work for all APIs out there, unfortunately.\n\n:::: demo\n#### Demo: Using Github's API\n\n1. Navigate to https://github.com/settings/developers and click on OAuth Apps\n2. Create a New Oauth App by clicking the button in the top right corner\n\n![Initial steps to create a github OAuth application.](../images/advanced/oauth-github-1.png){.lightbox #fig-oauth-github-1 fig-alt=\"A screenshot of the github developer settings page. The OAuth Apps button on the left side is highlighted and corresponding text says 'select OAuth apps'. In the top right corner, the 'New OAuth App' button is highlighted and says 'create a new OAuth app'.\"}\n\n3. Fill in the OAuth application form. OAuth is usually used for web applications, so some of these values don't quite make sense for our data-gathering purposes -- and that's ok. \n    - Application name: `oauth-testing` is a good option\n    - Homepage URL: `https://github.com/<username>` (fill in your username) is a good option\n    - Authorization Callback URL: Use the same URL as you used above.\n    - Click Register when you're done.\n    \n![Github application registration value example](../images/advanced/oauth-github-2.png){.lightbox #fig-oauth-github-2 fig-alt=\"A screenshot of the github OAuth application registration page. The application name field has text next to it suggesting 'oauth-testing' as a good value. The two URL fields (Homepage URL and Authorization callback URL) are highlighted and text suggests to put a web address here - 'https://github.com/your-username' is fine. Finally, the Register application button is highlighted with instructions to click the button when the other fields are complete.\"}\n\n4. You should be redirected to your application page, and it should look something like @fig-oauth-github-3 (I've censored my client ID, but yours should be readable). Click on the 'Generate a new client secret' button. Using your preferred secret storage method, save both your client ID and client Secret to your computer -- if using a keyring, providing an ID of \"`GH_API`\" along with a username of \"`CLIENT_ID`\" and a password of \"`CLIENT_SECRET`\" should work. If using an environment file, just save `GH_APP_ID=...` and `GH_APP_SECRET=...` separately. \n\n::: {layout-ncol=2}\n\n![Github application settings page. Generate a client secret. ](../images/advanced/oauth-github-3.png){.lightbox #fig-oauth-github-3 fig-alt=\"A screenshot of a github API application page, showing the client ID and button to generate a new client secret.\"}\n\n![Github application settings page after the client secret has been generated.  Record the client ID and generated secret values to your secret storage mechanism of choice. ](.lightbox #fig-oauth-github-3 fig-alt=\"A screenshot of a github API application page, showing the client ID and the newly-generated client secret.\")\n\n:::\n\n5. Scroll to the bottom of your app page and select 'Enable Device Flow' - this will hopefully allow you to use \n\n6. Use the documentation (or LLMs like Copilot/GPT) to figure out how to authenticate for your specific API. Note that LLMs will be most useful for common APIs. \n\n::: panel-tabset\n\n##### R {-}\n\nI'm using environment variables to store my client ID and secret, so I will access them like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclient_id <- Sys.getenv(\"GH_APP_ID\")\nsecret <- Sys.getenv(\"GH_APP_SECRET\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\n\n# Step 1: Define the OAuth client\nclient <- oauth_client(\n  id = client_id,            # Replace with your GitHub App's client ID\n  secret = secret,    # Replace with your GitHub App's client secret\n  token_url = \"https://github.com/login/oauth/access_token\"\n)\n```\n:::\n\n\n\n\nThis next bit is interactive, so I can't really easily demonstrate it for you here. \nSorry!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 2: Set up the authorization flow\nauth <- oauth_flow_auth_code(\n  client = client,\n  auth_url = \"https://github.com/login/oauth/authorize\",\n  scope = \"repo\"                    # Example scope: access to repo\n)\n```\n:::\n\n\n\n\nIf this succeeds, then you'll be able to submit the next request successfully and get Hadley Wickham's user information. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 3: Create a request using the token\nreq <- request(\"https://api.github.com/users/hadley\") |>\n  req_auth_bearer_token(auth$access_token)\n\n# Step 4: Perform the request\nresp <- req_perform(req)\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 5: Print the response\nresp |> \n  resp_body_json() |>\n  head()\n## $login\n## [1] \"hadley\"\n## \n## $id\n## [1] 4196\n## \n## $node_id\n## [1] \"MDQ6VXNlcjQxOTY=\"\n## \n## $avatar_url\n## [1] \"https://avatars.githubusercontent.com/u/4196?v=4\"\n## \n## $gravatar_id\n## [1] \"\"\n## \n## $url\n## [1] \"https://api.github.com/users/hadley\"\n```\n:::\n\n\n\n\n\n##### Python {-}\n\nYou will need the `requests` package for this demo, which you can obtain with `pip install requests`.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom requests_oauthlib import OAuth2Session\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# Step 1: Define your credentials\nclient_id = os.getenv(\"GH_APP_ID\")\nclient_secret = os.getenv(\"GH_APP_SECRET\")\nredirect_uri = \"https://localhost\"  # Must match your app settings\n\n# Step 2: Define OAuth endpoints\nauthorization_base_url = \"https://github.com/login/oauth/authorize\"\ntoken_url = \"https://github.com/login/oauth/access_token\"\n\n# Step 3: Create an OAuth2 session\ngithub = OAuth2Session(client_id, redirect_uri=redirect_uri, scope=[\"repo\"])\n\n# Step 4: Redirect user to GitHub for authorization\nauthorization_url, state = github.authorization_url(authorization_base_url)\n```\n:::\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(f\"Visit this URL and authorize: {authorization_url}\")\n## Visit this URL and authorize: https://github.com/login/oauth/authorize?response_type=code&client_id=Ov23li2ClKXHmZzjlJik&redirect_uri=https%3A%2F%2Flocalhost&scope=repo&state=OV6agqUeiFjyXciNqSr0bnY7ZB4FuL\n\n# Step 5: Get the authorization response URL manually (paste it into the quotes)\nredirect_response = \"https://localhost/?code=f188b7e06bf0dca942e8&state=OV6agqUeiFjyXciNqSr0bnY7ZB4FuL\"\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Step 6: Fetch the access token\ntoken = github.fetch_token(token_url, client_secret=client_secret,\n                           authorization_response=redirect_response)\n\n# Step 7: Make an authenticated API call\nresponse = github.get(\"https://api.github.com/users/hadley\")\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(response.json())\n## AttributeError: 'DataFrame' object has no attribute 'json'\n```\n:::\n\n\n\n\n:::\n\nNote that in both cases, the OAuth libraries (`httr2`, `requests_oauthlib`) handle passing the token to the requests - we don't have to do that manually. \n\n\n::::\n\n## Best Practices\n\nWhen working with APIs, make sure to:\n\n- Read the API documentation carefully\n- Test with small requests first before scaling up\n  - If something doesn't work in R/Python, test with curl or in a browser\n- Secure your API keys using keyrings or environment variables. Do NOT push your API keys to GitHub!!!\n- Cache responses to limit server overload\n- Write reusable functions to make API calls where possible\n\n## Fun APIs To Explore\n\n- [PokeAPI](https://pokeapi.co/) - An API for accessing all of the Pokemon data you could ever want, and [Pokemon TCG](https://pokemontcg.io/) if you prefer the card game over the critters themselves. \n\n- [HolidayAPI](https://holidayapi.com/) - An API of holidays in every country worldwide.\n\n- [CheapShark](https://apidocs.cheapshark.com/) - price data for digital PC games from different stores and sales.\n\n- [UPC Database](https://upcdatabase.org/api) - access UPCs for millions of products around the world\n\n- [PurpleAir](https://www2.purpleair.com/) - real time air quality monitoring network\n\n- [OpenChargeMap](https://openchargemap.org/site/develop/api) - Electric vehicle charging stations, worldwide. \n\n- [NASA Open APIs](https://api.nasa.gov/) - one key, hundreds of different possibilities, including imagery. \n\n- [Polygon.io](https://polygon.io/) API for financial data\n\n- [Public API List](https://github.com/public-apis/public-apis?tab=readme-ov-file) -- a massive list of public APIs\n\n## References {-}\n",
    "supporting": [
      "05-APIs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}