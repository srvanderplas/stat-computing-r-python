{
  "hash": "c441998dd41e483f98496f8c2c554f0b",
  "result": {
    "engine": "knitr",
    "markdown": "# Working with PDFs {#sec-pdf-data}\n\nWhen I started my first job out of graduate school, one particular process used by my coworkers completely mystified me: they would print out a document, and then immediately scan it back in, with the scan emailed to themselves.\nThis seemed like a waste of toner, paper, and time to me -- why would anyone do such a thing?\nEventually, I found out that the printer would automatically recognize the text and add a text layer to a PDF that previously couldn't be highlighted. \nSo, my coworkers found a handy workaround to manually typing out the numbers they needed from older PDF documents!\nAs clever as this was, it was also unnecessary. A lot of paper, toner, and time could have been saved if the company had just provided **Optical Character Recognition** programs and made them available to workers. \n\nIn this chapter, you'll learn about PDF document structure, as well as how to use OCR programs.\n\n::: column-margin\n\n![DOWNSIDES: Adobe people may periodically email your newsroom to ask you to call it an 'Adobe® PDF document,' but they'll reverse course once they learn how sarcastically you can pronounce the registered trademark symbol.<br>CC-A-NC2.5 by Randall Munroe. [source](https://xkcd.com/2304/)](../images/advanced/xkcd-2304-preprint.png){.lightbox fig-alt='The image is a comic strip depicting a person sitting at a news desk. The person has simplistic features with a round head, short hair, and no facial features drawn. A speech bubble above them says \"According to a new PDF...\" Behind them is a sign reading \"Breaking News.\" Crossed out phrases above them include \"According to a new preprint...\", \"...an unpublished study...\", and \"According to a new paper uploaded to a preprint server, but which has not undergone peer review...\". Below the main image, there\\'s a section titled \"Benefits of just saying \\'a PDF\\':\" followed by three bullet points. • AVOIDS IMPLICATIONS ABOUT PUBLICATION STATUS • IMMEDIATELY RAISES QUESTIONS ABOUT AUTHOR(S) • STILL IMPLIES \"THIS DOCUMENT WAS PROBABLY PREPARED BY A PROFESSIONAL, BECAUSE NO NORMAL HUMAN TRYING TO COMMUNICATE IN 2020 WOULD CHOOSE THIS RIDICULOUS FORMAT\".'}\n\n:::\n\n## Objectives {-}\n\n- Identify the type of PDF and the data it contains.\n- Develop a strategy to extract the data from the PDF programmatically, using strategies to improve the success of Optical Character Recognition (OCR) if necessary.\n- Augment the PDF files with OCR to add a text layer, if necessary, before extracting information.\n- Extract information from PDFs programmatically and format the information appropriately.\n- Implement quality control and data cleaning measures which handle the most common OCR errors elegantly. \n\n## Introduction\n\nOver the objections of open data organizations, data archivists [@klindtPDFConsideredHarmful2017], and programmers [@edwardsWhyExtractingData2025;@zhangDocumentParsingUnveiled2024], companies and government agencies frequently use PDF (portable document format) documents to store and release data.\nElection results ([Oregon, 2024](https://sos.oregon.gov/elections/Documents/results/november-general-2024-results.pdf)), property appraisals ([Lancaster County, Nebraska](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28719-2025-147568.pdf)), public health reports ([Centers for Disease Control Morbidity and Mortality Weekly Reports](../data/cdc-mmwr-2025-07-10.pdf)), and more, locked up [@harbertTappingPowerUnstructured2021] in PDF format instead of stored properly in nicely formatted spreadsheets or databases. \nEven though we object to the storage mechanism, learning how to deal with data stored in PDF format is a valuable skill for the aspiring data scientist. \nEven if you never work with PDF data in a professional capacity (and I hope you're that lucky), these skills are very useful for public data side projects. \n\n### PDF File Format\n\nThe PDF file format was created in 1993 by Adobe and was a proprietary format until 2008, when the format became an open standard under the control of the International Standards Organization [@wikimediacontributorsHistoryPDF2024]. \nAs the acronym suggests, Portable Document Format is intended to be readable on any computer. \nThis was something of a novel idea in the 1990s, when Mac users used one document creation software and Windows users another, and there was not a version of e.g. Microsoft Office available for Mac.\n\nThe technical details of a PDF file are complex [@gnupdfprojectIntroductionPDF2014;@hodsonPDFSuccinctly2012].\nHowever, conceptually, there are four required components to a PDF document, as shown in @fig-pdf-doc-components: \n\n::: column-margin\n![High-level required components of a PDF document.](../images/advanced/pdf-document-components.png){#fig-pdf-doc-components fig-alt=\"A box containing four colored boxes: Header, Body, Cross-ref table, and Trailer.\" .lightbox}\n\n![Required components of a PDF Body](../images/advanced/pdf-body-components.png){#fig-pdf-body-components fig-alt=\"A network diagram showing the Catalog, with an arrow leading to the Page Tree. Below the Page tree are two page nodes, Page 1 and Page 2. Arrows connect the Page tree to the pages, and the pages to the page tree. The final layer of the network contains page 1 content, resources, and page 2 content. Arrows point from page 1 and 2 to the resources node, as well as to the corresponding page content.\" .lightbox}\n:::\n\n- Header\n    - PDF version number\n    - arbitrary sequence of binary data to prevent applications from opening the document as a text file (which would corrupt the file)\n- Body (relationships between body components shown in @fig-pdf-body-components)\n    - Page tree - serves as the root of the document, and may be as simple as a list of pages.\n    - Pages - each page is defined independently and contains its own metadata, links to resources, and content (defined separately). \n    - Resources - objects required to render a page, such as fonts.\n    - Content - text and graphics which appear visually on the page. \n    - Catalog - an indication to programs as to where to start reading the document. Often this is just a link to the root page tree.\n- Cross-reference table - Records the location in the file of each object in the body of the file so that when viewing a page, only objects from that page are loaded into memory. \n- Trailer - tells applications how to read the file\n    - A reference to the catalog which links to the document root\n    - Location of the cross-reference table\n    - Size of the cross-reference table\n\n@kingAdobeIntroductionInsides2005 has some good examples showing pages and the PDF document code that create the pages. \n\nWithin the page, **streams** are often used to define the page's appearance (the other option is **lattices**, which can be used to divide the page up into sections). \nTo add text, commands are issued to define the font, position the text cursor, and type the text onto the page. \nText is positioned from the bottom left corner, with $Y$ defining the vertical and $X$ defining the horizontal location. \nLine breaks and other formatting features are not a part of the PDF format -- these operations are performed by another program before the file is saved as PDF. \nAs a result, text commands in PDF can be fragmented, leading to a continuous paragraph of words being written in the PDF file as separate lines, with other page elements present in between (like figure captions, page numbers, and images). \nIn addition, PDF documents allow for changing the kerning of text (space between letters) in specific ways that may make it difficult for the characters to be separated visually. \nOne common example of this is the sequence of characters `ff` or `fi` in a document, which can sometimes be read in interesting ways by OCR: sometimes, as unicode ﬀ or ﬁ, sometimes as Cyrillic characters, and sometimes left out entirely or misplaced. \n\n\n\n::: demo\n\n### Demo: PDF Fun {-}\n\nConsider a [Home appraisal record from Lancaster County, NE](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28719-2025-147568.pdf). \nOpening the card in a PDF reader and selecting all the text yields a [disorganized text file](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28719-2025-147568.txt) (and this PDF is actually created using modern methods and relatively clean!)\n\nA few observations, marked up in @fig-pdf-layout-text: \n\n- The title on page 1 is on line 39 of the file, and it appears that the data from the first column is on lines 1-38. \n- When there are multi-column tables, as in the \"Inspection History\" table in the middle of the first page, the values are listed by column, but missing values (the times of inspection) are not indicated at all!\n- The Appraised Values table has columns Land, Building, Total, and Method. Line 142 of the text file shows an entry for \"Total Method\", and it is clear that the text for the two columns has been combined. \n\n![Comparing text of PDF document to the rendered PDF document.](../images/advanced/Lancaster-County-NE-Real-Estate-AppraisalCard-28719-2025-147568.svg){#fig-pdf-layout-text .lightbox fig-alt=\"A screenshot of the first page of the PDF, with boxes highlighting the locations corresponding to the points shown above. In the Appraised Values table, arrows are shown connecting the Appraised Values header, Land, Building, Total Method, Current, $45,000, $111,000, $156,000 IDXVAL, Prior, $45,000, $111,000, and $156,000 IDXVAL sequentially.\"}\n\nNow, perhaps we could write a script that would disentangle some of this information and format it properly, though I think the missing values would still be unrecoverable without someone visually mapping the data to the corresponding lines. \n\nThe arrangement of the text you get from selecting all text is different in different PDF applications -- I tried it with [Okular](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568.txt) and [Firefox](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-Firefox.txt), and got totally different orders of text boxes. \n\nThe scope of the actual problem only becomes visible when you look at a second [PDF document](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568.pdf) and the corresponding [text file](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568.txt). \n@fig-pdf-layout-text-parallel shows the two PDF files and their corresponding text files, with the comparable portion of each PDF and text file highlighted. \n\n![Lancaster county, NE real estate appraisal cards and text, with correpsonding sections highlighted across two appraisal cards. The text corresponding to the same space on the PDF has different formatting because one row of the table is blank on one of the cards.](../images/advanced/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568.png){#fig-pdf-layout-text-parallel .lightbox fig-alt=\"A screenshot of the text files and PDF files for both real estate appraisal cards. The recent appeal history and assessed value history table headers and first row of text are highlighted in both sets of documents.\"}\n\n\n:::\n\nHopefully you're beginning to understand how challenging this whole extracting data from PDFs thing can be!\nWhat we would really want to do here is detect the column boundaries somehow, and then read the data in from each table column-wise - this would be easier than postprocessing it, and we can also get coordinates for x and y to help us determine which data correspond to the same rows.\nHold on to that thought -- we'll come back to it.\n\n\n## Types of PDF Files\n\n### Layers\n\nPractically, we can think of PDFs as having a text layer, an image layer, or both (hybrid PDFs). \nA PDF with a text layer will allow you to select embedded text and copy it into a text file, while a PDF that just has an image layer does not. \nIt is also possible to have a PDF that has an image layer with a corresponding text layer on top. \nOptical Character Recognition takes a PDF with only image layers and creates a text file (or layer, depending on the tool) by  identifying the characters in the document and converting those characters to text with a corresponding $(x,y)$ location in the document.\nDifferent OCR programs use different conventions for this process, and the quality of the image matters a lot as well - some images are just not good enough to produce a passable transcription of the text using automatic methods. \n\n\nThus, if we want to think about classifying PDF files by type, we might come up with the following groups:\n\n- A PDF file that has an image layer, but no text layer. (This is sometimes called a \"raster\" PDF, because an image that's made up of pixels is a raster image.)\n- A PDF file that has a text layer but no image layer is unsurprisingly called a **text** PDF.\n- Many files have both text and images; these are **hybrid** PDFs.\n\nHow we ingest data from PDF files depends heavily on the type of PDF we have.\n\n\n:::: demo\n\n#### Demo: Types of PDF Files {-}\n\nFor this demo, I've converted the first page of one of the Lancaster county, NE property appraisal PDFs into:\n\n- an [image only PDF](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-image.pdf) and \n- a [text-based PDF](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-text.pdf) (the original form). \n\n::: callout\nOpen these up in your favorite PDF editor and try to highlight the text in each. How does it work?\n:::\n\nWe can also examine the format of a PDF file using R and python libraries. \n\n::: panel-tabset\n\n#### R {-}\nYou'll need the `pdftools` package, which you can install with `install.packages(\"pdftools\")`. \nThis may require you to install `libpoppler` on Linux <i class=\"fa-brands fa-linux\" aria-hidden=\"true\"></i>, but versions for other operating systems should be self-contained. \n\nThe `pdf_info` function gives us information from the PDF header, and the `pdf_text` function tries to extract the text, if it exists. \n\n##### Text-Based PDF {-}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pdftools)\nlibrary(stringr)\n\npdf_info(\"../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-text.pdf\")$version\npdf_text(\"../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-text.pdf\") |>\n  str_split(\"\\n\") |>  # <1>\n  unlist() |> # <2>\n  head() # <3>\n## [1] \"1.3\"\n## [1] \"                                                                   LANCASTER COUNTY APPRAISAL CARD\"                                                                                                        \n## [2] \"     Parcel ID: 10-24-201-025-000                                         Tax Year: 2025                                                Run Date: 7/15/2025 12:23:27 PM                  Page       1 of 2\"\n## [3] \"    OWNER NAME AND MAILING ADDRESS                                                                                 SALES INFORMATION\"                                                                      \n## [4] \"EASTDALE RENTALS LLC                           Date                Type            Sale Amount          Validity              Multi           Inst.Type                            Instrument #\"           \n## [5] \"Attn: JEFF & ANITA EASTMAN                     05/20/2022          Improved                   $0        Disqualified                          Warranty Deed                        2022025796\"             \n## [6] \"2501 S 74 ST                                   04/23/1996          Improved              $37,000        Disqualified                          Warranty Deed                        1996016959\"\n```\n:::\n\n1. Split text into lines\n2. Remove from list structure -- make a vector\n3. Show first few lines\n\n##### Image-Based PDF {-}\n\n::: {.cell}\n\n```{.r .cell-code}\npdf_info(\"../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-image.pdf\")$version\n## [1] \"1.5\"\npdf_text(\"../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-image.pdf\") \n## [1] \"\"\n```\n:::\n\n\n#### Python {-}\n\nYou will need the `pdfplumber` package [@singer-vinePdfplumber2025], which you can install with pip. \n\nThe `pdf` object contains `metadata` and `pages`, and page text (if it exists) can be accessed with the `pdf.pages[i].extract_text()` method.\n\n##### Text-Based PDF {-}\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pdfplumber # <1>\nwith pdfplumber.open(\"../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-text.pdf\") as pdf: # <2>\n  metadata = pdf.metadata # <3>\n  first_page =  pdf.pages[0] # <4>\n  text = first_page.extract_text() # <5>\n  pdf.close()  # <6>\n\nmetadata\ntext.split(\"\\n\")[0:5]  # <7>\n## {'CreationDate': \"D:20250715122327-05'00'\", 'Producer': 'iText# by Gerald Henson (r0.95 of lowagie.com, based on version Paulo build 103)'}\n## ['LANCASTER COUNTY APPRAISAL CARD', 'Parcel ID:10-24-201-025-000 Tax Year: 2025 Run Date: 7/15/2025 12:23:27 PM Page 1 of 2', 'OWNER NAME AND MAILING ADDRESS SALES INFORMATION', 'EASTDALE RENTALS LLC Date Type Sale Amount Validity Multi Inst.Type Instrument #', 'Attn: JEFF & ANITA EASTMAN 05/20/2022 Improved $0 Disqualified Warranty Deed 2022025796']\n```\n:::\n\n1. Use the `pdfplumber` library\n2. Open the file and call it `pdf`\n3. Get the metadata\n4. Get the data for the first page\n5. Extract the text from the first page\n6. Close the file (important to release memory)\n7. Split the text by `\\n` and show the first few lines\n\n\n##### Image-Based PDF {-}\n\n::: {.cell}\n\n```{.python .cell-code}\nwith pdfplumber.open(\"../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-image.pdf\") as pdf:\n  metadata = pdf.metadata\n  first_page =  pdf.pages[0]\n  text = first_page.extract_text()\n  pdf.close()\n\nmetadata\n## {'Producer': 'cairo 1.16.0 (https://cairographics.org)', 'CreationDate': \"D:20250715133207-05'00\"}\n\ntext.split(\"\\n\")[0:5]\n## ['']\n```\n:::\n\n\n:::\n\nNotice that the text does not exist for the image-based PDF. \nI created the image version of the PDF by opening the PDF in an image editor and saving the resulting file as PDF within that image editor, so it's not surprising that the text layer is not present in that version of the file. \n::::\n\n### Converting Images to Text Using Optical Character Recognition\n\nIn order to covert image layers to text layers, we need to use Optical Character Recognition (OCR). \n\nMost free OCR tools are based on the `tesseract` library [@weilTesseract2025], which you can access using `pytesseract` in python [@leePytesseractPythontesseractPython2024] or the `tesseract` R package [@tesseract-r] \nYou can also run `tesseract` from the command line, if you [install the library](https://tesseract-ocr.github.io/tessdoc/Installation.html) for your operating system and language. \n\n:::: demo\n#### Demo: Optical Character Recognition {-}\n\n::: panel-tabset\n\n##### Bash {-}\n\nFor the sake of shorter commands, let's assume I'm working with a 1-page PDF file named `file.pdf` and want to create `file.txt` which contains the text of the image-based PDF.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npdftoppm -png ../data/file.pdf file # <1>\ntesseract  -l eng ../data/file-1.png ../data/file-1-bash # <2>\n```\n:::\n\n1. Convert PDF to PNG to work with Tesseract. If the PDF file has more than one page, this will create `file-1.png` ... `file-n.png` images that can be fed into tesseract using a bash for loop. \n2. Extract the text to a text file. \n\n::: {.callout collapse=true}\n###### Output {-}\n:::: columns\n::: column\n###### PNG {-}\n[Link to the PNG file](../data/file-1-bash.png)\n![](../data/Lancaster-County-NE-Real-Estate-AppraisalCard-28749-2025-147568-pg1-image-1.png){.lightbox fig-alt=\"A detailed Lancaster County Appraisal Card for a property detailing owner, sales, inspection, and value information. The document presents comprehensive information about a property for tax year 2025, with a run date of July 15, 2025. The document is formatted into several sections, including owner information, sales information, property address, general property information, inspection history, appeal history, assessed value history, appraised values, and market land information. The owner section lists \\\"EASTDALE RENTALS LLC\\\" with mailing details. Sales information includes several dates of transactions, instrument types, and amounts related to property sales and transfers. The property site address is listed as 2250 Sheldon St, Lincoln, NE 68503. The general property information provides details like property class, zoning, neighborhood, and school code base. An inspection history section lists dates and reasons for inspections, along with the appraiser involved and contact code. Recent appeal history and assessed value history show changes in land and building values over recent years. Appraised values include current and prior values, detailing land, building, and total values. The legal description notes the property location in \\\"ENGLISH ADDITION, BLOCK 2, Lot 23.\\\"\"}\n:::\n::: column\n###### Text {-}\n[Link to the text file](../data/file-1-bash.txt) \n\n::: {.cell}\n\n```\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN,\n## 2501 S 74 ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## MAGEE AOE NOON\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## | PROPERTY FACTORS\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parkina Type:\n## Parking Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## \n## Tax Year: 2025 Run Date: 7/15/2025 12:23:27 PM Page 1 of 2\n## \n## Date Type Sale Amount Validity Multi Inst.Type Instrument #\n## 05/20/2022 Improved $0 Disqualified Warranty Deed 2022025796\n## 04/23/1996 Improved $37,000 Disqualified Warranty Deed 1996016959\n## 09/08/1994 Improved $0 Disaualified Death Certificate 1994045456\n## \n## Number Issue Date Amount Status Type Description\n## \n## Date Time Process Reason Appraiser Contact-Code\n## \n## 07/11/2022 Interview and Measure - 01 General Review MRC Tenant - 2\n## \n## 11/20/2015 11:45AM —_—No Answer At Door, Exterior - 04 General Review afo\n## \n## 07/15/2010 Field Review - 08 Final Review CAB\n## \n## 0504/2010 No Answer At Door, Measured - 05 General Review TMJ\n## \n## 09/17/2008 Field Review - 08 Final Review CAB\n## \n## Year Level Case # Status Action Year Land Building Total\n## 2025 $45,000 $124,700 $169,700\n## 2024 $45,000 $124,700 $169,700\n## 2023 $45,000 $115,700 $160,700\n## 2022 $25,000 $69,400 $94,400\n## 2021 $25,000 $69,400 $94,400\n## \n## Land Building Total Method\n## \n## Current $45,000 $124,700 $169,700 IDXVAL\n## Prior $45,000 $124,700 $169,700 IDXVAL\n## Cost $158,280 Market $332,300 GRM $169,700\n## Income $0 MRA $160,100 Ovr\n## \n## Method Type AC/SF (Units Inft Factt Inf2 Fact2 InflC FactC Avg Unit Val Land Value\n## \n## Site RPI-Primary Interior 45,000 45,000\n## \n## Total Acres 0.15 GIS SF 6402 Mkt Land Total $45,000\n## \n## Taxable Aq Land Total $0\n```\n:::\n\n:::\n::::\n:::\n\nAfter OCR, you can search for text in the text output, but it doesn't provide all of the features that a hybrid PDF with both an image and a text layer provides -- the text isn't associated with the $(x,y)$ location on the page(s). \nAlso, note that the OCR isn't perfect: because the word \"Flags:\" under Exemptions in the left column is partially obscured, it is transcribed as \"Flaas:\", which isn't an english word. \nUsing OCR can introduce errors in to the data in ways that are not necessarily predictable (though, predictable issues include confusing capital O for 0, lowercase L for 1, and so on). \nHowever, OCR is miles better than doing things manually!\n\n##### R {-}\n\nOn <i class=\"fa-brands fa-apple\" aria-hidden=\"true\"></i> Mac and <i class=\"fa-brands fa-linux\" aria-hidden=\"true\"></i> Linux, you will likely need to install some system packages to make the `tesseract` package installable. \n```\nTry installing:\n * deb: libtesseract-dev libleptonica-dev (Debian, Ubuntu, etc)\n * rpm: tesseract-devel leptonica-devel (Fedora, CentOS, RHEL)\n * brew: tesseract (Mac OSX)\n```\n\nThe <i class=\"fa-brands fa-windows\" aria-hidden=\"true\"></i> Windows R package should contain the dependencies required. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tesseract\")\nlibrary(tesseract)\nlibrary(pdftools)\nlibrary(stringr)\n\npdf_convert(pdf = \"../data/file.pdf\", filenames = \"../data/file-%d-r.%s\") # <1>\ntext <- ocr(\"../data/file-1-r.png\", engine = tesseract(\"eng\")) # <2>\nwriteLines(text, \"../data/file-1-r.txt\")\n## Converting page 1 to ../data/file-1-r.png... done!\n## [1] \"../data/file-1-r.png\"\n```\n:::\n\n1. Convert the pdf to an image. Provide placeholder `%d` in the string for the number, and `%s` in the string for the extension. \n2. Run OCR on the image using the english language engine\n\n::: {.callout collapse=true}\n###### Output Text {-}\n[Link to the text file created with R](../data/file-1-r.txt) \n\n::: {.cell}\n\n```\n## Parc: 102420125000 Tox Yous 2125 Fun Date: Tn e227 PM_——_—Pooe_1 of 2\n## omen ue ano mauincavoness ale ont\n## Serer aaracsrion lowe ees So Staules tar bees ‘oro\n## PROPERTY STS ADDRESS aun pats\n## 20 S204 st hmber——sueOHe Amount Sts Toe esc\n## event Propenr?HoRNTON\n## Uineunis: 2 magento,\n## bape aot FO cen72008 Ft Bevew “08 ral lene ec\n## ronan mecenrapremnmstony —sseDvatuenisromy\n## ae a $e00 Stat Steir\n## | pnorenryractons ie Soo. oan “Bee\n## Socino: arrnatseovawues\n## [Araaupesonenon cent som st2t7— SD xvAL\n## \n## ‘cosmo Wort ABE ORM HERD\n##  asereanminconiion\n## Towlawes 015 ossr 612 etLand Tot $4500\n## \n## Taiabe Aa Land Tt 8\n```\n:::\n\n:::\n\nWhy is this OCR version so much worse than the version using Bash? They're using the same `tesseract` library under the hood!\n\nA look at the documentation of `pdftoppm` suggests that the default resolution is 150 DPI for image conversion, where the default resolution used by `pdf_convert` in R is 72 DPI. \nIf we pass in 150 DPI, what happens?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tesseract)\nlibrary(pdftools)\nlibrary(stringr)\n\npdf_convert(pdf = \"../data/file.pdf\", dpi  = 150, filenames = \"../data/file-%d-r-150dpi.%s\")\n## Converting page 1 to ../data/file-1-r-150dpi.png... done!\n## [1] \"../data/file-1-r-150dpi.png\"\ntext <- ocr(\"../data/file-1-r-150dpi.png\", engine = tesseract(\"eng\"))\nwriteLines(text, \"../data/file-1-r-150dpi.txt\")\n```\n:::\n\n::: {.callout collapse=true}\n###### Output Text at 150 DPI {-}\n[Link to the text file created with R at 150 DPI](../data/file-1-r-150dpi.txt) \n\n::: {.cell}\n\n```\n## LANCASTER COUNTY APPRAISAL CARD\n## Parcel ID: 10-24-201-025-000 Tax Year: 2025 Run Date: 7/15/2025 12:28:27 PM Page 1 of 2\n## EASTDALE RENTALS LLC Date Type Sale Amount Validity Multi Inst.Type Instrument #\n## Attn: JEFF & ANITA EASTMAN 05/20/2022 Improved $0 Disqualified Warranty Deed 2022025796\n## 2501 $ 74ST 04/23/1996 Improved $37,000 _Disaualified Warranty Deed 1996016959\n## LINCOLN, NE 68506 0908/1994 Improved $0 Disqualified Death Certificate 1994045456\n## Additional Owners\n## No.\n## 2250 SHELDON ST Number Issue Date Amount Status Type Description\n## LINCOLN, NE 68503\n## Prop Class: Residential Improved\n## Primary Use: Conversion-Apt\n## Livina Units: 2 INSPECTION HISTORY\n## vo. slemtial Diet Date Time Process Reason Appraiser Contact-Code\n## Zonina: R4-Residential District 07/11/2022 Interview and Measure - 01 General Review MRC Tenant -2\n## Noha: 8NCO1 - North Central - 11202015 11:45AM —_No Answer At Door, Exterior - 04 General Review afo\n## cvbu 07/15/2010 Field Review - 08 Final Review CAB\n## br: 05/04/2010 No Answer At Door, Measured - 05 General Review TMJ\n## Tax Unit Grp: 0001 09/17/2008 Field Review - 08 Final Review CAB\n## Schl Code Base: 55-0001 Lincoln\n## Exemptions: ~ RECENTAPPEALHISTORY = ASSESSEDVALUEHISTORY\n## Year Level Case # Status Action Year Land Building Total\n## Flaas: 2025 $45,000 $124,700 $169,700\n## : 2024 $45,000 $124,700 $169,700\n## | Property Factors poe peso Ser) Sjonaoo\n## 2022 $25,000 $69,400 $94,400\n## GBA: 0 2021 $25,000 $69,400 $94,400\n## NRA:\n## ponent  APPRAISEDVALUES\n## Parkina Type:\n## Parkina Quantity: Land Building Total Method\n## — = LEGAL DESCRIPTION, Current $45,000 $124,700 $169,700 IDXVAL\n## ENGLESIDE ADDITION, BLOCK 2, Lot 23 Prior $45,000 $124,700 $169,700 IDXVAL\n## Cost $158,280 Market $332,300 GRM $169,700\n## Income $0 MRA $160.100 Ovr\n## Method Type ACSFUnits Infl_ Fact! ~—sInf2._—sFact2=—SsInflC_— Fact. ~=— Av Unit Val Land Value\n## Site RPI-Primary Interior u 45,000 45,000\n## TotalAcres 0.15 GIS SF 6402 Mkt Land Total $45,000\n## Taxable Aa Land Total $0\n```\n:::\n\n:::\n\n##### Python {-}\n\nIf you don't have the image created, you have to first create an image (`imgBlob`) for each page, and then run `image_to_string` on that image. \nNote that this method does not require that you write the image out to a separate file: the image is only stored in memory.\nThis might be preferable to the bash method, which produces one file for each PDF page and will use up disk space unless you delete the intermediate files at some point after the text extraction is complete. \n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom PIL import Image\nimport pytesseract\nfrom pdf2image import convert_from_path\n\npages = convert_from_path(\"../data/file.pdf\") # <1>\n\nfor pageNum,imgBlob in enumerate(pages): \n  text = pytesseract.image_to_string(imgBlob, lang='eng') # <2>\n  with open(f'../data/file-{pageNum+1}-py.txt', 'a') as the_file: # <3>\n    the_file.write(text) # <3>\n## 1796\n```\n:::\n\n1. Read in the PDF (by default, uses 200 dpi)\n2. Run OCR on each page of the PDF\n3. Write a file for each page of the PDF containing the text from OCR.\n\n\nIf you already have the image created, it's simple to get the text out with `pytesseract`, using `Image.open(<file>)` instead of `convert_from_path()`. \n\n\n::: {.cell}\n\n```{.python .cell-code}\npytesseract.image_to_string(Image.open('../data/file-1.png')).split(\"\\n\")[0:5] \n## ['Parcel ID: 10-24-201-025-000', '', 'EASTDALE RENTALS LLC', 'Attn: JEFF & ANITA EASTMAN,', '2501 S 74 ST']\n```\n:::\n\n\n\n::: {.callout collapse=true}\n###### Output Text {-}\n[Link to the text file created with Python](../data/file-1-py.txt) \n\n::: {.cell}\n\n```\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n## Parcel ID: 10-24-201-025-000\n## \n## EASTDALE RENTALS LLC\n## Attn: JEFF & ANITA EASTMAN\n## 2501S 74ST\n## \n## LINCOLN, NE 68506\n## \n## Additional Owners\n## No.\n## \n## 2250 SHELDON ST\n## LINCOLN, NE 68503\n## \n## Prop Class: Residential Improved\n## \n## Primary Use: Conversion-Apt\n## \n## Living Units: 2\n## \n## Zonina: R4-Residential District\n## \n## Nbhd: 8NC01 - North Central -\n## CVDU\n## \n## Tax Unit Grp: 0001\n## \n## Schl Code Base: 55-0001 Lincoln\n## \n## Exemptions:\n## \n## Flaas:\n## \n## GBA: 0\n## \n## NRA:\n## \n## Location:\n## \n## Parking Tvpe:\n## \n## Parkina Quantitv:\n## \n## ENGLESIDE ADDITION, BLOCK 2, Lot 23\n## \n## LANCASTER COUNTY APPRAISAL CARD\n## Tax Year: 2025\n## \n## Date Type Sale Amount Validity\n## \n## 05/20/2022 Improved $0 Disqualified\n## 04/23/1996 Improved $37,000 Disaualified\n## 09/08/1994 Improved $0 Disqualified\n## \n## Number Issue Date\n## \n## Date Time Process\n## \n## 07/11/2022 Interview and Measure - 01\n## 11/20/2015 11:45 AM No Answer At Door, Exterior - 04\n## 07/15/2010 Field Review - 08\n## \n## 05/04/2010 No Answer At Door, Measured - 05\n## 09/17/2008 Field Review - 08\n## \n## Case # Status Action\n## \n## Amount _ Status Type\n## \n## Run Date: 7/15/2025 12:23:27 PM\n## \n## Description\n## \n## Reason\n## General Review\n## General Review\n## Final Review\n## General Review\n## Final Review\n## \n## Current\n## Prior\n## Cost\n## \n## Income\n## \n## Page 1 of 2\n## \n## Multi Inst.Type Instrument #\n## Warranty Deed 2022025796\n## Warranty Deed 1996016959\n## Death Certificate 1994045456\n## \n## Appraiser Contact-Code\n## MRC Tenant - 2\n## \n## afo\n## \n## CAB\n## \n## TMJ\n## \n## CAB\n## \n## Land Buildina Total\n## $45,000 $124,700 $169,700\n## $45,000 $124,700 $169,700\n## $45,000 $115,700 $160,700\n## $25,000 $69.400 $94,400\n## $25,000 $69.400 $94,400\n## \n## Land Buildina Total Method\n## $45,000 $124,700 $169,700 IDXVAL\n## $45.000 $124,700 $169,700 IDXVAL\n## \n## $158,280 Market $332,300 GRM $169,700\n## $0 MRA $160,100 Ovr\n## \n## Method Type\n## Site RPI-Primary Interior\n## \n## Total Acres 0.15 GIS SF 6402\n## \n## ACSF Units Inf1 Fact1\n## \n## Inf2 Fact2\n## \n## InflC FactC Land Value\n## \n## 45,000\n## \n## Avg Unit Val\n## 45,000\n## \n## Mkt Land Total $45,000\n## Taxable Aq Land Total $0\n```\n:::\n\n:::\n\n:::\n\n##### Assessment of OCR Methods {-}\n\nWhat is interesting is that even when controlling the DPI, the OCR programs in each language generate different text files. Bash and python are fairly similar, but R's text file is ordered by horizontal lines, not columns. \nIt seems likely that we could probably fix the issue if we got the right set of options, but a more straightforward option might be to crop the images into separate chunks for each table and section. That might produce cleaner and more interpretable OCR'd images. \nIf we wanted to process many of these files and ingest the information into a database, then we would need to ensure that we could determine how to crop the images \n\n::::\n\nIn many cases, we don't want to deal with only a text file - we want the context of the image, but we'd like to be able to see the text, use Ctrl/Cmd-F to find the right page, and copy the text back out of the file.\n\nConsider [Hamlet](../data/hamlet-shakespeare.pdf), which I downloaded from [The Internet Archive](https://ia801907.us.archive.org/1/items/hamletby00shakuoft/hamletby00shakuoft.pdf) - it has the original text, but it also has a text layer that allows you to search through the document and find, for instance, the 11 instances of the word \"skull\", four of which are on page 82. \nIn general, the text layer is either not displayed, or, more commonly, situated behind the image layer, allowing the reader to access the words without showing the text over top of the image. \nHow are these hybrid PDF documents created?\n\n::: demo\n#### Demo: Creating Hybrid PDFs {-}\n\nWhen I need OCR and don't necessarily want to bother with R, I prefer to use a program called [`ocrmypdf`](https://github.com/ocrmypdf/OCRmyPDF) that is based on tesseract and available for most distributions.\nI started using `ocrmypdf` before I realized that it's actually a python package that can just be called from the Linux command line. \nIn any case, it's possible to use this command within R or Python, but once you have the python package installed and the binary in your system path, it's just as easy to use the program from the terminal -- everything else is just overhead.\n\nLet's OCR the Lancaster county, NE home appraisal image PDF and see what we come up with.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nocrmypdf -l eng ../data/file.pdf ../data/file-ocrmypdf.pdf\n```\n:::\n\n\n\nThe output of `ocrmypdf` is a [hybrid PDF](../data/file-ocrmypdf.pdf) that has the text and image data superimposed (the text is not visible until you highlight it). \n\n:::\n\n\n\n### The Trouble with Text Layers\n\n> Data scientists are often interested in data from tables. Unfortunately the pdf format is pretty dumb and does not have notion of a table (unlike for example HTML). Tabular data in a pdf file is nothing more than strategically positioned lines and text, which makes it difficult to extract the raw data... [@oomsPdftoolsTextExtraction2025]\n\nThe quote above gives you some idea of the challenge of extracting text from a PDF, but it's likely you've already come across this challenge when trying to copy text out of a PDF and into some other program for editing. \nIncidentally, the PDF representation of text is also a reason why some groups are shifting away from the format entirely -- it is difficult to make PDF documents accessible to screen readers, because the text isn't inherently ordered in any way^[In the US, the Department of Justice's [interpretation of Title II of the Americans with Disabilities Act](https://www.ada.gov/law-and-regs/regulations/title-ii-2010-regulations/) requires state and government services (including education) to meet digital accessibility standards. Many universities directed professors to shift materials to Word or HTML instead of PDF, as making PDFs accessible requires proprietary Adobe software.]\n\n\nText extraction from PDFs can be annoying, but extracting structured text in tables is an even harder challenge. \nHopefully, this demonstration will help you appreciate why it's so challenging, as well as introducing you to the tools you may need to convert image layers to text layers.\n\n## Working with PDFs Programmatically\n\n### Reading Tabular Data from Text or Hybrid PDFs\n\nAs mentioned above, tabular data is a particular challenge to read from PDF files, as the PDF specification doesn't actually have any way to represent structured text. \nThere are two common open-source libraries recommended for extracting tabular data from PDFs - `tabula`, which is a Java library [@aristaranTabulapdfTabula2025], and `camelot`, a Python library [@vinayak-mehtaCamelotPDFTable2025]. \nThere are interfaces to the `tabula` library in both R and Python (`tabulapdf` and `tabula-py`, respectively), but there is no R interface to `camelot`, as far as I am aware. \nIn this chapter, I will focus primarily on `tabula`, since it works across both R and Python, but if you ever run into issues using it, consider `camelot` as well -- it has some cool features [@dennisTabulapyVsCamelot2024]. \n\nInstallation of `tabulapdf` in R depends on `rJava`, which can be a bit tricky, particularly on Windows. The [tabulapdf](https://github.com/ropensci/tabulapdf/) github page has more detailed instructions for [how to install Java for Windows using Chocolatey](https://github.com/ropensci/tabulapdf/#installing-java-on-windows-with-chocolatey). \n\n:::: example\n\n#### Example: BLS \n\nThe Bureau of Labor Statistics provides monthly Consumer Price Index news releases. \nAn archive of these releases is available at https://www.bls.gov/bls/news-release/cpi.htm. \nLet's acquire 2 years worth of monthly CPI reports, and focus on trying to extract the first table, \"Consumer Price Index for All Urban Consumers (CPI-U): US city average, by expenditure category\". \n\n::: {.callout collapse=true}\n##### Acquiring 2 years of BLS CPI news releases\n\nAs this material is covered in @sec-data-web, I'm just going to provide the code to do this in R -- you can see equivalent python commands in @sec-data-web. \nAfter having done this in R, I realized I probably could have accomplished the same task with a single `wget` command in `bash`, the lesson being that it is important to pick your tools wisely. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(lubridate)\nlibrary(stringr)\n\nsave_dir <- \"../data/bls-pdfs/\"\ndir.create(save_dir, showWarnings = F)\n\nurl <- \"https://www.bls.gov/bls/news-release/cpi.htm\"\n\nsession <- read_html_live(url)\n\n# PDFs are the 2nd link in each entry\nlinks <- session$html_elements(\"li a:nth-child(2)\")  \n\n# Get the last 2 years of entries\nlink_tbl <- tibble(link = html_attr(links, \"href\"), \n                   date = str_extract(link, \"\\\\d{8}\")) |>\n  na.omit() |>\n  mutate(datestr = date, date = mdy(date)) |>\n  filter(today() - years(2) <= date)\n\n\nua <- \"Mozilla/5.0 (Windows NT x.y; Win64; x64; rv:10.0) Gecko/20100101 Firefox/10.0\"\noptions(HTTPUserAgent = ua)\n\nfilelist <- paste0(\"https://www.bls.gov\", link_tbl$link)\nfilesave <- paste0(save_dir, basename(link_tbl$link))\n\n# The site is finicky about user agents, so we need to \n# specifically pass that in to the download.file method.\nwalk2(filelist, filesave, ~download.file(.x, destfile = .y, method = \"wget\", extra = paste0(\"-U \\\"\", ua, \"\\\"\")))\n```\n:::\n\n\n:::\n\n::: column-margin\n\n![A screenshot of Table 1 of the CPI monthly report from December 2023](../images/advanced/bls-cpi-table1-screenshot.png){.lightbox #fig-cpi-tab1-screenshot fig-alt=\"A screenshot of Table 1 of the BLS CPI report showing components of the consumer price index for urban consumers, averaged over US cities.\"}\n\n:::\n\nYou can either run the code above (assuming you have `wget` on your machine), or you can [download a zip file of the PDFs](../data/bls-pdfs/bls-cpi-pdfs.zip). \n\n\n::: panel-tabset\n##### R {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tabulapdf\")\nlibrary(tabulapdf)\nlibrary(pdftools)\nlibrary(purrr)\nlibrary(stringr)\n\nfiles <- list.files(path = \"../data/bls-pdfs\", pattern = \".pdf$\", full.names=T)\n\nfind_page_number <- function(file) {\n  txt <- pdf_text(file)\n  txt_by_page <- map_chr(txt, ~paste(., collapse=\" \"))\n  which(str_detect(txt_by_page, \"Table 1\"))\n}\n\n# page_numbers <- map_int(files, find_page_number)\npage_numbers <- c(9, 10, 8, 9, 8, 8, 9, 8, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 10, 9)\n\ntables <- extract_tables(files[1], page = page_numbers[1],  output = \"tibble\")[[1]]\n\nhead(tables)\n## # A tibble: 6 × 5\n##   ...1                 ...2    ...3  `Unadjusted percent` Seasonally adjusted …¹\n##   <chr>                <chr>   <chr> <chr>                <chr>                 \n## 1 <NA>                 Relati… Unad… change               change                \n## 2 <NA>                 impor-  <NA>  <NA>                 <NA>                  \n## 3 Expenditure category tance   <NA>  Dec. Nov.            Sep. Oct. Nov.        \n## 4 <NA>                 Nov.    Dec.… 2022- 2023-          2023- 2023- 2023-     \n## 5 <NA>                 2023    2022… Dec. Dec.            Oct. Nov. Dec.        \n## 6 <NA>                 <NA>    <NA>  2023 2023            2023 2023 2023        \n## # ℹ abbreviated name: ¹​`Seasonally adjusted percent`\n```\n:::\n\n\nIt appears that `tabulapdf` isn't separating the columns the way we'd prefer. \nLet's see if we can fix that....\n\nThere's a function, `locate_areas()`, that works interactively - it opens a viewer tab and you select the table using the mouse, as in @fig-tabulapdf-locate-area. \n\n::: column-margin\n![A screenshot of one page of one of the PDFs, showing how `locate_areas` works.](../images/advanced/tabula-pdf-locate-area.png){#fig-tabulapdf-locate-area .lightbox fig-alt=\"A screenshot of the `tabulapdf` `locate_area()` function interactive window, showing a highlighted table region.\"}\n:::\n\n`locate_areas` provides a sequence of coordinates that are relatively consistent across multiple full-page tables, so we might try to use those coordinates to improve our table parsing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocate_areas(files[1], pages = rep(page_numbers[1], 5))\n```\n:::\n\n\n\nHere's what I got running this 5 times for the first PDF in the list -- this gives me boundaries for each column (without including the header). \n\n```\nListening on http://127.0.0.1:6481\n[[1]]\n     top     left   bottom    right \n128.1042 209.2557 583.8484 244.2939 \n\n[[2]]\n     top     left   bottom    right \n128.1042 289.0649 584.8223 327.9962 \n\n[[3]]\n     top     left   bottom    right \n128.1042 369.8473 586.7699 410.7252 \n\n[[4]]\n     top     left   bottom    right \n128.1042 452.5763 586.7699 489.5611 \n\n[[5]]\n     top     left   bottom    right \n126.1566 535.3054 586.7699 575.2099 \n\n```\n\nWe can actually run this for each column, keeping track of the left and right values, to get an even more precise way to read our data in. \nHere are my rough column alignments, using `cpi_01112024.pdf` as a test. \n\n- Table Start - 35 \n- Col2 - 209\n- Col3 - 244\n- Col4 - 289\n- Col5 - 328\n- Col6 - 370\n- Col7 - 411\n- Col8 - 453\n- Col9 - 490\n- Col10 - 535\n- Table End - 575\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntables <- extract_tables(\n  files[1], page = page_numbers[1], \n  guess = F,\n  col_names = F, \n  area = list(c(128, 35, 586, 575)), \n  columns = list(c(209, 244, 289, 328, 370, 411, 453, 490, 535))\n)[[1]]\n\nhead(tables)\n## # A tibble: 6 × 10\n##   X1                          X2    X3    X4    X5    X6    X7    X8    X9   X10\n##   <chr>                    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n## 1 All items.. . . . . . … 100     297.  307.  307.   3.4  -0.1   0     0.1   0.3\n## 2 Food.. . . . . . . . .…  13.4   317.  325.  325.   2.7   0.1   0.3   0.2   0.2\n## 3 Food at home.. . . . .…   8.55  299.  303.  303.   1.3  -0.1   0.3   0.1   0.1\n## 4 Cereals and bakery pro…   1.16  345.  356.  354.   2.6  -0.7   0.2   0.5  -0.3\n## 5 Meats, poultry, fish, …   1.78  320.  320.  320.  -0.1   0.1   0.7  -0.2   0.5\n## 6 Dairy and related prod…   0.78  271.  268.  268.  -1.3   0.1   0.3   0.1   0.3\n```\n:::\n\n\nOk, that looks good - let's apply it to the rest of the reports now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntables <- map2(files, page_numbers, ~extract_tables(\n    .x, page = .y, \n    guess = F,\n    col_names = F, \n    area = list(c(128, 35, 586, 575)), \n    columns = list(c(209, 244, 289, 328, 370, 411, 453, 490, 535))\n    )[[1]]\n  )\n```\n:::\n\n\n\nThen, we can read in the dates that are present in the header row, assuming that the major dividers stay the same between reports.\nI used `locate_areas()` to get the coordinates of each header that we care about.\n\n::: {.callout collapse=true}\n###### `locate_areas()` output\n\n```\n> locate_areas(files[1], pages = page_numbers[1])\n\nListening on http://127.0.0.1:7339\n[[1]]\n      top      left    bottom     right \n 89.15168  36.98473 127.13037 572.29009 \n```\n \n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nheaders <- map2( # <1>\n  files, page_numbers,  # <1>\n  ~extract_tables( # <1>\n    .x, page = .y,  # <1>\n    guess = F, # <1>\n    col_names = F,  # <1>\n    area = list(c(89, 35, 128, 575)),  # <1>\n    columns = list(c(209, 244, 289, 328, 370, 411, 453, 490, 535)) # <1>\n  )[[1]] # <1>\n)  # <1>\n\nfix_headers <- function(tbl) { # <2>\nmodifiers <- c(\"\", \"Rel_imp.\", rep(\"Unadj_idx.\", 3), rep(\"Unadj_pct_chg.\", 2), rep(\"Seas_adj_pct_chg.\", 3)) # <3>\n  \n  vars <- c(tbl[1,1],   # <4>\n    paste(unlist(tbl[2:3, 2]), collapse=\"\"), # <4>\n    paste(unlist(tbl[2:3, 3]), collapse=\"\"), # <4>\n    paste(unlist(tbl[2:3, 4]), collapse=\"\"), # <4>\n    paste(unlist(tbl[2:3, 5]), collapse=\"\"), # <4>\n    paste(unlist(tbl[1:4, 6]), collapse=\"\"), # <4>\n    paste(unlist(tbl[1:4, 7]), collapse=\"\"), # <4>\n    paste(unlist(tbl[1:4, 8]), collapse=\"\"), # <4>\n    paste(unlist(tbl[1:4, 9]), collapse=\"\"), # <4>\n    paste(unlist(tbl[1:4, 10]), collapse=\"\") # <4>\n    ) |> \n    str_remove_all(\"\\\\.\") |> # <5>\n    str_replace_all(\"[ -]\", \"_\") # <5>\n  \n  paste0(modifiers, vars) # <6>\n}\n\nheaders_fixed = map(headers, fix_headers) # <7>\n\nlibrary(magrittr)\ntables <- map2(tables, headers_fixed, ~set_names(.x, .y)) # <8>\n\ntables[[1]]\n## # A tibble: 41 × 10\n##    Expenditure_category      Rel_imp.Nov2023 Unadj_idx.Dec2022 Unadj_idx.Nov2023\n##    <chr>                               <dbl>             <dbl>             <dbl>\n##  1 All items.. . . . . . . …          100                 297.              307.\n##  2 Food.. . . . . . . . . .…           13.4               317.              325.\n##  3 Food at home.. . . . . .…            8.55              299.              303.\n##  4 Cereals and bakery produ…            1.16              345.              356.\n##  5 Meats, poultry, fish, an…            1.78              320.              320.\n##  6 Dairy and related produc…            0.78              271.              268.\n##  7 Fruits and vegetables. .…            1.47              349.              351.\n##  8 Nonalcoholic beverages a…           NA                  NA                NA \n##  9 materials. . . . . . . .…            1.03              210.              216.\n## 10 Other food at home.. . .…            2.33              263.              270.\n## # ℹ 31 more rows\n## # ℹ 6 more variables: Unadj_idx.Dec2023 <dbl>,\n## #   Unadj_pct_chg.Dec2022_Dec2023 <dbl>, Unadj_pct_chg.Nov2023_Dec2023 <dbl>,\n## #   Seas_adj_pct_chg.Sep2023_Oct2023 <dbl>,\n## #   Seas_adj_pct_chg.Oct2023_Nov2023 <dbl>,\n## #   Seas_adj_pct_chg.Nov2023_Dec2023 <dbl>\n```\n:::\n\n1. Pull headers out using roughly the same command as we used to get the tables, but with a different top and bottom area.\n2. Write a function to clean the headers up a bit\n3. `modifiers` are the top row of the variable names that aren't captured by our headers object. They're consistent from report to report. We'll separate the modifier from the dates using `.`, for easier cleaning.\n4. Extract only the components of the headers object that are needed -- this depends on whether we're talking about a single month-to-month comparison, or a time span. In the first column, we only need the \"expenditure category\" object. \n5. Remove all `.` characters from the names so they don't mess up our delimiter, and replace spaces and dashes with `_`. \n6. Paste the two vectors together to get the names.\n7. Apply the function to each header\n8. Set the names of the variables in each table to the corresponding header.\n\nThen, we just need to clean things up a bit more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tidyr)\nreport_date <- str_replace(basename(files), \"cpi_(.*)\\\\.pdf\", \"\\\\1\") |> mdy() # <1>\n\ncpi_data <- map2(tables, report_date, ~mutate(.x, report_date = .y)) # <2>\n\ncpi_data <- map(\n  cpi_data, \n  ~pivot_longer(., -c(Expenditure_category, report_date), # <3>\n                names_to=\"var\",  # <3>\n                values_to = \"val\") |> # <3>\n    separate(var, c(\"varname\", \"vardate\"), sep = \"\\\\.\") |> # <4>\n    pivot_wider(id_cols = c(\"Expenditure_category\", \"report_date\", \"vardate\"), names_from = \"varname\", values_from = \"val\") # <5>\n)\n\ncpi_data <- cpi_data |>\n  bind_rows() |>  # <6>\n  mutate(Expenditure_category = str_remove_all(Expenditure_category, \"[\\\\. ]{1,}$\") |>\n           str_trim())  # <7>\n\ndim(cpi_data)\ncpi_data\n## [1] 6601    7\n## # A tibble: 6,601 × 7\n##    Expenditure_category report_date vardate      Rel_imp Unadj_idx Unadj_pct_chg\n##    <chr>                <date>      <chr>          <dbl>     <dbl>         <dbl>\n##  1 All items            2024-01-11  Nov2023        100        307.          NA  \n##  2 All items            2024-01-11  Dec2022         NA        297.          NA  \n##  3 All items            2024-01-11  Dec2023         NA        307.          NA  \n##  4 All items            2024-01-11  Dec2022_Dec…    NA         NA            3.4\n##  5 All items            2024-01-11  Nov2023_Dec…    NA         NA           -0.1\n##  6 All items            2024-01-11  Sep2023_Oct…    NA         NA           NA  \n##  7 All items            2024-01-11  Oct2023_Nov…    NA         NA           NA  \n##  8 Food                 2024-01-11  Nov2023         13.4      325.          NA  \n##  9 Food                 2024-01-11  Dec2022         NA        317.          NA  \n## 10 Food                 2024-01-11  Dec2023         NA        325.          NA  \n## # ℹ 6,591 more rows\n## # ℹ 1 more variable: Seas_adj_pct_chg <dbl>\n```\n:::\n\n1. Determine the date of the report from the filename\n2. Add a column with the corresponding report date to each table\n3. Convert each table to long form with expenditure category and report date as ID columns. \n4. Split the variable names from the period over which the variable is calculated. In theory, we should be able to determine the lag for each of these and not care about the date, but I don't trust that the report has been that consistent over 2 years... paranoia. \n5. Pivot wider, so that there's a column for each variable name.\n6. Bind all the tables together into a single table\n7. Clean up the expenditure category names so that the dots are gone. \n\nWe could probably get this data cleaner -- the lagged columns should be specified better, but this will do for now. \nLet's at least do something interesting with this data that wouldn't have been possible without reading data in from the tables. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\ncpi_data |>\n  filter(Expenditure_category %in% c(\"Energy\", \"Food\", \"Shelter\", \"Medical care services\", \"commodities\", \"Transportation services\")) |>\n  mutate(Category = str_replace_all(Expenditure_category, c(\"commodities\"= \"Non-food Goods\", \"Medical care services\" = \"Medical\", \"Transportation services\" =\"Transportation\")) |>\n           factor(levels = c(\"Shelter\", \"Non-food Goods\", \"Energy\", \"Food\", \"Medical\", \"Transportation\"))) |>\n  select(Category, report_date, Rel_imp) |>\n  na.omit() |>\n  ggplot(aes(x = report_date, y = Rel_imp, color = Category)) + geom_line() + \n  xlab(\"Date\") + ylab(\"Relative Importance in CPI-U Calculation\") + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![Chart of the relative importance of shelter, goods, energy, food, medical, and transportation costs in the CPI-U calculation.](06-pdf-tools_files/figure-html/r-cpi-u-calc-pic-1.png){fig-alt='A line chart with date on the x-axis spanning from June 2023 to June 2025 and relative importance in the CPI-U calculation on the y-axis, ranging from approximately 0 to 40%. Six lines are shown: Shelter is the highest and has a slight bump up between March 2024 and January 2025, at which point it returns to approximately 35%. Non-food goods has a corresponding decrease under 20% during the same time span, but also has a slight downward trend during the period. Energy is next at around 13-14%, with a slight increase over the 2 year period. Food, Medical, and transportation costs are all betwen 5 and 8%, with some slight variation during the period.' width=2400}\n:::\n:::\n\n\n\n##### Tabula-Py {-}\n\nIf we learned anything from doing this in R, it's that it probably won't work the first time. \nSo this code saves a bit of evaluation time by using some of the info we got from R, like the page numbers (I've adjusted these to match python indexing). \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pdfplumber\nimport tabula\nfrom glob import glob\nimport numpy as np\n\nfiles = glob(\"../data/bls-pdfs/*.pdf\")\n\ndef find_page_number(file):\n  pdf = pdfplumber.open(file)\n  has_tb1 = [\"Table 1\" in i.extract_text() for i in pdf.pages]\n  pdf.close()\n  return int(np.where(has_tb1)[0][0])\n\n# page_numbers = [find_page_number(i) for i in files]\n# page_numbers = [i[0] for i in page_numbers]\npage_numbers = [8, 8, 7, 8, 8, 8, 7, 8, 9, 8, 8, 7, 8, 8, 8, 9, 8, 8, 8, 7, 7, 9, 8]\n```\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntables = tabula.read_pdf(files[0], pages=page_numbers[0]+1)\n## AttributeError: module 'tabula' has no attribute 'read_pdf'\ntables\n## NameError: name 'tables' is not defined\n```\n:::\n\n\nOk, so this time, we get 5 columns, which isn't quite right - it seems as if the major headers are determining the column structure. \n\nLet's see if we can define the table area and help things out. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntbl = tabula.read_pdf(files[0], pages=page_numbers[0]+1, area=[128, 35, 586, 575], pandas_options={'header': None})[0]\n## AttributeError: module 'tabula' has no attribute 'read_pdf'\ntbl\n## NameError: name 'tbl' is not defined\n```\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom itertools import chain\nimport pandas as pd\n\nheader = tabula.read_pdf(files[0], pages=page_numbers[0]+1, area=[89, 35, 128, 575], pandas_options={'header': None})[0]\n\ndef fix_headers(tbl): # <1>\n  modifiers=[[\"\", \"Rel_imp.\"], [\"Unadj_idx.\"]*3, [\"Unadj_pct_chg.\"]*2, [\"Seas_adj_pct_chg.\"]*3] # <2>\n  modifiers=list(chain.from_iterable(modifiers)) # <3>\n  # https://stackoverflow.com/questions/11860476/how-to-unnest-a-nested-list\n  \n  spans=pd.Series([tbl.loc[0,0],  # <4>\n  ''.join(tbl.loc[1:2,1]),  # <4>\n  ''.join(tbl.loc[1:2,2]),  # <4>\n  ''.join(tbl.loc[1:2,3]),  # <4>\n  ''.join(tbl.loc[1:2,4]),  # <4>\n  ''.join(tbl.loc[0:3,5]),  # <4>\n  ''.join(tbl.loc[0:3,6]),  # <4>\n  ''.join(tbl.loc[0:3,7]),  # <4>\n  ''.join(tbl.loc[0:3,8]),  # <4>\n  ''.join(tbl.loc[0:3,9])])  # <4>\n  spans=spans.str.replace(\"\\.\", \"\", regex = True)  # <5>\n  spans=spans.str.replace(\"[ -]\", \"_\", regex = True)  # <5>\n  \n  return modifiers + spans\n\nheader = fix_headers(header)  # <6>\nheader\n\ndef read_table_1(file, page_number):   # <7>\n  tbl    = tabula.read_pdf(file, pages=page_number+1, area=[128, 35, 586, 575], pandas_options={'header': None})[0]  # <8>\n  header = tabula.read_pdf(file, pages=page_number+1, area=[ 89, 35, 128, 575], pandas_options={'header': None})[0]   # <9>\n  header=fix_headers(header)  # <10>\n  tbl = tbl.rename(header, axis=1)  # <11>\n  return tbl\n\ntables = [read_table_1(file, page_numbers[i]) for i,file in enumerate(files)]   # <12>\ntables[2]\n## AttributeError: module 'tabula' has no attribute 'read_pdf'\n## NameError: name 'header' is not defined\n## NameError: name 'header' is not defined\n## AttributeError: module 'tabula' has no attribute 'read_pdf'\n## NameError: name 'tables' is not defined\n```\n:::\n\n1. Define a function to fix header text\n2. First, create a nested list of modifiers that will repeat as many times as there are nested columns\n3. Unnest the list of modifiers\n4. Put the pieces of each header together properly\n5. Clean up the header pieces a bit\n6. Apply the function to one header to see if it works\n7. Write a function to read table 1 from each report\n8. First, read the contents of the table\n9. Then, read in the header from the table\n10. Fix the header using the `fix_header` function\n11. Rename the columns of the table contents with the header values.\n\nThen we just need to clean things up a bit more.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport os\n\nreport_date = pd.Series([os.path.basename(i) for i in files]) # <1>\nreport_date = report_date.str.replace(\"cpi_|\\.pdf$\", \"\", regex=True) # <1>\nreport_date = pd.to_datetime(report_date, format=\"%m%d%Y\") # <1>\n\ncpi_data = pd.DataFrame()\nfor i,tbl in enumerate(tables):\n  tbl['report_date'] = report_date[i] # <2>\n  tbl = tbl.melt(id_vars=['Expenditure_category', 'report_date'], value_name='val', var_name='var') # <3>\n  cols = pd.DataFrame(tbl['var'].str.split(\"\\.\").to_list(), columns=['varname', 'vardate'])\n  tbl = pd.concat([tbl, cols], axis = 1) # <4>\n  tbl = tbl.set_index(['report_date', 'Expenditure_category', 'vardate']) # <5>\n  tbl = tbl.drop(['var'], axis=1) # <5>\n  tbl_wide = tbl.pivot(columns='varname', values = 'val') # <5>\n  tbl_wide = tbl_wide.reset_index() # <5>\n  cpi_data = pd.concat([cpi_data, tbl_wide], axis=0) # <6>\n\ncpi_data['Expenditure_category'] = cpi_data['Expenditure_category'].str.replace(\"[ \\.]{1,}$\", \"\", regex=True) # <7>\n\ncpi_data.shape\ncpi_data.head\n## NameError: name 'tables' is not defined\n## KeyError: 'Expenditure_category'\n## (0, 0)\n## <bound method NDFrame.head of Empty DataFrame\n## Columns: []\n## Index: []>\n```\n:::\n\n1. Determine the date of the report from the filename\n2. Add a column with the corresponding report date to each table\n3. Convert each table to long form with expenditure category and report date as ID columns. \n4. Split the variable names from the period over which the variable is calculated. In theory, we should be able to determine the lag for each of these and not care about the date, but I don't trust that the report has been that consistent over 2 years... paranoia. \n5. Pivot wider, so that there's a column for each variable name.\n6. Bind all the tables together into a single table\n7. Clean up the expenditure category names so that the dots are gone. \n\n\nWe could probably get this data cleaner -- the lagged columns should be specified better, but this will do for now. \nLet's at least do something interesting with this data that wouldn't have been possible without reading data in from the tables. \n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n\ntmp = cpi_data.query(\"~vardate.str.contains(r'_')\")\n## pandas.errors.UndefinedVariableError: name 'vardate' is not defined\ntmp = tmp.assign(vardate = pd.to_datetime(tmp['vardate'], format=\"%b%Y\"))\n## NameError: name 'tmp' is not defined\n\ntmp2 = tmp.query('Expenditure_category.isin([\"Energy\", \"Food\", \"Shelter\", \"Medical care services\", \"commodities\", \"Transportation services\"])')\n## NameError: name 'tmp' is not defined\n\ntmp2 = tmp2.assign(year = lambda x: x['vardate'].dt.year,\n                   days = lambda x: (pd.to_datetime(x['year']+1, format='%Y') - \n                          pd.to_datetime(x['year'], format='%Y')).dt.days,\n                   var_dec_date = lambda x: x.year + (x['vardate']-pd.to_datetime(x.year, format='%Y'))/ (x.days * pd.to_timedelta(1, unit=\"D\")))\n## NameError: name 'tmp2' is not defined\n\ncat_repl = {'Medical care services':'Medical', 'commodities':'Goods', 'Transportation services':'Transit'}\ntmp2=tmp2.rename(columns = {'Expenditure_category':'Category', 'var_dec_date': 'date'})\n## NameError: name 'tmp2' is not defined\nfor old,new in cat_repl.items():\n  tmp2.loc[:,'Category'] = tmp2.Category.str.replace(old, new, regex=False)\n## NameError: name 'tmp2' is not defined\n\ntmp_plot = tmp2[['date', 'Unadj_idx', 'Category']]\n## NameError: name 'tmp2' is not defined\ntmp_plot = tmp_plot.drop_duplicates()\n## NameError: name 'tmp_plot' is not defined\ntmp_plot = tmp_plot.assign(Unadj_idx = lambda x: pd.to_numeric(x.Unadj_idx))\n## NameError: name 'tmp_plot' is not defined\n\nimport seaborn.objects as so\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplot = sns.lineplot(data = tmp_plot, x = 'date', y = 'Unadj_idx', hue = 'Category')\n## NameError: name 'tmp_plot' is not defined\nplot.set(xlabel=\"Date\", ylabel=\"Unadjusted Index\")\n## NameError: name 'plot' is not defined\nplt.show()\n```\n\n::: {.cell-output-display}\n![Chart of the Unadjusted index values relating to shelter, goods, energy, food, medical, and transportation costs in the CPI-U calculation.](06-pdf-tools_files/figure-html/py-cpi-u-calc-pic-1.png){fig-alt='A line chart with date on the x-axis spanning from June 2022 to June 2025 and relative importance in the CPI-U calculation on the y-axis, ranging from approximately 170 to 625. Six lines are shown: Medical is the highest and has a slight increase over the period between June 2023 and June 2025, reaching just over 600. Transit is the next highest, and starts at around 360, increasing steadily with only a few wobbles to 400 by June 2025. Shelter costs are just below Transit, increasing from 350 to about 400 over the period of the graphs in almost an entirely linear fashion. Food increases slightly from 300 to about 325. Energy starts at just above 300 and oscillates in an irregular fashion over the 3-year period. Finally, goods are almost entirely flat at perhaps 175.' width=672}\n:::\n:::\n\n\n:::\n\n::::\n\n\n::: learnmore\n\n## Other PDF Options to Explore\n\n- `parsemypdf` [@srivastavaGenieincodebottleParsemypdf2025], a collection of AI-based parsing libraries\n\n:::\n\n## References {-}\n",
    "supporting": [
      "06-pdf-tools_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}