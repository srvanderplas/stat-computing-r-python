{
  "hash": "e5f5d430c260429d03f2f866e0b2f8ef",
  "result": {
    "engine": "knitr",
    "markdown": "# Databases {#sec-databases}\n\nComing soon!\n\nThere are many different database formats. Some of the most common databases are SQL* related formats and (for older datasets) Microsoft Access files. \n\n[This excellent GitHub repo contains code to connect to multiple types of databases in R, python, PHP, Java, SAS, and VBA](https://github.com/ParfaitG/DATABASE_CONNECTIONS)\n\n\n## Microsoft Access\n\nTo get access to MS Access databases, you will need to become familiar with how to install ODBC drivers. These drivers tell your operating system how to connect to each type of database (so you need a different driver to get to MS Access databases than to get to SQL databases). \n\n::: {.callout-note collapse=\"true\"}\n\n### Install ODBC Drivers on your machine {-}\n\n<i class=\"fa-brands fa-windows\"></i> and <i class=\"fa-brands fa-apple\"></i> [This set of instructions](https://exploratory.io/note/exploratory/How-to-import-Data-from-Microsoft-Access-Database-with-ODBC-zIJ2bjs2) appears to contain all of the right steps for Windows and Mac and has been updated recently (Feb 2022) [@teamexploratoryHowImportData2022]. \n\n<i class=\"fa-brands fa-linux\"></i> I installed `mdbtools` on Ubuntu and have the following entry in my `/etc/odbcinst.ini` file:\n\n```\n[MDBTools]\nDescription=MDBTools Driver\nDriver=libmdbodbc.so\nSetup=libmdbodbc.so\nFileUsage=1\nUsageCount=1\n```\n\nAdding this entry to the file may be part of the `mdbtools` installation - I certainly have no memory of doing it myself, but this may help if you're troubleshooting, so I've included it.\n\n:::\n\n::: demo\n\n### Database IO: Scottish Witchcraft\n\nFor this demo, we'll be using the [Scottish Witchcraft Database](http://witches.shca.ed.ac.uk/index.cfm?fuseaction=home.register)[@juliangoodareSurveyScottishWitchcraft2003], which you can download from their website, or acquire from the [course data folder](https://github.com/srvanderplas/unl-stat850/raw/main/data/Witchcraftsurvey_download.mdb) if you don't want to register with the authors. \nA description of the dataset is also [available](https://github.com/srvanderplas/unl-stat850/raw/main/data/Witchcraftsurvey_download.doc). \n\n::: panel-tabset\n\n#### R {-}\n\nIn R, we can read in MS Access files using the `Hmisc` package, as long as the mdbtools library is available on your computer^[A currently maintained version of the library is [here](https://github.com/cyberemissary/mdbtools) and should work for UNIX platforms. It may be possible to install the library on Windows using the UNIX subsystem, per [this thread](https://github.com/brianb/mdbtools/issues/107)]. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"Hmisc\" %in% installed.packages()) install.packages(\"Hmisc\")\nlibrary(Hmisc)\ndb_loc <- \"../data/Witchcraftsurvey_download.mdb\"\n\nmdb.get(db_loc, tables = TRUE) # get table list\n## Error in system(paste(\"mdb-tables -1\", file), intern = TRUE): error in running command\nmdb.get(db_loc, tables = \"WDB_Trial\")[1:6,1:10] # get table of trials, print first 6 rows and 10 cols\n## Error in system(paste(\"mdb-schema -T\", shQuote(tab), file), intern = TRUE): error in running command\n```\n:::\n\n\n\nMany databases have multiple tables with **keys** that connect information in each table. We'll spend more time on databases later in the semester - for now, it's enough to be able to get data out of one. \n#### Python {-}\n\nThere are several tutorials out there to access MS Access databases using packages like `pyodbc` [e.g. @datatofishHowConnectPython2021]. I couldn't quite get these working on Linux, but it is possible you may have better luck on another OS. With that said, the solution using [pandas_access](https://pypi.org/project/pandas_access/) seems to be much simpler and require less OS configuration, so it's what I'll show here.\n\nFirst, we have to install `pandas_access` using `pip install pandas_access`. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas_access as mdb\ndb_filename = '../data/Witchcraftsurvey_download.mdb'\n\n# List tables\nfor tbl in mdb.list_tables(db_filename):\n  print(tbl)\n## FileNotFoundError: [Errno 2] No such file or directory: 'mdb-tables'\n\n# Read a small table.\ntrials = mdb.read_table(db_filename, \"WDB_Trial_Person\")\n## FileNotFoundError: [Errno 2] No such file or directory: 'mdb-schema'\n```\n:::\n\n\n\n\nThis isn't perfectly stable - I tried to read `WDB_Trial` and got errors about NA values in an integer field - but it does at least work.\n\n\n\n:::\n\n:::\n\nMy hope is that you never actually need to get at data in an MS Access database - the format seems to be largely dying out.\n\n### SQLite\n\nSQLite databases are contained in single files with the extension .SQLite. These files can still contain many different tables, though. They function as databases but are more portable than SQL databases that require a server instance to run and connecting over a network (or running a server on your machine locally). As a result, they provide an opportunity to demonstrate most of the skills required for working with databases without all of the configuration overhead. \n\n::: demo\n::: panel-tabset\n#### R {-}\n\nLet's try working with a sqlite file that has only one table in R: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"RSQLite\" %in% installed.packages()) install.packages(\"RSQLite\")\nif (!\"DBI\" %in% installed.packages()) install.packages(\"DBI\")\nlibrary(RSQLite)\nlibrary(DBI)\n\n# Download the baby names file:\ndownload.file(\"http://2016.padjo.org/files/data/starterpack/ssa-babynames/ssa-babynames-for-2015.sqlite\", destfile = \"../data/ssa-babynames-2015.sqlite\")\n\ncon <- dbConnect(RSQLite::SQLite(), \"../data/ssa-babynames-2015.sqlite\")\ndbListTables(con) # List all the tables\n## [1] \"babynames\"\nbabyname <- dbReadTable(con, \"babynames\")\nhead(babyname, 10) # show the first 10 obs\n##    state year    name sex count rank_within_sex per_100k_within_sex\n## 1     AK 2015  Olivia   F    56               1              2367.9\n## 2     AK 2015    Liam   M    53               1              1590.6\n## 3     AK 2015    Emma   F    49               2              2071.9\n## 4     AK 2015    Noah   M    46               2              1380.6\n## 5     AK 2015  Aurora   F    46               3              1945.0\n## 6     AK 2015   James   M    45               3              1350.5\n## 7     AK 2015  Amelia   F    39               4              1649.0\n## 8     AK 2015     Ava   F    39               4              1649.0\n## 9     AK 2015 William   M    44               4              1320.5\n## 10    AK 2015  Oliver   M    41               5              1230.5\n```\n:::\n\n\n\n\n\nYou can of course write formal queries using the DBI package, but for many databases, it's easier to do the querying in R. We'll cover both options later - the R version will be in the next module.\n\n#### Python {-}\n\nThis example was created using @datacarpentryAccessingSQLiteDatabases2019 as a primary reference.\n\nIf you haven't already downloaded the database file, you can do that automatically in python using this code:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport urllib.request\nurllib.request.urlretrieve(\"http://2016.padjo.org/files/data/starterpack/ssa-babynames/ssa-babynames-for-2015.sqlite\", \"../data/babynames-2015.sqlite\")\n```\n:::\n\n\n\n\nYou don't have to install the `sqlite3` module in python using pip because it's been included in base python since Python 2.5.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport sqlite3\n\ncon = sqlite3.connect('../data/babynames-2015.sqlite')\n\nbabyname = pd.read_sql_query(\"SELECT * from babynames\", con)\n## pandas.errors.DatabaseError: Execution failed on sql 'SELECT * from babynames': no such table: babynames\nbabyname\n## NameError: name 'babyname' is not defined\n\ncon.close() # You must close any connection you open!\n```\n:::\n\n\n\n\n:::\n:::\n\n## References",
    "supporting": [
      "10-databases_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}