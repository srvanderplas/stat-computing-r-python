{
  "hash": "2149fc659dd7407964d788b70a68b1e3",
  "result": {
    "engine": "knitr",
    "markdown": "# Control Structures {#sec-control-struct}\n\nControl structures are statements in a program that determine when code is evaluated (and how many times it might be evaluated). \nThere are two main types of control structures: if-statements and loops.\n\n## Objectives {-}\n\n- Understand how to use conditional statements\n- Understand how conditional statements are evaluated by a program\n- Use program flow diagrams to break a problem into parts and evaluate how a program will execute\n- Understand how to use loops\n- Select the appropriate type of loop for a problem\n\n\n## Mindset\nBefore we start on the types of control structures, let's get in the right mindset. \nWe're all used to \"if-then\" logic, and use it in everyday conversation, but computers require another level of specificity when you're trying to provide instructions.\n\nCheck out this video of the classic \"make a peanut butter sandwich instructions challenge\":\n\n::: youtube-video-container\n\n\n\n{{< video https://www.youtube.com/watch?v=FN2RM-CHkuI >}}\n\n\n\n\n\n:::\n\nHere's another example:\n\n!['If you're done being pedantic, we should get dinner.' 'You did it again!' 'No, I didn't.' Image from Randal Munroe, xkcd.com, available under a [CC-By 2.5 license](https://creativecommons.org/licenses/by-nc/2.5/).](../images/gen-prog/conditionals.png)\n\nThe key takeaways from these bits of media are that you should read this section with a focus on exact precision - state *exactly* what you mean, and the computer will do what you say. \nIf you instead expect the computer to get what you mean, you're going to have a bad time.\n\n## Conditional Statements\n\nConditional statements determine if code is evaluated.\n\nThey look like this:\n\n    if (condition)\n      then\n        (thing to do)\n      else\n        (other thing to do)\n\nThe else (other thing to do) part may be omitted.\n\nWhen this statement is read by the computer, the computer checks to see if condition is true or false. \nIf the condition is true, then (thing to do) is also run. \nIf the condition is false, then (other thing to do) is run instead.\n\nLet's try this out:\n\n::: panel-tabset\n### R {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 1\n\nif (x > 2) { \n  y <- 8\n} else {\n  y <- 4\n}\n\nprint(paste(\"x =\", x, \"; y =\", y))\n## [1] \"x = 3 ; y = 8\"\n```\n:::\n\n\n\n\nIn R, the logical condition after `if` must be in parentheses. \nIt is common to then enclose the statement to be run if the condition is true in `{}` so that it is clear what code matches the if statement. \nYou can technically put the condition on the line after the `if (x > 2)` line, and everything will still work, but then it gets hard to figure out what to do with the else statement - it technically would also go on the same line, and that gets hard to read.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 1\n\nif (x > 2) y <- 8 else y <- 4\n\nprint(paste(\"x =\", x, \"; y =\", y))\n## [1] \"x = 3 ; y = 8\"\n```\n:::\n\n\n\n\nSo while the 2nd version of the code technically works, the first version with the brackets is much easier to read and understand. Please try to emulate the first version!\n\n### Python {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = 3\ny = 1\n\nif x > 2:\n  y = 8\nelse:\n  y = 4\n\nprint(\"x =\", x, \"; y =\", y)\n## x = 3 ; y = 8\n```\n:::\n\n\n\n\nIn python, all code grouping is accomplished with spaces instead of with brackets. \nSo in python, we write our if statement as `if x > 2:` with the colon indicating that what follows is the code to evaluate. \nThe next line is indented with 2 spaces to show that the code on those lines belongs to that if statement. \nThen, we use the else: statement to provide an alternative set of code to run if the logical condition in the if statement is false. \nAgain, we indent the code under the else statement to show where it \"belongs\".\n\n\n<!-- https://www.py4e.com/html3/03-conditional -->\n:::\n\n::: callout-warning\nPython will throw errors if you mess up the spacing. \nThis is one thing that is very annoying about Python... but it's a consequence of trying to make the code more readable.\n:::\n\n### Representing Conditional Statements as Diagrams\n\nA common way to represent conditional logic is to draw a flow chart diagram.\n\nIn a flow chart, conditional statements are represented as diamonds, and other code is represented as a rectangle. \nYes/no or True/False branches are labeled. \nTypically, after a conditional statement, the program flow returns to a single point.\n\n![Program flow diagram outline of a simple if/else statement](../images/gen-prog/flow-chart1.png)\n\n### Chaining Conditional Statements: Else-If\n\nIn many cases, it can be helpful to have a long chain of conditional statements describing a sequence of alternative statements.\n\n::: callout-warning\n### Example - Conditional Evaluation\n\nSuppose I want to determine what categorical age bracket someone falls into based on their numerical age. \nAll of the bins are mutually exclusive - you can't be in the 25-40 bracket and the 41-55 bracket.\n\n::: panel-tabset\n#### Program Flow Map {.unnumbered}\n\n![Program flow map for a series of mutually exclusive categories. If our goal is to take a numeric age variable and create a categorical set of age brackets, such as \\<18, 18-25, 26-40, 41-55, 56-65, and \\>65, we can do this with a series of if-else statements chained together. Only one of the bracket assignments is evaluated, so it is important to place the most restrictive condition first.](../images/gen-prog/age-category-prog-flow.png)\n\nThe important thing to realize when examining this program flow map is that if `age <= 18` is true, then **none of the other conditional statements even get evaluated**. \nThat is, once a statement is true, none of the other statements matter. \nBecause of this, it is important to place the most restrictive statement first.\n\n![Program flow map for a series of mutually exclusive categories, emphasizing that only some statements are evaluated. When age = 40, only (age \\<= 18), (age \\<= 25), and (age \\<= 40) are evaluated conditionally. Of the assignment statements, only bracket = '26-40' is evaluated when age = 40.](../images/gen-prog/age-category-prog-flow2.png)\n\nIf for some reason you wrote your conditional statements in the wrong order, the wrong label would get assigned:\n\n![Program flow map for a series of mutually exclusive categories, with category labels in the wrong order - \\<40 is evaluated first, and so \\<= 25 and \\<= 18 will never be evaluated and the wrong label will be assigned for anything in those categories.](../images/gen-prog/age-category-prog-flow3.png)\n\nIn code, we would write this statement using `else-if` (or `elif`) statements.\n\n#### R {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 40 # change this as you will to see how the code works\n\nif (age < 18) {\n  bracket <- \"<18\"\n} else if (age <= 25) {\n  bracket <- \"18-25\"\n} else if (age <= 40) {\n  bracket <- \"26-40\"\n} else if (age <= 55) {\n  bracket <- \"41-55\" \n} else if (age <= 65) {\n  bracket <- \"56-65\"\n} else {\n  bracket <- \">65\"\n}\n\nbracket\n## [1] \"26-40\"\n```\n:::\n\n\n\n\n#### Python {.unnumbered}\n\nPython uses `elif` as a shorthand for `else if` statements. As always, indentation/white space in python matters. If you put an extra blank line between two elif statements, then the interpreter will complain. If you don't indent properly, the interpreter will complain.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nage = 40 # change this to see how the code works\n\nif age < 18:\n  bracket = \"<18\"\nelif age <= 25:\n  bracket = \"18-25\"\nelif age <= 40:\n  bracket = \"26-40\"\nelif age <= 55:\n  bracket = \"41-55\"\nelif age <= 65:\n  bracket = \"56-65\"\nelse:\n  bracket = \">65\"\n  \nbracket\n## '26-40'\n```\n:::\n\n\n\n:::\n:::\n\n\n::: callout-tip\n### Try it out - Chained If/Else Statements\n\n::: panel-tabset\n#### Problem {.unnumbered}\n\nThe US Tax code has brackets, such that the first \\$10,275 of your income is taxed at 10%, anything between \\$10,275 and \\$41,775 is taxed at 12%, and so on.\n\nHere is the table of tax brackets for single filers in 2022:\n\n| rate | Income                 |\n|------|------------------------|\n| 10%  | \\$0 to \\$10,275        |\n| 12%  | \\$10,275 to \\$41,775   |\n| 22%  | \\$41,775 to \\$89,075   |\n| 24%  | \\$89,075 to \\$170,050  |\n| 32%  | \\$170,050 to \\$215,950 |\n| 35%  | \\$215,950 to \\$539,900 |\n| 37%  | \\$539,900 or more      |\n\nNote: For the purposes of this problem, we're ignoring the personal exemption and the standard deduction, so we're already simplifying the tax code.\n\nWrite a set of if statements that assess someone's income and determine what their overall tax rate is.\n\nHint: You may want to keep track of how much of the income has already been taxed in a variable and what the total tax accumulation is in another variable.\n\n\n<!-- First, let's start by looking at a graph of the practical implication of taxing things using brackets. This graph shows the amount in each bracket as well as the amount of taxes paid. -->\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n#### Flow Map\n\n![The control flow diagram for the tax brackets](../images/gen-prog/tax-brackets.png)\n\nControl flow diagrams can be extremely helpful when figuring out how programs work (and where gaps in your logic are when you're debugging). \nIt can be very helpful to map out your program flow as you're untangling a problem.\n\n\n#### R Solution {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with total income\nincome <- 200000\n\n# x will hold income that hasn't been taxed yet\nx <- income\n# y will hold taxes paid\ny <- 0\n\nif (x <= 10275) {\n  y <- x*.1 # tax paid\n  x <- 0 # All money has been taxed\n} else {\n  y <- y + 10275 * .1\n  x <- x - 10275 # Money remaining that hasn't been taxed\n}\n\nif (x <= (41775 - 10275)) {\n  y <- y + x * .12\n  x <- 0\n} else {\n  y <- y + (41775 - 10275) * .12\n  x <- x - (41775 - 10275) \n}\n\nif (x <= (89075 - 41775)) {\n  y <- y + x * .22\n  x <- 0\n} else {\n  y <- y + (89075 - 41775) * .22\n  x <- x - (89075 - 41775)\n}\n\nif (x <= (170050 - 89075)) {\n  y <- y + x * .24\n  x <- 0\n} else {\n  y <- y + (170050 - 89075) * .24\n  x <- x - (170050 - 89075)\n}\n\nif (x <= (215950 - 170050)) {\n  y <- y + x * .32\n  x <- 0\n} else {\n  y <- y + (215950 - 170050) * .32\n  x <- x - (215950 - 170050)\n}\n\nif (x <= (539900 - 215950)) {\n  y <- y + x * .35\n  x <- 0\n} else {\n  y <- y + (539900 - 215950) * .35\n  x <- x - (539900 - 215950)\n}\n\nif (x > 0) {\n  y <- y + x * .37\n}\n\n\nprint(paste(\"Total Tax Rate on $\", income, \" in income = \", round(y/income, 4)*100, \"%\"))\n## [1] \"Total Tax Rate on $ 2e+05  in income =  22.12 %\"\n```\n:::\n\n\n\n\n#### Python Solution {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Start with total income\nincome = 200000\n\n# untaxed will hold income that hasn't been taxed yet\nuntaxed = income\n# taxed will hold taxes paid\ntaxes = 0\n\nif untaxed <= 10275:\n  taxes = untaxed*.1 # tax paid\n  untaxed = 0 # All money has been taxed\nelse:\n  taxes = taxes + 10275 * .1\n  untaxed = untaxed - 10275 # money remaining that hasn't been taxed\n\nif untaxed <= (41775 - 10275):\n  taxes = taxes + untaxed * .12\n  untaxed = 0\nelse:\n  taxes = taxes + (41775 - 10275) * .12\n  untaxed = untaxed - (41775 - 10275) \n\n\nif untaxed <= (89075 - 41775):\n  taxes = taxes + untaxed * .22\n  untaxed = 0\nelse: \n  taxes = taxes + (89075 - 41775) * .22\n  untaxed = untaxed - (89075 - 41775)\n\nif untaxed <= (170050 - 89075):\n  taxes = taxes + untaxed * .24\n  untaxed = 0\nelse: \n  taxes = taxes + (170050 - 89075) * .24\n  untaxed = untaxed - (170050 - 89075)\n\nif untaxed <= (215950 - 170050):\n  taxes = taxes + untaxed * .32\n  untaxed = 0\nelse:\n  taxes = taxes + (215950 - 170050) * .32\n  untaxed = untaxed - (215950 - 170050)\n\nif untaxed <= (539900 - 215950):\n  taxes = taxes + untaxed * .35\n  untaxed = 0\nelse: \n  taxes = taxes + (539900 - 215950) * .35\n  untaxed = untaxed - (539900 - 215950)\n\n\nif untaxed > 0:\n  taxes = taxes + untaxed * .37\n\n\n\nprint(\"Total Tauntaxed Rate on $\", income, \" in income = \", round(taxes/income, 4)*100, \"%\")\n## Total Tauntaxed Rate on $ 200000  in income =  22.12 %\n```\n:::\n\n\n\n\nWe will find a better way to represent this calculation once we discuss loops - we can store each bracket's start and end point in a vector and loop through them. Any time you find yourself copy-pasting code and changing values, you should consider using a loop (or eventually a function) instead.\n\n:::\n:::\n\n## Loops\n\n<!-- https://www.py4e.com/html3/05-iterations -->\n\nOften, we write programs which update a variable in a way that the new value of the variable depends on the old value:\n\n    x = x + 1\n\nThis means that we add one to the current value of `x`.\n\nBefore we write a statement like this, we have to **initialize** the value of `x` because otherwise, we don't know what value to add one to.\n\n    x = 0\n    x = x + 1\n\nWe sometimes use the word **increment** to talk about adding one to the value of `x`; **decrement** means subtracting one from the value of `x`.\n\nA particularly powerful tool for making these types of repetitive changes in programming is the **loop**, which executes statements a certain number of times. \nLoops can be written in several different ways, but all loops allow for executing a block of code a variable number of times.\n\n### While Loops\n\nIn the previous section, we discussed conditional statements, where a block of code is only executed *if* a logical statement is true.\nThe simplest type of loop is the **while** loop, which executes a block of code until a statement is no longer true.\n\n::: callout-warning\n#### Example - While Loops\n\n::: panel-tabset\n##### Flow Map\n\n![Flow map showing while-loop pseudocode (while x \\<= N) { \\# code that changes x in some way} and the program flow map expansion where we check if x \\> N (exiting the loop if true); otherwise, we continue into the loop, execute the main body of #code and then change x and start over.](../images/gen-prog/while-loop-flow.png)\n\n##### R {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\n\nwhile (x < 10) { \n  # Everything in here is executed \n  # during each iteration of the loop\n  print(x)\n  x <- x + 1\n}\n## [1] 0\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n```\n:::\n\n\n\n\n##### Python {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = 0\n\nwhile x < 10:\n  print(x)\n  x = x + 1\n## 0\n## 1\n## 2\n## 3\n## 4\n## 5\n## 6\n## 7\n## 8\n## 9\n```\n:::\n\n\n\n:::\n:::\n\n::: callout-tip\n#### Try it Out - While Loops\n\n::: panel-tabset\n##### Problem {.unnumbered}\n\nWrite a while loop that verifies that $$\\lim_{N \\rightarrow \\infty} \\prod_{k=1}^N \\left(1 + \\frac{1}{k^2}\\right) = \\frac{e^\\pi - e^{-\\pi}}{2\\pi}.$$\n\nTerminate your loop when you get within 0.0001 of $\\frac{e^\\pi - e^{-\\pi}}{2\\pi}$. At what value of $k$ is this point reached?\n\n##### Math Notation {.unnumbered}\n\nBreaking down math notation for code:\n\n-   If you are unfamiliar with the notation $\\prod_{k=1}^N f(k)$, this is the product of $f(k)$ for $k = 1, 2, ..., N$, $$f(1)\\cdot f(2)\\cdot ... \\cdot f(N)$$\n\n-   To evaluate a limit, we just keep increasing $N$ until we get arbitrarily close to the right hand side of the equation.\n\nIn this problem, we can just keep increasing $k$ and keep track of the cumulative product. So we define `k=1`, `prod = 1`, and `ans` before the loop starts. Then, we loop over `k`, multiplying `prod` by $(1 + 1/k^2)$ and then incrementing $k$ by one each time. At each iteration, we test whether `prod` is close enough to `ans` to stop the loop.\n\n##### R Solution {.unnumbered}\n\nIn R, you will use `pi` and `exp()` - these are available by default without any additional libraries or packages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 1\nprod <- 1\nans <- (exp(pi) - exp(-pi))/(2*pi)\ndelta <- 0.0001\n\nwhile (abs(prod - ans) >= 0.0001) {\n  prod <- prod * (1 + 1/k^2)\n  k <- k + 1\n}\n\nk\n## [1] 36761\nprod\n## [1] 3.675978\nans\n## [1] 3.676078\n```\n:::\n\n\n\n\n##### Python solution {.unnumbered}\n\nNote that in python, you will have to import the math library to get the values of pi and the `exp` function. You can refer to these as `math.pi` and `math.exp()` respectively.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\n\nk = 1\nprod = 1\nans = (math.exp(math.pi) - math.exp(-math.pi))/(2*math.pi)\ndelta = 0.0001\n\nwhile abs(prod - ans) >= 0.0001:\n  prod = prod * (1 + k**-2)\n  k = k + 1\n  if k > 500000:\n    break\n\n\nprint(\"At \", k, \" iterations, the product is \", prod, \"compared to the limit \", ans,\".\")\n## At  36761  iterations, the product is  3.675977910975878 compared to the limit  3.676077910374978 .\n```\n:::\n\n\n\n:::\n:::\n\n::: callout-warning\n#### Warning: Avoid Infinite Loops\n\nIt is very easy to create an **infinite** loop when you are working with while loops. \nInfinite loops never exit, because the condition is always true. \nIf in the while loop example we decrement x instead of incrementing x, the loop will run forever.\n\nYou want to try very hard to avoid ever creating an infinite loop - it can cause your session to crash.\n\nOne common way to avoid infinite loops is to create a second variable that just counts how many times the loop has run. \nIf that variable gets over a certain threshold, you exit the loop.\n\n::: panel-tabset\n##### R {.unnumbered}\n\nThis while loop runs until either x \\< 10 or n \\> 50 - so it will run an indeterminate number of times and depends on the random values added to x. Since this process (a 'random walk') could theoretically continue forever, we add the n\\>50 check to the loop so that we don't tie up the computer for eternity.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\nn <- 0 # count the number of times the loop runs\n\nwhile (x < 10) { \n  print(x)\n  x <- x + rnorm(1) # add a random normal (0, 1) draw each time\n  n <- n + 1\n  if (n > 50) \n    break # this stops the loop if n > 50\n}\n## [1] 0\n## [1] -1.986823\n## [1] -1.923002\n## [1] -1.364182\n## [1] -1.569483\n## [1] -0.7210977\n## [1] -1.037414\n## [1] 0.371419\n## [1] 0.4711029\n## [1] 0.4748054\n## [1] -0.9663139\n## [1] -1.586912\n## [1] -0.5355707\n## [1] 0.001262606\n## [1] 1.691661\n## [1] 3.301037\n## [1] 4.578807\n## [1] 5.683789\n## [1] 4.973758\n## [1] 4.583956\n## [1] 4.855161\n## [1] 4.172929\n## [1] 2.43851\n## [1] 1.375792\n## [1] 2.555765\n## [1] 3.44099\n## [1] 2.721021\n## [1] 2.7651\n## [1] 2.76328\n## [1] 2.372018\n## [1] 3.542041\n## [1] 4.297902\n## [1] 5.538397\n## [1] 5.381855\n## [1] 5.274075\n## [1] 4.133351\n## [1] 3.937163\n## [1] 4.399681\n## [1] 3.284095\n## [1] 3.587713\n## [1] 2.169992\n## [1] 0.7923253\n## [1] 2.469792\n## [1] 1.078574\n## [1] 1.635922\n## [1] 1.423294\n## [1] 1.324338\n## [1] 1.360908\n## [1] 1.791121\n## [1] 0.1807962\n## [1] 1.342103\n```\n:::\n\n\n\n\n##### Python {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np; # for the random normal draw\n\nx = 0\nn = 0 # count the number of times the loop runs\n\nwhile x < 10:\n  print(x)\n  x = x + np.random.normal(0, 1, 1) # add a random normal (0, 1) draw each time\n  n = n + 1\n  if n > 50:\n    break # this stops the loop if n > 50\n## 0\n## [0.02822933]\n## [1.54928323]\n## [3.09832922]\n## [4.27389642]\n## [5.86097301]\n## [7.21797605]\n## [8.10903881]\n## [6.73165883]\n## [8.65679598]\n## [9.64605367]\n```\n:::\n\n\n\n:::\n\nIn both of the examples above, there are more efficient ways to write a random walk, but we will get to that later. The important thing here is that we want to make sure that our loops don't run for all eternity.\n:::\n\n### For Loops\n\nAnother common type of loop is a **for** loop. \nIn a for loop, we run the block of code, iterating through a series of values (commonly, one to N, but not always). \nGenerally speaking, for loops are known as **definite** loops because the code inside a for loop is executed a specific number of times. \nWhile loops are known as **indefinite** loops because the code within a while loop is evaluated until the condition is falsified, which is not always a known number of times.\n\n![A visual demonstration of for loops iterating through a vector of monsters to dress them up for a parade. Image by [Allison Horst](https://twitter.com/allison_horst/status/1636395184106917889?s=20).](../images/tools/monster-parade.jpeg){fig-alt=\"Illustrated for loop where the input vector is a parade of monsters, including monsters that are circles, triangles, and squares. The for loop they enter has an if-else statement: if the monster is a triangle, it gets sunglasses. Otherwise, it gets a hat. The output is the parade of monsters where the same input parade of monsters shows up, now wearing either sunglasses (if triangular) or a hat (if any other shape).\"}\n\n::: callout-caution\n#### Example - For Loop Syntax\n::: panel-tabset\n##### Flow Map {.unnumbered}\n\n![Flow map showing for-loop pseudocode (for j in 1 to N) { \\# code} and the program flow map expansion where j starts at 1 and we check if j \\> N (exiting the loop if true); otherwise, we continue into the loop, execute the main body of #code and then increment j and start over.](../images/gen-prog/for-loop-flow.png)\n\n##### R {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:5 ) {\n  print(i)\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n```\n:::\n\n\n\n\n##### Python {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i in range(5):\n  print(i)\n## 0\n## 1\n## 2\n## 3\n## 4\n```\n:::\n\n\n\n\nBy default `range`(5) goes from 0 to 5, the upper bound. When `i = 5` the loop exits. This is because `range(5)` creates a vector `[0, 1, 2, 3, 4]`.\n:::\n:::\n\nFor loops are often run from 1 to N (or 0 to N-1 in python) but in essence, a for loop is very commonly used to do a task for every value of a vector.\n\n::: ex\n#### Example - For Loops\n::: panel-tabset\n##### R {.unnumbered}\n\nFor instance, in R, there is a built-in variable called `month.name`. Type `month.name` into your R console to see what it looks like. \nIf we want to iterate along the values of month.name, we can:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in month.name)\n  print(i)\n## [1] \"January\"\n## [1] \"February\"\n## [1] \"March\"\n## [1] \"April\"\n## [1] \"May\"\n## [1] \"June\"\n## [1] \"July\"\n## [1] \"August\"\n## [1] \"September\"\n## [1] \"October\"\n## [1] \"November\"\n## [1] \"December\"\n```\n:::\n\n\n\n\nWe can even pick out the first 3 letters of each month name and store them into a vector called `abbr3`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new vector of the correct length\nabbr3 <- rep(\"\", length(month.name))\n\n# We have to iterate along the index (1 to length) instead of the name \n# in this case because we want to store the result in a corresponding\n# row of a new vector\nfor (i in 1:length(month.name))\n  abbr3[i] <- substr(month.name[i], 1, 3)\n\n# We can combine the two vectors into a data frame \n# so that each row corresponds to a month and there are two columns:\n# full month name, and abbreviation\ndata.frame(full_name = month.name, abbrev = abbr3)\n##    full_name abbrev\n## 1    January    Jan\n## 2   February    Feb\n## 3      March    Mar\n## 4      April    Apr\n## 5        May    May\n## 6       June    Jun\n## 7       July    Jul\n## 8     August    Aug\n## 9  September    Sep\n## 10   October    Oct\n## 11  November    Nov\n## 12  December    Dec\n```\n:::\n\n\n\n\n\n##### Python {.unnumbered}\n\nIn python, we have to define our vector or list to start out with, but that's easy enough:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport calendar\n# Create a list with month names. For some reason, by default there's a \"\" as \n# the first entry, so we'll get rid of that\nmonth_name = list(calendar.month_name)[1:13]\n\nfor i in month_name:\n  print(i)\n## January\n## February\n## March\n## April\n## May\n## June\n## July\n## August\n## September\n## October\n## November\n## December\n```\n:::\n\n\n\n\n\nWe can even pick out the first 3 letters of each month name and store them into a vector called `abbr3`.\n\nPython handles lists best when you use [pythonic](https://stackoverflow.com/questions/522563/accessing-the-index-in-for-loops) expressions. The linked post has an excellent explanation of why enumerate works best here.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Create new vector of the correct length\nabbr3 = [\"\"] * len(month_name)\n\n# We have to iterate along the index because we want to \n# store the result in a corresponding row of a new vector\n# Python allows us to iterate along both the index i and the value val\n# at the same time, which is convenient.\nfor i, val in enumerate(month_name):\n  abbr3[i] = val[0:3:] # Strings have indexes by character, so this gets \n                       # characters 0, 1, and 2.\n  \nabbr3\n## ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n```\n:::\n\n\n\n:::\n:::\n\n## Other Control Structures\n\n### Conditional Statements\n\ncase statements, e.g. `case_when` in tidyverse\n\n### Loops\n\n#### Controlling Loops\n\nWhile I do not often use break, next, and continue statements, they do exist in both languages and can be useful for controlling the flow of program execution. \nI have moved the section on this to @sec-controlling-loops for the sake of brevity and to reduce the amount of new material those without programming experience are being exposed to in this section.\n\n#### Other Types of Loops\n\nThere are other types of loops in most languages, such as the do-while loop, which runs the code first and then evaluates the logical condition to determine whether the loop will be run again.\n\n::: callout-warning\n##### Example: do-while loops\n\n::: panel-tabset\n###### R\n\nIn R, do-while loops are most naturally implemented using a very primitive type of iteration: a `repeat` statement.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepeat {\n  # statements go here\n  if (condition)\n    break # this exits the repeat statement\n}\n```\n:::\n\n\n\n\n###### Python\n\nIn python, do-while loops are most naturally implemented using a while loop with condition TRUE:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nwhile TRUE:\n  # statements go here\n  if condition:\n    break\n\n```\n:::\n\n\n\n\n:::\n:::\n\nAn additional means of running code an indeterminate number of times is the use of **recursion**, which we cannot cover until we learn about functions. \nI have added an additional section, @sec-recursion, to cover this topic, but it is not essential to being able to complete most basic data programming tasks.\nRecursion is useful when working with structures such as trees (including phylogenetic trees) and nested lists.\n\n\n## References  {#sec-control-struct-refs}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}