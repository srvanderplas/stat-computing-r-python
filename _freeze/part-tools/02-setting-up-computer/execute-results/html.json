{
  "hash": "998bd92cb9abfab826af476fd4d88f52",
  "result": {
    "engine": "knitr",
    "markdown": "# Setting Up Your Computer {#sec-setting-up}\n\n## Objectives {-}\n\n-   Set up RStudio, R, Quarto, and python\n-   Be able to run demo code in R and python\n\n## What are you asking me to install?\n\nIt's a good idea to be skeptical when someone is telling you to install things.\nðŸ¤¨ Here's a very broad overview of what each of these programs or services does and why I'm asking you to install or sign up for them.\n\n| Program     | Logo                                                                                                                                       | Purpose                                                                                                                                                                                                       |\n|--------------|--------------|---------------------------------------------|\n| R           | ![](https://www.r-project.org/Rlogo.png){width=\"80\" height=\"63\" fig-alt=\"R logo\"}                                                                           | A statistical programming language built around working with data                                                                                                                                             |\n| Python      | ![](https://s3.dualstack.us-east-2.amazonaws.com/pythondotorg-assets/media/community/logos/python-logo-only.png){width=\"80\" fig-alt=\"Python logo\"}               | A general-purpose programming language that is popular for machine learning tasks.                                                                                                                            |\n| RStudio IDE | ![](../images/tools/RStudio-Ball.png){width=\"80\" fig-alt=\"RStudio logo\"}                                                       | An integrated desktop environment created to make it easy to work with R, Python, and other data-science programming tools.                                                                                   |\n| Quarto      | ![](https://quarto.org/quarto.png){width=\"80\" height=\"20\" fig-alt=\"Quarto logo\"}                                                                                 | A document creation system based on pandoc. Quarto allows you to include code, results, and pictures generated from data within a document so that they automatically update when the document is recompiled. |\n| Git         | ![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/1920px-Git-logo.svg.png){width=\"80\" height=\"33\" fig-alt=\"git logo\"}                | A version control system used to track changes to files.                                                                                                                                                      |\n| GitHub      | ![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/GitHub_Invertocat_Logo.svg/800px-GitHub_Invertocat_Logo.svg.png){width=\"80\" fig-alt=\"GitHub logo\"} | An online collaboration platform based on git that makes it easy to back up, share, and collaborate on programming projects.                                                                                  |\n\n: What each program does, in general terms\n\n## Why do I need to install this stuff?\n\n- R is good for data wrangling, statistical programming, modeling, and data visualization\n- Python is good for machine learning, deep learning, image processing, and web scraping\n- Quarto allows you to write R and python code, keeping code and documentation in the same document\n- git is helpful for tracking changes to code and data, and for collaborating\n\nWhile some parts of this book are fairly language-agnostic (R and python are both good languages for working with data), this setup is opinionated - the book focuses on a set of programs which are useful for doing statistical programming, including writing reports, keeping track of code, visualizing data, cleaning data, and getting set up for modeling data and producing results. \n\nIf you're just trying to learn R, perhaps you don't need to install python or quarto.\nIf you're not working with other people, maybe you don't need to install `git`. \nYou are welcome to make those decisions for yourself, but if you're not sure, you might just want to install the whole toolbox - you'll hopefully learn how to use all of the tools along the way, and it'll be less confusing later if you already have access to all of the tools and don't need to go back and get something else when you need it.\n\n## Installation Process\n\nIn this section, I will provide you with links to set up various programs on your own machine.\nIf you have trouble with these instructions or encounter an error, post on the class message board or contact me for help.\n\n1.  Install R (and associated tools)\n\n:::: setup\n\n### Install R {.unnumbered}\n\n::: panel-tabset\n\n#### {{< fa brands windows >}} Windows {.unnumbered}\n\n1. Get the R installer from CRAN: <https://cran.rstudio.com/bin/windows/base/>\n\n2. Install the Rtools4 package that matches the R version you installed: <https://cran.rstudio.com/bin/windows/Rtools/>    \nFor example, if you installed R 4.4.3, you should download RTools 4.4. If you installed R 4.0.1, you should install RTools 4.0. \n\n#### {{< fa brands apple >}} Mac {.unnumbered}\n\n1. Get the R installer from CRAN: <https://cran.rstudio.com/bin/macosx/>\n\n2. Install XCode - a set of developer tools - so that you can install R packages more easily. There are two ways to do this:\n\n  a. Get XCode [from the App store directly](https://apps.apple.com/us/app/xcode/id497799835?mt=12) (simple, but you may have to do other things later)\n  b. Install [Homebrew](https://brew.sh/) and then use homebrew to install XCode.^[If you prefer a different package manager, that's fine - Homebrew is widely used, but there are other options. Ultimately, you just need to have XCode so that you can compile R packages.] \n  \nI personally suggest option b, because Homebrew is used for a lot of different software-development related things, and having it will make life easier later. \n\n---\n\n##### Installing Homebrew + XCode {-}\n\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n```\nbrew install mas # Search the apple store\nmas search xcode # find xcode\nmas install 497799835 # install the program by ID\n```\n  \n\n#### {{< fa brands linux >}} Linux  {.unnumbered}\n\nIf you're using a distribution like Debian, Fedora, RedHat, or Ubuntu, or a distribution derived from one of these distributions, follow the instructions below.\n\nIf you don't know your distribution (or if you're working on a derivative distribution, like Mint), you can figure out which set of instructions to follow by executing `lsb_release -a` in your system terminal.\n\nIf you're using Arch or another distribution that isn't derived from something listed above, google for instructions specific to your distribution - these instructions cover the most common, user-friendly distributions, but if you've chosen something more niche, it is assumed you can figure out how to install R. (If that isn't the case, leave a comment below with your distribution, so I know how best to update this book.)\n\n---\n\n##### Installation Instructions {-}\n\n1. Get the R installer from CRAN: <https://cran.rstudio.com/bin/linux/> -  pick your distribution, and follow the distribution-specific instructions from there. \n\n\nYou could install R using your package manager, but often this version is out of date. The instructions for each version will get you a more up-to-date version that will be easier to work with.\n\n:::\n\n::::\n\n\n2.  Download and install the latest version of [python 3](https://www.python.org/downloads/)\n\n:::: setup\n\n\n#### Extra Instructions to Setup Python on  {{< fa brands windows >}} Windows {-}\n\n**check the box that asks if you want to add Python to the system path.**    \nThis will save you a *lot* of time and frustration. \nIf you didn't do this, you can follow [these instructions](https://www.geeksforgeeks.org/how-to-add-python-to-windows-path/) to fix the issue (you'll need to restart your machine).\n\n::::\n\n:::: learnmore\n\n-   If you're interested in python, you should install Jupyter using the instructions [here](https://jupyter.org/install) (I would just do `pip3 install jupyterlab`)\\\n    We will not use jupyter much in this book - I prefer quarto - but the python community has decided to distribute code primarily in jupyter notebooks, so having it on your machine may be useful so that you can run other people's code.\n\n-   [Additional instructions for installing Python 3](https://www.py4e.com/lessons/install) from Python for Everybody if you have trouble.\n\n::::\n\n\n\n3.  Download and install the [latest version of RStudio](https://posit.co/download/rstudio-desktop/#download) for your operating system.\n    RStudio is a integrated development environment (IDE) for R, created by Posit.\n    It contains a set of tools designed to make writing R, python, javascript, and other data-related code easier.\n\n4.  Download and install the [latest version of Quarto](https://quarto.org/#getting-started) for your operating system.\n    Quarto is a command-line tool released by Posit that allows you to create documents using R or python, combining code, results, and written text.\n\nThe following steps may be helpful or required for your class.\nIf you want to be safe, go ahead and complete these steps as well.\n\n5.  Install git using the instructions [here](https://happygitwithr.com/install-git.html).\n    Consult the [troubleshooting guide](https://happygitwithr.com/troubleshooting.html) if you have issues.\n    If that fails, then seek help in office hours.    \n    \n    We will configure git later, in @sec-git. For now, let's just get it installed. \n\n6.  Install LaTeX, rmarkdown, and quarto\n\n\n:::: setup\n\n#### Set Up Document Processing Software {.unnumbered}\n\n-   Launch R, and type the following commands into the console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tinytex\", \"knitr\", \"rmarkdown\", \"quarto\"))\nlibrary(tinytex)\ninstall_tinytex()\n```\n:::\n\n\n\n\n\nIf you have an existing installation of LaTeX, using tinytex or another installer, I highly recommend that you uninstall LaTeX before re-installing the most recent version. \n\n- Configure RStudio to use the tinytex installation of LaTeX: \n    - Go to Tools -> Global Options -> Sweave    \n    ![A view of the RStudio Sweave configuration pane, with settings for PDF generation and LaTeX editing as recommended for this textbook's instructions.](../images/tools/Rstudio-sweave-config.png){fig-alt=\"The RStudio configuration pane for Sweave. The PDF generation options are as follows: Weave Rnw files using `knitr`, Typeset LaTeX into PDF using `XeLaTeX` (for font compatibility and modern rendering). The LaTeX editing and compilation options are a set of checkboxes; the two checked options are use tinytex when compiling .tex files, and Clean auxiliary output after compile. The PDF preview options can be set as you desire and are highly operating-system dependent.\"}\n\n\n::::\n\n\n::: example\n### Your turn: Exploring (and configuring) RStudio {.unnumbered}\n\nOpen RStudio on your computer and explore a bit.\n\n-   Can you find the R console? Type in `2+2` to make sure the result is `4`.\n-   Run the following code in the R console to set up some basic packages:\n\n``` r\ninstall.packages(c(\"tidyverse\", \"rmarkdown\", \"knitr\", \"quarto\"))\n```\n\n-   Run the following code in the R console to set up Python:\n\n``` r\ninstall.packages(\"reticulate\")\nreticulate::virtualenv_create(\"stat-python\") # Create a python environment\nreticulate::virtualenv_install(\"stat-python\", c(\"numpy\", \"matplotlib\", \"pandas\"))\n```\n\n-   Configure RStudio to use the python virtual environment you created:\n    -   Go to Tools -> Global Options -> Python\n    -   Click the Python interpreter Select button\n    -   Click Virtual Environments\n    -   Choose `stat-python` and hit \"Select\"\n    -   Restart RStudio when prompted to ensure the setting takes effect.\n\n-   Test out Python:\n    - Go to the Console tab, and click on the R logo. A dropdown should be present with an option to select Python. \n    - Wait for the Python prompt to appear (it will look like this: `>>>`)\n    - Type `2 + 2`, hit enter, and make sure the result is `4`. \n\n-   Can you find the text editor?\n    -   Create a new quarto document (File -\\> New File -\\> Quarto Document).\n    -   Select a blank quarto document (bottom of the pop-up window)\n    -   Change the text editor to Source mode (it will default to visual mode). This makes it possible to paste a quarto document without Visual mode trying to \"fix\" the markup characters. \n    -   Paste in the contents of [this document](../files/getting-started-r-python.qmd).\n    -   Compile the document (Ctrl/Cmd + Shift + K) and use the Viewer pane to see the result.\n\n-   If this all worked, you have RStudio, Quarto, R, and Python set up correctly on your machine.\n:::\n",
    "supporting": [
      "02-setting-up-computer_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}