{
  "hash": "e3e7c441902f01f84692629760f41165",
  "result": {
    "engine": "knitr",
    "markdown": "# Version Control with Git {#sec-git}\n\nThere is an entire textbook on how to use git and GitHub with R, Happy Git and Github for the UseR @bryanHappyGitGitHub2021. This chapter will liberally use chunks of that textbook, and rather than reproduce them here, I will simply link to the relevant sections.\n\n## Objectives {-}\n\n- Install git\n- Create a github account\n- Understand why version control is useful and what problems it can solve\n- Understand the distinction between git and github, and what each is used for\n- Use version control to track changes to a document (git add, commit, push, pull)\n\n## What is Version Control ?\n\n::: {.callout-note}\nMost of this section is either heavily inspired by Happy Git and Github for the UseR [@bryanHappyGitGitHub2021] or directly links to that book. \nThere's no sense trying to repeat something that's pretty close to perfect. \n:::\n\nGit is a **version control system** - a structured way for tracking changes to files over the course of a project that may also make it easy to have multiple people working on the same files at the same time. \n\n![Version control is a good solution to the file naming problem. [Image Source](https://phdcomics.com/comics/archive.php?comicid=1531) \"Piled Higher and Deeper\" by Jorge Cham\nwww.phdcomics.com](../images/tools/final.png){width=\"50%\" fig-alt=\"A student sits at a computer with fist in the air, with the caption 'FINAL.doc!'. In the next pane, a professor takes a pen to the paper while the student watches. The third pane features the student frantically typing, with the caption 'FINAL_Rev-2.doc'. The fourth pane features the professor annotating a printout with the caption 'Final_Rev-6_Comments.doc'. The fifth pane features the student frantically typing again. The sixth pane features the professor annotating, with the caption 'FINAL_Rev-8_comments-5_CORRECTIONS.doc'. The seventh pane features the student using track changes with the caption 'FINAL_Rev-18_comments-7_Corrections-9_More-30.doc'. The eighth pane features just the professor's head and red pen, and the ninth pane features the student banging their head on the monitor, with the caption 'FINAL_Rev-22_Comments-49_Corrections-10_#@$%-Why-Did-I-Come-To-Grad-School???.doc'\"}\n\nGit manages a collection of files in a structured way - rather like \"track changes\" in Microsoft Word or version history in Dropbox, but much more powerful, because the entire version history is (easily^[relatively speaking]) retrievable^[With exceptions -- there are ways to suppress the ability to see every commit ever made to a git repository using tools like `git squash`, and these tools are useful in cases where you want to simplify the repository's structure.].\n\nIf you are working alone, you will benefit from adopting version control because it will remove the need to add `_final.R` or `_production.py` to the end of your file names. \nHowever, most of us work in collaboration with other people (or will have to work with others eventually), so one of the goals of this book is to teach you how to use git because it is a useful tool that will make you a better collaborator. \n\nIn data science programming, we use git for a similar, but slightly different purpose. \nWe use it to keep track of changes not only to code files, but to data files, figures, reports, and other essential bits of information. \n\nGit itself is nice enough, but where git really becomes amazing is when you combine it with a service like GitHub (or self-hosted options, like GitLab or Gogs) - an online service that makes it easy to use git across many computers, share information with collaborators, publish to the web, and more. \nGit is great, but services like GitHub which enable collaboration are indispensable for modern statistical computing and open-source software development. \n\n\n### Git Basics\n\n![If that doesn't fix it, git.txt contains the phone number of a friend of mine who understands git. Just wait through a few minutes of 'It's really pretty simple, just think of branches as...' and eventually you'll learn the commands that will fix everything. Image by Randall Munroe (XKCD) CC-A-NC-2.5.](../images/tools/git.png){fig-alt=\"Person 1: 'This is GIT. It tracks collaborative work on projects through a beautiful distributed graph theory tree model'. Person 2: 'Cool, How do we use it?' Person 1: 'No Idea. Just memorize these shell commands and type them to sync up. If you get errors, save your work elsewhere, delete the project, and download a fresh copy.'\"}\n\n\nGit tracks changes to each file that it is told to monitor, and as the files change, you provide short labels describing what the changes were and why they exist (called \"**commits**\"). \nThe log of these changes (along with the file history) is called your **git commit history**. \n\nWhen writing papers, this means you can cut material out freely, so long as the paper is being tracked by git - you can always go back and get that paragraph you cut out (if you need to).\nYou also don't have to rename files with different version numbers - you can confidently save over your old files, so long as you remember to commit frequently. \nThere is even a way to \"tag\" certain commits with versions, so that you can keep track of which version of the paper was e.g. submitted to the journal, and can revisit that when you make revisions to show what revisions were made. \n\n::: {.callout-important}\n### Essential Reading: Git\nThe git material in this chapter is just going to link directly to the book \"Happy Git with R\" by Jenny Bryan. \nIt's amazing, amusing, and generally well written. \nI'm not going to try to do better. \n\n[Go read Chapter 1, if you haven't already.](https://happygitwithr.com/big-picture.html)\n:::\n\nNow that you have a general idea of how git works and why we might use it, let's talk a bit about GitHub.\n\n\n## Using Version Control (with RStudio)\n\nThe first skill you need to practice is using version control. \nBy using version control from the very beginning, you will learn better habits for programming, but you'll also get access to a platform for collaboration, hosting your work online, keeping track of features and necessary changes, and more. \n\n<!-- ::: {.callout-advanced collapse=\"true\"} -->\n<!-- ### Github Classroom -->\n<!-- I will be using github classroom to run this class. When you go to do your homework assignment, you'll have to complete the following steps: -->\n\n<!-- 1. Clone the template repository for the assignment. -->\n<!-- 2. Read the assignment instructions in the template repository. Complete the assignment, ensuring that you write fully reproducible code that can be run on any machine. -->\n<!-- 3. Commit your changes to the assignment to the local git repository on your computer -->\n<!-- 4. Push your changes from your local machine to GitHub -->\n<!-- 5. Submit a link to the GitHub repository so that I can grade your assignment. -->\n\n<!-- GitHub Classroom is FERPA compliant, which means that your repositories from this class won't show up under your user (because class enrollment is protected information). -->\n\n<!-- This workflow means that if you push your changes to GitHub but something isn't working, I can easily see what you've done so far and help you fix any errors that show up. You don't have to email me with a vague error message and then respond to my confused emails 10x as we narrow in on the problem - I can usually just find the problem in your file directly. This saves a lot of time! -->\n\n<!-- ::: -->\n\n\nSo, what does your typical git/GitHub workflow look like? \nI'll go through this in (roughly) chronological order. \nThis is based off of a relatively high-level understanding of git - I do not have any idea how it works under the hood, but I'm pretty comfortable with the clone/push/pull/commit/add workflows, and I've used a few of the more complicated features (branches, pull requests) on occasion. \n\n\n::: callout-warning\n#### Magic? {-}\nThe MOST IMPORTANT thing to know about git, other than what it does, is that most people who use it have *no* idea how it works (and that's ok)!\nSo if this all seems like arcane magic to you, you're in good company. \n:::\n\n### Introduce yourself to `git` and Authenticate\n\nMake sure you've completed the steps in  @sec-setting-up-github before you proceed. \n\n\n### Create a Repository\n\n**Repositories** are single-project containers. You may have code, documentation, data, TODO lists, and more associated with a project. If you combine a git repository with an RStudio project, you get a very powerful combination that will make your life much easier, allowing you to focus on writing code instead of figuring out where all of your files are for each different project you start.\n\nTo create a repository, you can start with your local computer first, or you can start with the online repository first. \nBoth methods are relatively simple, but the options you choose depend on which method you're using, so be careful to pick one approach (and remember which one you picked!) for each new project. \n\n::: panel-tabset\n\n#### Local repository first\n\nLet's suppose you already have a folder on your machine named `hello-world-1` (you may want to create this folder now). You've created a starter document, say, a text file named README with \"hello world\" written in it. \n\nIf you want, you can use the following R code to set this up:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir <- \"./hello-world-1\"\nif (!dir.exists(dir)) {\n  dir.create(dir)\n}\nfile <- file.path(dir, \"README\")\nif (!file.exists(file)) {\n  writeLines(\"hello world\", con = file)\n}\n```\n:::\n\n\n\n\nTo create a local git repository, we can go to the terminal (in Mac/Linux) or the git bash shell (in Windows), navigate to our repository folder (not shown, will be different on each computer), and type in \n\n```\ngit init\n```\n\nAlternately, if you prefer a GUI (graphical user interface) approach, that will work too:\n\n1. Open Rstudio\n2. Project (upper right corner) -> New Project -> Existing Directory. Navigate to the directory.\n3. (In your new project) Tools -> Project options -> Git/SVN -> select git from the dropdown, initialize new repository. RStudio will  need to restart.\n4. Navigate to your new Git tab on the top right.\n\n::: youtube-video-container\n<iframe width=\"1048\" height=\"590\" src=\"https://www.youtube.com/embed/uPcQkWi0lGg\" title=\"Create a local git repository first (Repository creation)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n:::\n\nThe next step is to add our file to the repository. \n\nUsing the command line, you can type in `git add README` (this tells git to track the file) and then commit your changes (enter them into the record) using `git commit -m \"Add readme file\"`.\n\nUsing the GUI, you navigate to the git pane, check the box next to the README file, click the Commit button, write a message (\"Add readme file\"), and click the commit button. \n\n::: youtube-video-container\n<iframe width=\"1048\" height=\"590\" src=\"https://www.youtube.com/embed/9wHd8BuPsBQ\" title=\"Create a local repository first (add a file)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n:::\n\nThe final step is to create a corresponding repository on GitHub.\n\n1. Navigate to your GitHub profile and make sure you're logged in. \n2. Create a new repository using the \"New\" button. \n3. Name your  repository whatever you want, fill in the description if you want (this can help you later, if you forget what exactly a certain repo was *for*), and DO NOT add a README, license file, or anything else (if you do, this will quickly become much harder). \n\nYou'll be taken to your empty repository, and git will provide you the lines to paste into your git shell (or terminal) -- you can access this within RStudio, as shown below. Paste those lines in, and you'll be good to go.\n\n::: callout-tip\n\nRemember to use the method (HTTPS/SSH) that matches the method you set up for authentication.\n\n:::\n\n::: youtube-video-container\n<iframe width=\"1048\" height=\"590\" src=\"https://www.youtube.com/embed/eHNw2w2sunc\" title=\"Create a local repository first (push the local repo to Github)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n:::\n\n####  GitHub repository first\n\nIn the GitHub-first method, you'll create a repository in GitHub and then clone it to your local machine (clone = create an exact copy locally). \n\nGUI method:\n\n1. Log into GitHub and create a new repository\n2. Initialize your repository with a README\n3. Copy the repository location by clicking on the \"Code\" button on the repo homepage (remember to use the correct protocol - HTTPS or SSH - depending on the authentication method you set up earlier)\n4. Open RStudio -> Project -> New Project -> From version control. Paste your repository URL into the box. Hit enter.\n5. Make a change to the README file\n6. Click commit, then push your changes\n7. Check that the remote repository (Github) updated\n\n::: youtube-video-container\n<iframe width=\"1048\" height=\"590\" src=\"https://www.youtube.com/embed/xIBBiXMV1Ag\" title=\"Create the github repository first, using RStudio as a git interface\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n:::\n\nCommand line method:\n\n1. Log into GitHub and create a new repository\n2. Initialize your repository with a README\n3. Copy the repository location by clicking on the \"Code\" button on the repo homepage\n4. Navigate to the location you want your repository to live on your machine.\n5. Clone the repository by using the git shell or terminal: `git clone <your repo url here>`. In my case, this looks like `git clone git@github.com:stat850-unl/hello-world-2.git`\n6. Make a change to your README file and save the change\n7. Commit your changes: `git commit -a -m \"change readme\"` (-a = all, that is, any  changed file git is already tracking).\n8. Push your changes to the remote (GitHub) repository and check that the repo has updated: `git push`\n\n::: youtube-video-container\n<iframe width=\"1048\" height=\"590\" src=\"https://www.youtube.com/embed/y4cpJ_VaRMg\" title=\"Create the github repository first, using the command line to work with git\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n:::\n\n:::\n\n### Adding files\n\n`git add` tells git that you want it to track a particular file. \n\n![git add  diagram: add tells git to add the file to the index of files git monitors.](../images/tools/git-add.png){width=\"50%\"}\n\nYou don't need to understand exactly what git is doing on the backend, but it is important to know that the actual **contents** of the file aren't logged by `git add` - you have to **commit** your changes for the contents to change. \n`git add` deals solely with the index of files that git \"knows about\", and what it thinks belongs in each commit. \n\nIf you use the RStudio GUI for your git interface, you generally won't have to do much with git add; it's (approximately) equivalent to clicking the check box^[Technically, the check box is referred to as 'staging' your files, however, to accomplish the same thing at the command line, I usually use `git add`. From a user-level perspective, it's equivalent, though I'm sure there's probably a difference somewhere under the hood.].\n\n#### What files should I add to git?\n\nGit is built for tracking text files. \nIt  will (begrudgingly) deal with small binary files (e.g. images, PDFs) without complaining too much, but it is NOT meant for storing large files, and GitHub will not allow you to push anything that has a file larger than 100MB^[Yes, I'm seriously pushing it with this book; several of the datasets are ~30 MB].\nLarger files can be handled with git-lfs (large file storage), but storing large files online is not something GitHub provides for free.\n\nYou should **only add a file to git if you created it by hand**. \nIf you compiled the result, that should  not be in the git repository under normal conditions^[There are exceptions to this rule -- this book is hosted on GitHub, which means I've pushed the compiled book to the GitHub repository]. \n\nYou should also be  cautious about adding files like .Rprog, .directory, .DS_Store, etc. \nThese files are used by your operating system or by RStudio, and pushing them may cause problems for your collaborators (if you're collaborating).\nTracking changes to  these files also doesn't really do much good.\nThis is why I recommend that you run `usethis::git_vaccinate()`, which tells git to ignore these files for every repository on a machine.\n\n\n**While you are learning, you should only add and commit files which you created manually and consciously want to track.**\nYou do not need to commit both a quarto `.qmd` file and the `.html` file it generates -- keeping only the quarto file is enough. \nYou *do* need to make sure to commit any pictures or files referenced in the files you create, though (as long as they're relatively small in size and not confidential), because otherwise, your project won't be self-contained. \n\n### Staging your changes\n\nIn RStudio,  when you check a box next to the file name in the git tab, you are effectively adding the file (if it is not already added) AND staging all of the changes you've made to the file. \nIn practice, the shell command `git add` will both add and stage all of the changes to any given file, but it is also useful in some cases to stage only certain lines from a file.\n\nMore formally, **staging** is saying \"I'd like these changes to be added to the current version, I think\". \nBefore you **commit** your changes, you have to first **stage** them. \nYou can think of this like going to the grocery store: you have items in your cart, but you can put them back at any point before checkout. \nStaging changes is like adding items to your cart; committing those changes is like checking out.\n\nIndividually staging lines of a file is most useful in situations where you've made changes which should be part of multiple commits. \nTo stage individual lines of a file, you can use `git add -i` at the command line, or you can attempt to use RStudio's \"stage selection\" interface. \nBoth  will work, though git can't always separate changes quite as finely as you might want (and as a result, RStudio's interface sometimes seems  unresponsive, even though the underlying issue is with what git can do).\n\n\n\n### Committing your changes\n\nA git **commit** is the equivalent of a log entry - it tells git to record the state of the file, along with a message about what that state means. \nOn the back end, git will save a copy of the file in its current state to its cache. \n\n![Here, we commit the red line as a change to our file.](../images/tools/git-commit.png){width=\"50%\"}\n\nIn general, you want your commit message to be relatively short, but also informative. \nThe best way to do this is to commit **small** blocks of changes.\nWork to commit  every time you've accomplished a small task. This will do two things: \n\n1. You'll have small, bite-sized changes that are briefly described  to serve as a record of what you've done (and what still needs doing)\n2. When you mess up (or end up in a merge conflict) you will have a much easier time pinpointing the spot where things went bad, what code was there before, and (because you have nice, descriptive commit messages) how the error occurred.\n\n### Pushing and Pulling\n\nWhen you're working alone, you generally won't need to worry about having to update your local copy of the repository (unless you're using multiple machines). \nHowever, statistics  is collaborative, and one of the most powerful parts of git is that you can use it to keep track of changes when multiple people are working on the same document. \n\n::: callout-caution\nIf you are working collaboratively and you and your collaborator are working on the same file, git will be able to resolve the change you make SO LONG AS YOU'RE NOT EDITING THE SAME LINE. \nGit works based on lines of text - it detects when there is a change in any line of a text document.\n\nFor this reason, I find it makes my life easier to put each sentence on a separate line, so that I can tweak things with fewer merge conflicts. \nMerge conflicts aren't a huge deal, but they slow the workflow down, and are best avoided where possible. \nIn both quarto and LaTeX, a single line break isn't seen as a new paragraph, so this convention doesn't affect the rendered document at all, and it makes dealing with version control *much* easier. \n:::\n\n**Pulling** describes the process of updating your local copy of the repository (the copy on your computer) with the files that are \"in the cloud\" (on GitHub). \n`git pull` (or using the Pull button in RStudio) will perform this update for you. \nIf you are working with collaborators in real time, it is good practice to pull, commit, and push often, because  this vastly reduces the merge conflict potential (and the scope of any conflicts that do pop up). \n\n**Pushing** describes the process of updating the copy of the repository on another machine (e.g. on GitHub) so that it has the most recent changes you've made to your machine. \n\n\n::: {#fig-git-push-pull layout-ncol=2}\n![git push copies the version of the project on your computer to GitHub](../images/tools/git_push_diagram.png)\n\n![git pull copies the version of the project on GitHub to your computer](../images/tools/git_pull_diagram.png)\n\nGit push and git pull are used to sync your computer with the remote repository (usually hosted on GitHub)\n:::\n\n\nIn general, your workflow will be \n\n1. Clone the project or create a new repository\n2. Make some changes\n3. Stage the changes with git add\n4. Commit the changes with git commit\n5. Pull any changes from the remote repository\n6. Resolve any merge conflicts\n7. Push the changes (and merged files) with git push\n\nIf you're working alone, steps 5 and 6 are not likely to be necessary, but it is good practice to just pull before you push anyways.\n\n## References\n",
    "supporting": [
      "05-git-and-github_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}