{
  "hash": "557583e483970ccafbc7cbeb778ee9fd",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Input {#sec-data-input}\n\n## Objectives {-}\n\n- Read in data from common formats into R or Python\n- Identify delimiters, headers, and other essential components of files\n\n::: callout-note\n### Cheatsheets!\nThese may be worth printing off as you work through this module.\n\n- [R - tidyverse](https://github.com/rstudio/cheatsheets/raw/main/data-import.pdf) \n- [Python](https://images.datacamp.com/image/upload/v1694526244/Marketing/Blog/Python_Basics_Cheat_Sheet-updated.pdf)\n\n:::\n\n## Overview: Data Formats\n\nIn order to use statistical software to do anything interesting, we need to be able to get data into the program so that we can work with it effectively. \nFor the moment, we'll focus on tabular data - data that is stored in a rectangular shape, with rows indicating observations and columns that show variables. \nThis type of data can be stored on the computer in multiple ways:\n\n- **as raw text**, usually in a file that ends with .txt, .tsv, .csv, .dat, or sometimes, there will be no file extension at all. These types of files are human-readable. If part of a text file gets corrupted, the rest of the file may be recoverable. \n\n- **as a binary file**. Binary files are compressed files that are readable by computers but not by humans. They generally take less space to store on disk (but the same amount of space when read into computer memory). If part of a binary file is corrupted, the entire file is usually affected.\n  - R, SAS, Stata, SPSS, and Minitab all have their own formats for storing binary data. Packages such as `foreign` in R will let you read data from other programs, and packages such as `haven` in R will let you write data into binary formats used by other programs. \n  - @betterexplainedLittleDiddyBinary2017 describes why binary file formats exist, and why they're not necessarily optimal.\n\n- **in a spreadsheet**. Spreadsheets, such as those created by MS Excel, Google Sheets, or LibreOffice Calc, are not binary formats, but they're also not raw text files either.\nThey're a hybrid - a special type of markup that is specific to the filetype and the program it's designed to work with. \nPractically, they may function like a poorly laid-out database, a text file, or a total nightmare, depending on who designed the spreadsheet.     \n\n::: callout-note\nThere is a collection of spreadsheet horror stories [here](https://github.com/jennybc/scary-excel-stories) and a series of even more horrifying tweets [here](https://twitter.com/JennyBryan/status/722954354198597632).    \nAlso, there's this amazing comic:    \n[![Created by Randall Munroe, xkcd.com. CC-by-A-NC-2.5](../images/gen-prog/algorithms.png)](https://xkcd.com/1667/)\n:::\n\n- **in a database**. Databases are typically composed of a set of one or more tables, with information that may be related across tables. Data stored in a database may be easier to access, and may not require that the entire data set be stored in computer memory at the same time, but you may have to join several tables together to get the full set of data you want to work with. \n\nThere are, of course, many other non-tabular data formats -- some open and easy to work with, some inpenetrable. A few which you may come across:\n\n- **Web data structures**: XML (eXtensible markup language), JSON (JavaScript Object Notation), YAML. These structures have their own formats and field delimiters, but more importantly, are not necessarily easily converted to tabular structures. \nThey are, however, useful for handling nested objects, such as trees. When read into R or SAS, these file formats are usually treated as lists, and may be restructured afterwards into a format useful for statistical analysis. \nSee @sec-lists for some tools to work with these files.\n\n- **Spatial files**: Shapefiles are the most common version of spatial files, though there are a seemingly infinite number of different formats, and new formats pop up at the most inconvenient times. \nSpatial files often include structured encodings of geographic information plus corresponding tabular format data that goes with the geographic information. \n<!-- @sec-spatial covers some of the tools available for working with spatial data. -->\n\nTo be minimally functional in R and Python, it's important to know how to read in text files (CSV, tab-delimited, etc.). \nIt can be helpful to also know how to read in XLSX files. \nWe will briefly discuss binary files and databases, but it is less critical to remember how to read these in without consulting an online reference. \n\n\n## Text Files\n\nThere are several different variants of text data which are relatively common, but for the most part, text data files can be broken down into fixed-width and delimited formats. \nWhat's the difference, you say?\n\n### Fixed-width files\n\n```\nCol1    Col2    Col3\n 3.4     4.2     5.4\n27.3    -2.4    15.9\n```\n\nIn a fixed-width text file, the position of the data indicates which field (variable/column) it belongs to. \nThese files are fairly common outputs from older FORTRAN-based programs, but may be found elsewhere as well - if you have a very large amount of data, a fixed-width format may be more efficient to read, because you can select only the portions of the file which matter for a particular analysis (and so you don't have to read the whole thing into memory). \n\n::: callout-demo\n#### Fixed Width File IO\n::: panel-tabset\n\n##### Base R {.unnumbered}\n\nIn base R (no extra packages), you can read fixed-width files in using `read.fwf`, but you must specify the column breaks yourself, which can be painful.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.mesonet.org/index.php/dataMdfMts/dataController/getFile/202206070000/mdf/TEXT/\"\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.fwf(url, \n         skip = 3, # Skip the first 2 lines (useless) + header line\n         widths = c(5, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 8, 9, 6, 7, 7, 7, 7, 7, 7, \n7, 8, 8, 8)) # There is a row with the column names specified\n\ndata[1:6,] # first 6 rows\n##      V1  V2 V3 V4   V5  V6  V7  V8   V9 V10 V11   V12    V13 V14  V15 V16  V17\n## 1  ACME 110  0 60 29.9 4.4 4.3 111  9.0 0.8 6.4  0.00 959.37 267 29.6 3.6 25.4\n## 2  ADAX   1  0 69 29.3 1.7 1.6  98 24.9 0.6 3.4  0.00 971.26 251 29.0 0.6 24.6\n## 3  ALTU   2  0 52 31.7 5.5 5.4  89  7.6 1.0 7.8  0.00 956.12 287 31.3 3.5 26.5\n## 4  ALV2 116  0 57 30.1 2.5 2.4 108 10.3 0.5 3.6 55.63 954.01 266 30.1 1.7 23.3\n## 5  ANT2 135  0 75 29.1 1.1 1.1  44 21.1 0.3 2.0  0.00 985.35 121 28.9 0.5 25.9\n## 6  APAC 111  0 58 29.9 5.1 5.1 107  8.5 0.7 6.6  0.00 954.47 224 29.7 3.6 26.2\n##    V18  V19  V20    V21  V22  V23     V24\n## 1 29.4 27.4 22.5   20.6 1.55 1.48    1.40\n## 2 28.7 25.6 24.3 -998.0 1.46 1.52 -998.00\n## 3 32.1 27.6 24.0 -998.0 1.72 1.50 -998.00\n## 4 30.3 26.2 21.1 -998.0 1.49 1.40 -998.00\n## 5 29.0 26.3 22.8   21.4 1.51 1.39    1.41\n## 6 29.1 26.6 24.3   20.5 1.59 1.47    1.40\n```\n:::\n\n\n\n\nYou can count all of those spaces by hand (not shown), you can use a different function, or you can write code to do it for you. \n\n::: {.callout-warning collapse=true}\n##### Code for counting field width {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I like to cheat a bit....\n# Read the first few lines in\ntmp <- readLines(url, n = 20)[-c(1:2)]\n\n# split each line into a series of single characters\ntmp_chars <- strsplit(tmp, '') \n\n# Bind the lines together into a character matrix\n# do.call applies a function to an entire list - so instead of doing 18 rbinds, \n# one command will put all 18 rows together\ntmp_chars <- do.call(\"rbind\", tmp_chars) # (it's ok if you don't get this line)\n\n# Make into a logical matrix where T = space, F = not space\ntmp_chars_space <- tmp_chars == \" \"\n\n# Add up the number of rows where there is a non-space character\n# space columns would have 0s/FALSE\ntmp_space <- colSums(!tmp_chars_space)\n\n# We need a nonzero column followed by a zero column\nbreaks <- which(tmp_space != 0 & c(tmp_space[-1], 0) == 0)\n\n# Then, we need to get the widths between the columns\nwidths <- diff(c(0, breaks))\n\n# Now we're ready to go\nmesodata <- read.fwf(url, skip = 3, widths = widths, header = F)\n# read header separately - if you use header = T, it errors for some reason.\n# It's easier just to work around the error than to fix it :)\nmesodata_names <- read.fwf(url, skip = 2, n = 1, widths = widths, header = F, \n                           stringsAsFactors = F)\nnames(mesodata) <- as.character(mesodata_names)\n\nmesodata[1:6,] # first 6 rows\n##    STID   STNM   TIME    RELH    TAIR    WSPD    WVEC   WDIR    WDSD    WSSD\n## 1  ACME    110      0      60    29.9     4.4     4.3    111     9.0     0.8\n## 2  ADAX      1      0      69    29.3     1.7     1.6     98    24.9     0.6\n## 3  ALTU      2      0      52    31.7     5.5     5.4     89     7.6     1.0\n## 4  ALV2    116      0      57    30.1     2.5     2.4    108    10.3     0.5\n## 5  ANT2    135      0      75    29.1     1.1     1.1     44    21.1     0.3\n## 6  APAC    111      0      58    29.9     5.1     5.1    107     8.5     0.7\n##      WMAX     RAIN      PRES   SRAD    TA9M    WS2M    TS10    TB10    TS05\n## 1     6.4     0.00    959.37    267    29.6     3.6    25.4    29.4    27.4\n## 2     3.4     0.00    971.26    251    29.0     0.6    24.6    28.7    25.6\n## 3     7.8     0.00    956.12    287    31.3     3.5    26.5    32.1    27.6\n## 4     3.6    55.63    954.01    266    30.1     1.7    23.3    30.3    26.2\n## 5     2.0     0.00    985.35    121    28.9     0.5    25.9    29.0    26.3\n## 6     6.6     0.00    954.47    224    29.7     3.6    26.2    29.1    26.6\n##      TS25    TS60     TR05     TR25     TR60\n## 1    22.5    20.6     1.55     1.48     1.40\n## 2    24.3  -998.0     1.46     1.52  -998.00\n## 3    24.0  -998.0     1.72     1.50  -998.00\n## 4    21.1  -998.0     1.49     1.40  -998.00\n## 5    22.8    21.4     1.51     1.39     1.41\n## 6    24.3    20.5     1.59     1.47     1.40\n```\n:::\n\n\n\n\n:::\n\nYou can also write fixed-width files if you *really* want to:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"gdata\" %in% installed.packages()) install.packages(\"gdata\")\nlibrary(gdata)\nwrite.fwf(mtcars, file = tempfile())\n```\n:::\n\n\n\n\n##### `readr` {-}\n\nThe `readr` package creates data-frame like objects called tibbles (a souped-up data frame), but it is *much* friendlier to use. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr) # Better data importing in R\n\nread_table(url, skip = 2) # Gosh, that was much easier!\n## # A tibble: 120 × 24\n##    STID   STNM  TIME  RELH   TAIR  WSPD  WVEC  WDIR  WDSD  WSSD  WMAX  RAIN\n##    <chr> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n##  1 ACME    110     0    60   29.9   4.4   4.3   111   9     0.8   6.4   0  \n##  2 ADAX      1     0    69   29.3   1.7   1.6    98  24.9   0.6   3.4   0  \n##  3 ALTU      2     0    52   31.7   5.5   5.4    89   7.6   1     7.8   0  \n##  4 ALV2    116     0    57   30.1   2.5   2.4   108  10.3   0.5   3.6  55.6\n##  5 ANT2    135     0    75   29.1   1.1   1.1    44  21.1   0.3   2     0  \n##  6 APAC    111     0    58   29.9   5.1   5.1   107   8.5   0.7   6.6   0  \n##  7 ARD2    126     0    61   31.2   3.3   3.2   109   9.1   0.6   4.3   0  \n##  8 ARNE      6     0    49   30.4   4.5   4.4   111  11.1   0.9   6.4   0  \n##  9 BEAV      8     0    42   30.5   6.1   6     127   8.7   0.9   7.9   0  \n## 10 BESS      9     0    53 -999     5.3   5.2   115   8.6   0.6   7     0  \n## # ℹ 110 more rows\n## # ℹ 12 more variables: PRES <dbl>, SRAD <dbl>, TA9M <dbl>, WS2M <dbl>,\n## #   TS10 <dbl>, TB10 <dbl>, TS05 <dbl>, TS25 <dbl>, TS60 <dbl>, TR05 <dbl>,\n## #   TR25 <dbl>, TR60 <dbl>\n```\n:::\n\n\n\n\n##### Python {-}\n\nBy default, pandas' `read_fwf` will guess at the format of your fixed-width file. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nurl = \"https://www.mesonet.org/index.php/dataMdfMts/dataController/getFile/202006070000/mdf/TEXT/\"\ndata = pd.read_fwf(url, skiprows = 2) # Skip the first 2 lines (useless)\ndata.head()\n##    STID   STNM  TIME  RELH  TAIR  WSPD  ...  TS05  TS25   TS60  TR05  TR25    TR60\n## 0  ACME  110.0   0.0  53.0  31.8   5.2  ...  31.6  25.2   21.7  3.09  2.22    1.48\n## 1  ADAX    1.0   0.0  55.0  32.4   1.0  ...  29.6  26.8 -998.0  2.61  1.88 -998.00\n## 2  ALTU    2.0   0.0  31.0  35.6   8.9  ...  30.7  26.1 -998.0  3.39  2.47 -998.00\n## 3  ALV2  116.0   0.0  27.0  35.8   6.7  ...  25.6  22.6 -998.0  2.70  1.60 -998.00\n## 4  ANT2  135.0   0.0  73.0  27.8   0.0  ...  30.2  26.8   23.8  1.96  1.73    1.33\n## \n## [5 rows x 24 columns]\n```\n:::\n\n\n\n\n:::\n:::\n\n### Delimited Text Files\n\nDelimited text files are files where fields are separated by a specific character, such as space, comma, semicolon, tabs, etc. Often, delimited text files will have the column names as the first row in the file. \n\n::: callout-demo\n\n#### Comma Delimited Files\n\n::: panel-tabset\n\n##### Base R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/pokemon_gen_1-9.csv\"\n\npokemon_info <- read.csv(url, header = T, stringsAsFactors = F)\npokemon_info[1:6, 1:6] # Show only the first 6 lines & cols\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  gen pokedex_no\n1   1          1\n2   1          2\n3   1          3\n4   1          3\n5   1          4\n6   1          5\n                                                               img_link\n1     https://img.pokemondb.net/sprites/sword-shield/icon/bulbasaur.png\n2       https://img.pokemondb.net/sprites/sword-shield/icon/ivysaur.png\n3      https://img.pokemondb.net/sprites/sword-shield/icon/venusaur.png\n4 https://img.pokemondb.net/sprites/sword-shield/icon/venusaur-mega.png\n5    https://img.pokemondb.net/sprites/sword-shield/icon/charmander.png\n6    https://img.pokemondb.net/sprites/sword-shield/icon/charmeleon.png\n        name variant         type\n1  Bulbasaur    <NA> Grass,Poison\n2    Ivysaur    <NA> Grass,Poison\n3   Venusaur    <NA> Grass,Poison\n4   Venusaur    Mega Grass,Poison\n5 Charmander    <NA>         Fire\n6 Charmeleon    <NA>         Fire\n```\n\n\n:::\n:::\n\n\n\n\n##### `readr` {-}\n\nThere is a family of `read_xxx` functions in `readr` to read files delimited with commas (`read_csv`), tabs (`read_tsv`), or generic delimited files (`read_delim`).\n\nThe most common delimited text format is CSV: comma-separated value. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nurl <- \"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/pokemon_gen_1-9.csv\"\npokemon_info <- read_csv(url)\npokemon_info[1:6, 1:6] # Show only the first 6 lines & cols\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n    gen pokedex_no img_link                                  name  variant type \n  <dbl>      <dbl> <chr>                                     <chr> <chr>   <chr>\n1     1          1 https://img.pokemondb.net/sprites/sword-… Bulb… <NA>    Gras…\n2     1          2 https://img.pokemondb.net/sprites/sword-… Ivys… <NA>    Gras…\n3     1          3 https://img.pokemondb.net/sprites/sword-… Venu… <NA>    Gras…\n4     1          3 https://img.pokemondb.net/sprites/sword-… Venu… Mega    Gras…\n5     1          4 https://img.pokemondb.net/sprites/sword-… Char… <NA>    Fire \n6     1          5 https://img.pokemondb.net/sprites/sword-… Char… <NA>    Fire \n```\n\n\n:::\n:::\n\n\n\n\n\n##### Python {-}\n\nThere is a family of `read_xxx` functions in `pandas` including functions to read files delimited with commas (`read_csv`) as well as generic delimited files (`read_table`).\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\nurl <- \"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/pokemon_gen_1-9.csv\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTypeError: bad operand type for unary -: 'str'\n```\n\n\n:::\n\n```{.python .cell-code}\npokemon_info = pd.read_csv(url)\npokemon_info.iloc[:,2:51]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEmpty DataFrame\nColumns: []\nIndex: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n\n[123 rows x 0 columns]\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n:::\n\nSometimes, data is available in files that use other characters as delimiters. This can happen when commas are an important part of the data stored in the file, but can also just be a choice made by the person generating the file. Either way, we can't let it keep us from accessing the data.\n\n::: callout-demo\n\n#### Other Character Delimited Files\n\n::: panel-tabset\n\n##### Base R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download from web\ndownload.file(\"https://geonames.usgs.gov/docs/stategaz/NE_Features.zip\", destfile = '../data/NE_Features.zip')\n## Error in download.file(\"https://geonames.usgs.gov/docs/stategaz/NE_Features.zip\", : cannot open URL 'https://geonames.usgs.gov/docs/stategaz/NE_Features.zip'\n# Unzip to `data/` folder\nunzip('../data/NE_Features.zip', exdir = '../data/')\n# List files matching the file type and pick the first one\nfname <- list.files(\"../data/\", 'NE_Features_20', full.names = T)[1]\n\n# see that the file is delimited with |\nreadLines(fname, n = 5)\n## [1] \"FEATURE_ID|FEATURE_NAME|FEATURE_CLASS|STATE_ALPHA|STATE_NUMERIC|COUNTY_NAME|COUNTY_NUMERIC|PRIMARY_LAT_DMS|PRIM_LONG_DMS|PRIM_LAT_DEC|PRIM_LONG_DEC|SOURCE_LAT_DMS|SOURCE_LONG_DMS|SOURCE_LAT_DEC|SOURCE_LONG_DEC|ELEV_IN_M|ELEV_IN_FT|MAP_NAME|DATE_CREATED|DATE_EDITED\"\n## [2] \"171013|Peetz Table|Area|CO|08|Logan|075|405840N|1030332W|40.9777645|-103.0588116|||||1341|4400|Peetz|10/13/1978|\"                                                                                                                                                        \n## [3] \"171029|Sidney Draw|Valley|NE|31|Cheyenne|033|410816N|1030116W|41.1377213|-103.021044|405215N|1040353W|40.8709614|-104.0646558|1255|4117|Brownson|10/13/1978|03/08/2018\"                                                                                                  \n## [4] \"182687|Highline Canal|Canal|CO|08|Sedgwick|115|405810N|1023137W|40.9694351|-102.5268556|||||1119|3671|Sedgwick|10/13/1978|\"                                                                                                                                              \n## [5] \"182688|Cottonwood Creek|Stream|CO|08|Sedgwick|115|405511N|1023355W|40.9197132|-102.5651893|405850N|1030107W|40.9805426|-103.0185329|1095|3592|Sedgwick|10/13/1978|10/23/2009\"\n\n# a file delimited with |\nnebraska_locations <- read.delim(fname, sep = \"|\", header = T)\nnebraska_locations[1:6, 1:6]\n##   FEATURE_ID     FEATURE_NAME FEATURE_CLASS STATE_ALPHA STATE_NUMERIC\n## 1     171013      Peetz Table          Area          CO             8\n## 2     171029      Sidney Draw        Valley          NE            31\n## 3     182687   Highline Canal         Canal          CO             8\n## 4     182688 Cottonwood Creek        Stream          CO             8\n## 5     182689        Sand Draw        Valley          CO             8\n## 6     182690    Sedgwick Draw        Valley          CO             8\n##   COUNTY_NAME\n## 1       Logan\n## 2    Cheyenne\n## 3    Sedgwick\n## 4    Sedgwick\n## 5    Sedgwick\n## 6    Sedgwick\n```\n:::\n\n\n\n\n##### `readr` {-}\n\nThere is a family of `read_xxx` functions in `readr` to read files delimited with commas (`read_csv`), tabs (`read_tsv`), or generic delimited files (`read_delim`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download from web\ndownload.file(\"https://geonames.usgs.gov/docs/stategaz/NE_Features.zip\", destfile = '../data/NE_Features.zip')\n## Error in download.file(\"https://geonames.usgs.gov/docs/stategaz/NE_Features.zip\", : cannot open URL 'https://geonames.usgs.gov/docs/stategaz/NE_Features.zip'\n# Unzip to `data/` folder\nunzip('../data/NE_Features.zip', exdir = '../data/')\n# List files matching the file type and pick the first one\nfname <- list.files(\"../data/\", 'NE_Features_20', full.names = T)[1]\n\n# see that the file is delimited with |\nreadLines(fname, n = 5)\n## [1] \"FEATURE_ID|FEATURE_NAME|FEATURE_CLASS|STATE_ALPHA|STATE_NUMERIC|COUNTY_NAME|COUNTY_NUMERIC|PRIMARY_LAT_DMS|PRIM_LONG_DMS|PRIM_LAT_DEC|PRIM_LONG_DEC|SOURCE_LAT_DMS|SOURCE_LONG_DMS|SOURCE_LAT_DEC|SOURCE_LONG_DEC|ELEV_IN_M|ELEV_IN_FT|MAP_NAME|DATE_CREATED|DATE_EDITED\"\n## [2] \"171013|Peetz Table|Area|CO|08|Logan|075|405840N|1030332W|40.9777645|-103.0588116|||||1341|4400|Peetz|10/13/1978|\"                                                                                                                                                        \n## [3] \"171029|Sidney Draw|Valley|NE|31|Cheyenne|033|410816N|1030116W|41.1377213|-103.021044|405215N|1040353W|40.8709614|-104.0646558|1255|4117|Brownson|10/13/1978|03/08/2018\"                                                                                                  \n## [4] \"182687|Highline Canal|Canal|CO|08|Sedgwick|115|405810N|1023137W|40.9694351|-102.5268556|||||1119|3671|Sedgwick|10/13/1978|\"                                                                                                                                              \n## [5] \"182688|Cottonwood Creek|Stream|CO|08|Sedgwick|115|405511N|1023355W|40.9197132|-102.5651893|405850N|1030107W|40.9805426|-103.0185329|1095|3592|Sedgwick|10/13/1978|10/23/2009\"\n\nnebraska_locations <- read_delim(fname, delim = \"|\")\nnebraska_locations[1:6, 1:6]\n## # A tibble: 6 × 6\n##   FEATURE_ID FEATURE_NAME    FEATURE_CLASS STATE_ALPHA STATE_NUMERIC COUNTY_NAME\n##        <dbl> <chr>           <chr>         <chr>       <chr>         <chr>      \n## 1     171013 Peetz Table     Area          CO          08            Logan      \n## 2     171029 Sidney Draw     Valley        NE          31            Cheyenne   \n## 3     182687 Highline Canal  Canal         CO          08            Sedgwick   \n## 4     182688 Cottonwood Cre… Stream        CO          08            Sedgwick   \n## 5     182689 Sand Draw       Valley        CO          08            Sedgwick   \n## 6     182690 Sedgwick Draw   Valley        CO          08            Sedgwick\n```\n:::\n\n\n\n\nWe can actually read in the file without unzipping it, so long as we download it first - `readr` does not support reading remote zipped files, but it does support reading zipped files locally.\nIf we know ahead of time what our delimiter is, this is the best choice as it reduces the amount of file clutter we have in our working directory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnebraska_locations <- read_delim(\"../data/NE_Features.zip\", delim = \"|\")\n## Error: '../data/NE_Features.zip' does not exist in current working directory ('/home/susan/Projects/Class/stat-computing-r-python/part-wrangling').\nnebraska_locations[1:6, 1:6]\n## # A tibble: 6 × 6\n##   FEATURE_ID FEATURE_NAME    FEATURE_CLASS STATE_ALPHA STATE_NUMERIC COUNTY_NAME\n##        <dbl> <chr>           <chr>         <chr>       <chr>         <chr>      \n## 1     171013 Peetz Table     Area          CO          08            Logan      \n## 2     171029 Sidney Draw     Valley        NE          31            Cheyenne   \n## 3     182687 Highline Canal  Canal         CO          08            Sedgwick   \n## 4     182688 Cottonwood Cre… Stream        CO          08            Sedgwick   \n## 5     182689 Sand Draw       Valley        CO          08            Sedgwick   \n## 6     182690 Sedgwick Draw   Valley        CO          08            Sedgwick\n```\n:::\n\n\n\n\n\n##### Python {-}\n\nThere is a family of `read_xxx` functions in `pandas` including functions to read files delimited with commas (`read_csv`) as well as generic delimited files (`read_table`).\n\nPandas can access zipped data files and unzip them while reading the data in, so we don't have to download the file and unzip it first.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# a file delimited with |\n\nurl = \"https://geonames.usgs.gov/docs/stategaz/NE_Features.zip\"\nnebraska_locations = pd.read_table(url, delimiter = \"|\")\n## urllib.error.HTTPError: HTTP Error 503: Service Unavailable\nnebraska_locations\n## NameError: name 'nebraska_locations' is not defined\n```\n:::\n\n\n\n:::\n\n:::\n\n\n::: callout-tip\n\n### Try it out: Reading CSV files\n\nRebrickable.com contains tables of almost any information imaginable concerning Lego sets, conveniently available at their [download page](https://rebrickable.com/downloads/). \nBecause these data sets are comparatively large, they are available as compressed CSV files - that is, the .gz extension is a gzip compression applied to the CSV. \n\n\n\n\n\n\n\n\n\n::: panel-tabset\n\n#### Problem {-}\n\nThe `readr` package and `pandas` can handle .csv.gz files with no problems. Try reading in the data using the appropriate function from that package. Can you save the data as an uncompressed csv?\n\n#### R Solution {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlegosets <- read_csv(\"https://cdn.rebrickable.com/media/downloads/sets.csv.gz\")\nwrite_csv(legosets, \"../data/lego_sets.csv\")\n```\n:::\n\n\n\n\n\n#### Python Solution {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\nlegosets = pd.read_csv(\"https://cdn.rebrickable.com/media/downloads/sets.csv.gz\")\nlegosets.to_csv(\"../data/lego_sets_py.csv\")\n```\n:::\n\n\n\n\n:::\n\n:::\n\n## Spreadsheets\n::: callout-demo\n### Spreadsheet IO\n\nThis example uses from [NYC SLice](https://www.instagram.com/nycslice/). The author maintains a google sheet of the slices he has photographed, which we can download as an excel sheet and import.\n\n::: panel-tabset\n\n#### R `readxl` {-}\n\nIn R, the easiest way to read Excel data in is to use the `readxl` package. There are many other packages with different features, however - I have used `openxlsx` in the past to format spreadsheets to send to clients, for instance. \nBy far and away you are more likely to have problems with the arcane format of the Excel spreadsheet than with the package used to read the data in. \nIt is usually helpful to open the spreadsheet up in a graphical program first to make sure the formatting is as you expected it to be.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"readxl\" %in% installed.packages()) install.packages(\"readxl\")\nlibrary(readxl)\n\nurl <- \"https://docs.google.com/spreadsheets/d/1EY3oi9ttxybG0A0Obtwey6BFu7QLqdHe02JApijgztg/export?format=xlsx\"\n# Only download the data if it doesn't exist in the data folder\nif (!file.exists(\"../data/nyc_slice.xlsx\")) {\n  download.file(url, destfile = \"../data/nyc_slice.xlsx\", mode = \"wb\")\n}\n\n# Read in the downloaded data\npizza_data <- read_xlsx(\"../data/nyc_slice.xlsx\", sheet = 1)\npizza_data[1:10, 1:6]\n## # A tibble: 10 × 6\n##    `Link to IG Post`                       Name  location_lat location_lng Date \n##    <chr>                                   <chr> <chr>        <chr>        <chr>\n##  1 https://www.instagram.com/p/CjszJ-fOP5… Ange… 40.6232544   -73.9379223… 2022…\n##  2 https://www.instagram.com/p/CjdcPNAufP… Ozon… 40.6808917   -73.8426307  2022…\n##  3 https://www.instagram.com/p/CjQdNsaOZl… Pino… 40.6000148   -73.9994551  2022…\n##  4 https://www.instagram.com/p/Ci5XblnOnM… La R… 40.7133354   -73.8294102  2022…\n##  5 https://www.instagram.com/p/CiiLAtkON_… Rony… 40.7482509   -73.9923498  2022…\n##  6 https://www.instagram.com/p/CiS-44nucN… John… 40.8545616   -73.8658818… 2022…\n##  7 https://www.instagram.com/p/CiSmQnjutQ… Preg… 40.8631291   -73.8585108  2022…\n##  8 https://www.instagram.com/p/CiIO6oFuxp… N & … 40.6004632   -73.9430723… 2022…\n##  9 https://www.instagram.com/p/ChaZUsxuFs… Pepp… 40.9036613   -73.8504667… 2022…\n## 10 https://www.instagram.com/p/ChNd9wqOqG… Rocc… 40.8676344   -73.8836046  2022…\n## # ℹ 1 more variable: `Date Expanded (times in EST)` <chr>\n```\n:::\n\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\npizza_data = pd.read_excel(\"../data/nyc_slice.xlsx\")\npizza_data\n##                               Link to IG Post  ... Notes\n## 0    https://www.instagram.com/p/CjszJ-fOP5o/  ...   NaN\n## 1    https://www.instagram.com/p/CjdcPNAufPj/  ...   NaN\n## 2    https://www.instagram.com/p/CjQdNsaOZlY/  ...   NaN\n## 3    https://www.instagram.com/p/Ci5XblnOnMA/  ...   NaN\n## 4    https://www.instagram.com/p/CiiLAtkON_1/  ...   NaN\n## ..                                        ...  ...   ...\n## 459   https://www.instagram.com/p/rqCdE_hp3N/  ...   NaN\n## 460   https://www.instagram.com/p/rnT-kRhp4h/  ...   NaN\n## 461   https://www.instagram.com/p/rh17_NBp7a/  ...   NaN\n## 462   https://www.instagram.com/p/rfnZKmBp3B/  ...   NaN\n## 463   https://www.instagram.com/p/rfGr-RBp4U/  ...   NaN\n## \n## [464 rows x 11 columns]\n```\n:::\n\n\n\n\n\n:::\n:::\n\nIn general, it is better to avoid working in Excel, as it is not easy to reproduce the results (and Excel is horrible about dates and times, among other issues). Saving your data in more reproducible formats will make writing reproducible code much easier. \n\n::: callout-tip\n### Try it out \n\n::: panel-tabset\n\n#### Problem {-}\nThe Nebraska Department of Motor Vehicles [publishes a database of vehicle registrations](https://dmv.nebraska.gov/about/dmv-searchable-data) by type of license plate. [Link](https://dmv.nebraska.gov/about/dmv-searchable-data)\n\nRead in the data using your language(s) of choice. Be sure to look at the structure of the excel file, so that you can read the data in properly!\n\n#### R Solution {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://dmv.nebraska.gov/sites/dmv.nebraska.gov/files/doc/data/ld-totals/NE_Licensed_Drivers_by_Type_2021.xls\"\ndownload.file(url, destfile = \"../data/NE_Licensed_Drivers_by_Type_2021.xls\", mode = \"wb\")\nlibrary(readxl)\nne_plates <- read_xls(path = \"../data/NE_Licensed_Drivers_by_Type_2021.xls\", skip = 2)\nne_plates[1:10,1:6]\n## # A tibble: 10 × 6\n##    Age   \\nOperator's \\nLicense …¹ Operator's\\nLicense …² Motor-\\ncycle\\nLicen…³\n##    <chr>                     <dbl>                  <dbl>                  <dbl>\n##  1 <NA>                         NA                     NA                     NA\n##  2 14                            0                      0                      0\n##  3 15                            0                      0                      0\n##  4 16                            0                      0                      0\n##  5 17                          961                     33                      0\n##  6 18                        18903                    174                      0\n##  7 19                        22159                    251                      0\n##  8 20                        22844                    326                      1\n##  9 21                        21589                    428                      0\n## 10 22                        22478                    588                      0\n## # ℹ abbreviated names: ¹​`\\nOperator's \\nLicense -\\nClass O`,\n## #   ²​`Operator's\\nLicense - \\nClass O/\\nMotorcycle\\nClass M`,\n## #   ³​`Motor-\\ncycle\\nLicense /\\nClass M`\n## # ℹ 2 more variables: `Commercial Driver's License` <chr>, ...6 <chr>\n```\n:::\n\n\n\n\n#### Python Solution {-}\n\nYou may need to install `xlrd` via pip for this code to work.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\nne_plates = pd.read_excel(\"https://dmv.nebraska.gov/sites/dmv.nebraska.gov/files/doc/data/ld-totals/NE_Licensed_Drivers_by_Type_2021.xls\", skiprows = 2)\nne_plates\n##     Unnamed: 0  ... Total\\nLicensed\\n Drivers\n## 0          NaN  ...                       NaN\n## 1          NaN  ...                    3279.0\n## 2          NaN  ...                   14902.0\n## 3          NaN  ...                   22339.0\n## 4          NaN  ...                   24341.0\n## 5          NaN  ...                   21447.0\n## 6          NaN  ...                   23761.0\n## 7          NaN  ...                   24269.0\n## 8          NaN  ...                   23039.0\n## 9          NaN  ...                   23990.0\n## 10         NaN  ...                   24717.0\n## 11         NaN  ...                   25283.0\n## 12         NaN  ...                  125153.0\n## 13         NaN  ...                  128563.0\n## 14         NaN  ...                  126432.0\n## 15         NaN  ...                  117878.0\n## 16         NaN  ...                  102261.0\n## 17         NaN  ...                  104622.0\n## 18         NaN  ...                  111702.0\n## 19         NaN  ...                  118860.0\n## 20         NaN  ...                  106939.0\n## 21         NaN  ...                   86649.0\n## 22         NaN  ...                   56675.0\n## 23         NaN  ...                   35481.0\n## 24         NaN  ...                   20288.0\n## 25         NaN  ...                    8555.0\n## 26         NaN  ...                    1864.0\n## 27         NaN  ...                      82.0\n## 28         NaN  ...                 1483162.0\n## \n## [29 rows x 16 columns]\n```\n:::\n\n\n\n\n:::\n:::\n\n\n### Google Sheets\n\nOf course, some spreadsheets are available online via Google sheets. There are specific R and python packages to interface with Google sheets, and these can do more than just read data in - they can create, format, and otherwise manipulate Google sheets programmatically. We're not going to get into the power of these packages just now, but it's worth a look if you're working with collaborators who use Google sheets.\n\n::: callout-advanced\nThis section is provided for reference, but the details of API authentication are a bit too complicated to require of anyone who is just learning to program. \nFeel free to skip it and come back later if you need it.\n\nThe first two tabs below show authentication-free options for publicly available spreadsheets. For anything that is privately available, you will have to use API authentication via `GSpread` or `googlesheets4` in python and R respectively.\n:::\n\n\n::: callout-demo\n#### Reading Google Sheets\n\nLet's demonstrate reading in data from google sheets in R and python using the [Data Is Plural](https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0) archive.\n\n::: panel-tabset\n\n##### Python {-}\n\nOne simple hack-ish way to read google sheets in Python (so long as the sheet is publicly available) is to modify the sheet url to export the data to CSV and then just read that into pandas as usual. This method is described in @schaferReadDataGoogle2020. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\nsheet_id = \"1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk\"\nsheet_name = \"Items\"\nurl = f\"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}\"\n\ndata_is_plural = pd.read_csv(url)\n```\n:::\n\n\n\n\nThis method would likely work just as well in R and would not require the `googlesheets4` package.\n\n##### R {-}\n\nThis method is described in @schaferReadDataGoogle2020 for Python, but I have adapted the code to use in R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nsheet_id = \"1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk\"\nsheet_name = \"Items\"\nurl = sprintf(\"https://docs.google.com/spreadsheets/d/%s/gviz/tq?tqx=out:csv&sheet=%s\", sheet_id, sheet_name)\n\ndata_is_plural = read_csv(url)\n```\n:::\n\n\n\n\n\n##### R: `googlesheets4` {-}\n\nThis code is set not to run when the textbook is compiled because it requires some interactive authentication. \n\nCopy this code and run it on your computer to read in a sheet from google drive directly. You will see a prompt in the R console that you'll have to interact with, and there may also be a browser pop-up where you will need to sign in to google.\n\n<!-- How to authenticate on google actions/rsconnect: https://gargle.r-lib.org/articles/non-interactive-auth.html -->\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(googlesheets4)\ngs4_auth(scopes = \"https://www.googleapis.com/auth/drive.readonly\") # Read-only permissions\ndata_is_plural <- read_sheet(\"https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0\")\n```\n:::\n\n\n\n\n##### Python: `GSpread` {-}\n\nThese instructions are derived from [@clarkeHowReadGoogle2021]. \nWe will have to install the `GSpread` package: type `pip install gspread` into the terminal.\n\nThen, you will need to obtain a client token JSON file following [these instructions](https://towardsdatascience.com/how-to-import-google-sheets-data-into-a-pandas-dataframe-using-googles-api-v4-2020-f50e84ea4530). \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport gspread as gs\nimport pandas as pd\n```\n:::\n\n\n\n\nI've stopped here because I can't get the authentication working, but the method seems solid if you're willing to fiddle around with it.\n<!-- XXX TODO XXX -->\n:::\n:::\n\n::: callout-tip\n#### Try It Out!\n\n::: panel-tabset\n\n##### Problem\n\nUsing a method of your choice, read in this [spreadsheet of dog sizes](https://docs.google.com/spreadsheets/d/1e0p0WlRDlgS-4UBcQsU--39FcPRutn7w8zmMFv7GeXc/edit#gid=0) and make a useful plot of dog height and weight ranges by breed.\n\n##### Solution\n\nComing soon!\n\n:::\n:::\n\n\n## Binary Files\n\nR has binary file formats which store data in a more compact form. \nIt is relatively common for government websites, in particular, to provide SAS data in binary form. \nPython, as a more general computing language, has many different ways to interact with binary data files, as each programmer and application might want to save their data in binary form in a different way. \nAs a result, there is not a general-purpose binary data format for Python data. \nIf you are interested in reading binary data in Python, see @maierleLoadingBinaryData2020.\n\n::: callout-demo\n### Binary File IO\n::: panel-tabset\n\n\n#### R formats in R {-}\n\n`.Rdata` is perhaps the most common R binary data format, and can store several objects (along with their names) in the same file.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlegos <- read_csv(\"../data/lego_sets.csv\")\nmy_var <- \"This variable contains a string\"\nsave(legos, my_var, file = \"../data/R_binary.Rdata\")\n```\n:::\n\n\n\n\nIf we look at the file sizes of `lego_sets.csv` (619 KB) and `R_binary.Rdata`(227.8 KB), the size difference between binary and flat file formats is obvious. \n\nWe can load the R binary file back in using the `load()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(legos, my_var) # clear the files out\n\nls() # all objects in the working environment\n##  [1] \"breaks\"             \"data\"               \"data_is_plural\"    \n##  [4] \"fname\"              \"legosets\"           \"mesodata\"          \n##  [7] \"mesodata_names\"     \"ne_plates\"          \"nebraska_locations\"\n## [10] \"pizza_data\"         \"pokemon_info\"       \"sheet_id\"          \n## [13] \"sheet_name\"         \"tmdb_key\"           \"tmp\"               \n## [16] \"tmp_chars\"          \"tmp_chars_space\"    \"tmp_space\"         \n## [19] \"url\"                \"widths\"\n\nload(\"../data/R_binary.Rdata\")\n\nls() # all objects in the working environment\n##  [1] \"breaks\"             \"data\"               \"data_is_plural\"    \n##  [4] \"fname\"              \"legos\"              \"legosets\"          \n##  [7] \"mesodata\"           \"mesodata_names\"     \"my_var\"            \n## [10] \"ne_plates\"          \"nebraska_locations\" \"pizza_data\"        \n## [13] \"pokemon_info\"       \"sheet_id\"           \"sheet_name\"        \n## [16] \"tmdb_key\"           \"tmp\"                \"tmp_chars\"         \n## [19] \"tmp_chars_space\"    \"tmp_space\"          \"url\"               \n## [22] \"widths\"\n```\n:::\n\n\n\n\nAnother (less common) binary format used in R is the RDS format. Unlike Rdata, the RDS format does not save the object name - it only saves its contents (which also means you can save only one object at a time). As a result, when you read from an RDS file, you need to store the result of that function into a variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(legos, \"../data/RDSlego.rds\")\n\nother_lego <- readRDS(\"../data/RDSlego.rds\")\n```\n:::\n\n\n\n\nBecause RDS formats don't save the object name, you can be sure that you're not over-writing some object in your workspace by loading a different file. The downside to this is that you have to save each object to its own RDS file separately. \n\n#### R formats in Python {-}\n\nWe first need to install the `pyreadr` package by running `pip install pyreadr` in the terminal.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pyreadr\n\nrdata_result = pyreadr.read_r('../data/R_binary.Rdata')\nrdata_result[\"legos\"] # Access the variables using the variable name as a key\n##             set_num  ...                                            img_url\n## 0      0003977811-1  ...  https://cdn.rebrickable.com/media/sets/0003977...\n## 1             001-1  ...   https://cdn.rebrickable.com/media/sets/001-1.jpg\n## 2            0011-2  ...  https://cdn.rebrickable.com/media/sets/0011-2.jpg\n## 3            0011-3  ...  https://cdn.rebrickable.com/media/sets/0011-3.jpg\n## 4            0012-1  ...  https://cdn.rebrickable.com/media/sets/0012-1.jpg\n## ...             ...  ...                                                ...\n## 25508   YODACHRON-1  ...  https://cdn.rebrickable.com/media/sets/yodachr...\n## 25509        YOTO-1  ...  https://cdn.rebrickable.com/media/sets/yoto-1.jpg\n## 25510        YOTO-2  ...  https://cdn.rebrickable.com/media/sets/yoto-2.jpg\n## 25511    YTERRIER-1  ...  https://cdn.rebrickable.com/media/sets/yterrie...\n## 25512      ZX8000-1  ...  https://cdn.rebrickable.com/media/sets/zx8000-...\n## \n## [25513 rows x 6 columns]\nrdata_result[\"my_var\"]\n##                             my_var\n## 0  This variable contains a string\n\nrds_result = pyreadr.read_r('../data/RDSlego.rds')\nrds_result[None] # for RDS files, access the data using None as the key since RDS files have no object name.\n##             set_num  ...                                            img_url\n## 0      0003977811-1  ...  https://cdn.rebrickable.com/media/sets/0003977...\n## 1             001-1  ...   https://cdn.rebrickable.com/media/sets/001-1.jpg\n## 2            0011-2  ...  https://cdn.rebrickable.com/media/sets/0011-2.jpg\n## 3            0011-3  ...  https://cdn.rebrickable.com/media/sets/0011-3.jpg\n## 4            0012-1  ...  https://cdn.rebrickable.com/media/sets/0012-1.jpg\n## ...             ...  ...                                                ...\n## 25508   YODACHRON-1  ...  https://cdn.rebrickable.com/media/sets/yodachr...\n## 25509        YOTO-1  ...  https://cdn.rebrickable.com/media/sets/yoto-1.jpg\n## 25510        YOTO-2  ...  https://cdn.rebrickable.com/media/sets/yoto-2.jpg\n## 25511    YTERRIER-1  ...  https://cdn.rebrickable.com/media/sets/yterrie...\n## 25512      ZX8000-1  ...  https://cdn.rebrickable.com/media/sets/zx8000-...\n## \n## [25513 rows x 6 columns]\n```\n:::\n\n\n\n\n#### SAS format in R {-}\n\nFirst, let's download the NHTS data. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\n# Download the file and write to disk\nres <- GET(\"https://query.data.world/s/y7jo2qmjqfcnmublmwjvkn7wl4xeax\", \n           write_disk(\"../data/cen10pub.sas7bdat\", overwrite = T))\n```\n:::\n\n\n\n\nYou can see more information about this data [here](https://data.world/dot/national-household-travel-survey-nhts-2009) [@usdepartmentoftransportationNationalHouseholdTravel2018].\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"sas7bdat\" %in% installed.packages()) install.packages(\"sas7bdat\")\n\nlibrary(sas7bdat)\ndata <- read.sas7bdat(\"../data/cen10pub.sas7bdat\")\nhead(data)\n##    HOUSEID HH_CBSA10 RAIL10 CBSASIZE10 CBSACAT10 URBAN10 URBSIZE10 URBRUR10\n## 1 20000017     XXXXX     02         02        03      04        06       02\n## 2 20000231     XXXXX     02         03        03      01        03       01\n## 3 20000521     XXXXX     02         03        03      01        03       01\n## 4 20001283     35620     01         05        01      01        05       01\n## 5 20001603        -1     02         06        04      04        06       02\n## 6 20001649     XXXXX     02         03        03      01        02       01\n```\n:::\n\n\n\n\n\nIf you are curious about what this data means, then by all means, take a look at the [codebook](https://query.data.world/s/k4g2u42ltuqhkw56htbfheg5ouoyiu) (XLSX file). For now, it's enough that we can see roughly how it's structured.\n\n#### SAS format in Python {-}\n\nFirst, we need to download the SAS data file. This required writing a function to actually write the file downloaded from the URL, which is what this code chunk does.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Source: https://stackoverflow.com/questions/16694907/download-large-file-in-python-with-requests\nimport requests\ndef download_file(url, local_filename):\n  # NOTE the stream=True parameter below\n  with requests.get(url, stream=True) as r:\n    r.raise_for_status()\n    with open(local_filename, 'wb') as f:\n      for chunk in r.iter_content(chunk_size=8192): \n        f.write(chunk)\n  return local_filename\n\ndownload_file(\"https://query.data.world/s/y7jo2qmjqfcnmublmwjvkn7wl4xeax\", \"../data/cen10pub.sas7bdat\")\n## '../data/cen10pub.sas7bdat'\n```\n:::\n\n\n\n\nYou can see more information about this data [here](https://data.world/dot/national-household-travel-survey-nhts-2009) [@usdepartmentoftransportationNationalHouseholdTravel2018].\n\nTo read SAS files, we use the `read_sas` function in Pandas.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\ndata = pd.read_sas(\"../data/cen10pub.sas7bdat\")\ndata\n##             HOUSEID HH_CBSA10 RAIL10  ... URBAN10 URBSIZE10 URBRUR10\n## 0       b'20000017'  b'XXXXX'  b'02'  ...   b'04'     b'06'    b'02'\n## 1       b'20000231'  b'XXXXX'  b'02'  ...   b'01'     b'03'    b'01'\n## 2       b'20000521'  b'XXXXX'  b'02'  ...   b'01'     b'03'    b'01'\n## 3       b'20001283'  b'35620'  b'01'  ...   b'01'     b'05'    b'01'\n## 4       b'20001603'     b'-1'  b'02'  ...   b'04'     b'06'    b'02'\n## ...             ...       ...    ...  ...     ...       ...      ...\n## 150142  b'69998896'  b'XXXXX'  b'02'  ...   b'01'     b'03'    b'01'\n## 150143  b'69998980'  b'33100'  b'01'  ...   b'01'     b'05'    b'01'\n## 150144  b'69999718'  b'XXXXX'  b'02'  ...   b'01'     b'03'    b'01'\n## 150145  b'69999745'  b'XXXXX'  b'02'  ...   b'01'     b'03'    b'01'\n## 150146  b'69999811'  b'31080'  b'01'  ...   b'01'     b'05'    b'01'\n## \n## [150147 rows x 8 columns]\n```\n:::\n\n\n\n\n:::\n:::\n\n\n::: callout-tip\n### Try it out \n\n::: panel-tabset\n\n#### Problem {-}\n\nRead in two of the files from an earlier example, and save the results as an Rdata file with two objects. Then save each one as an RDS file. (Obviously, use R for this)\n\nIn RStudio, go to Session -> Clear Workspace. (This will clear your environment)\n\nNow, using your RDS files, load the objects back into R with different names. \n\nFinally, load your Rdata file. Are the two objects the same? (You can actually test this with `all.equal()` if you're curious)\n\nThen, load the two RDS files and the Rdata file in Python. Are the objects the same?\n\n#### R Solution {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(readr)\npizza <- read_xlsx(\"../data/nyc_slice.xlsx\", sheet = 1, guess_max = 7000)\nlegos <- read_csv(\"../data/lego_sets.csv\")\n\nsave(pizza, legos, file = \"../data/04_Try_Binary.Rdata\")\nsaveRDS(pizza, \"../data/04_Try_Binary1.rds\")\nsaveRDS(legos, \"../data/04_Try_Binary2.rds\")\n\nrm(pizza, legos) # Limited clearing of workspace... \n\n\nload(\"../data/04_Try_Binary.Rdata\")\n\npizza_compare <- readRDS(\"../data/04_Try_Binary1.rds\")\nlego_compare <- readRDS(\"../data/04_Try_Binary2.rds\")\n\nall.equal(pizza, pizza_compare)\n## [1] TRUE\nall.equal(legos, lego_compare)\n## [1] TRUE\n```\n:::\n\n\n\n\n\n#### Python Solution {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pyreadr\n\nrobjs = pyreadr.read_r('data/04_Try_Binary.Rdata')\n## pyreadr.custom_errors.PyreadrError: File b'data/04_Try_Binary.Rdata' does not exist!\npizza = robjs[\"pizza\"]\n## NameError: name 'robjs' is not defined\nlegos = robjs[\"legos\"] # Access the variables using the variable name as a key\n## NameError: name 'robjs' is not defined\n\npizza_compare = pyreadr.read_r('data/04_Try_Binary1.rds')[None]\n## pyreadr.custom_errors.PyreadrError: File b'data/04_Try_Binary1.rds' does not exist!\nlego_compare = pyreadr.read_r('data/04_Try_Binary2.rds')[None]\n## pyreadr.custom_errors.PyreadrError: File b'data/04_Try_Binary2.rds' does not exist!\n\npizza.equals(pizza_compare)\n## NameError: name 'pizza' is not defined\nlegos.equals(lego_compare)\n## NameError: name 'legos' is not defined\n```\n:::\n\n\n\n\n:::\n\n:::\n\n::: callout-learnmore\n## Learn more\n- [Slides from Jenny Bryan's talk on spreadsheets](https://speakerdeck.com/jennybc/spreadsheets) (sadly, no audio. It was a good talk.)\n- The [`vroom` package](https://www.tidyverse.org/blog/2019/05/vroom-1-0-0/) works like `read_csv` but allows you to read in and write to many files at incredible speeds. \n:::\n\n## References\n",
    "supporting": [
      "01-data-input_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}