{
  "hash": "533603ea75d1966bc90b4a7d589b2543",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Visualization Basics {#sec-basic-data-vis}\n\nThis section is intended as a very light overview of how you might create charts in R and python. \n@sec-data-vis will be much more in depth.\n\n## Objectives {-}\n\n- Use ggplot2/seaborn to create a chart\n- Begin to identify issues with data formatting that need to be resolved before creating a chart.\n\n## Package Installation \n\nYou will need the `seaborn` (python) and `ggplot2` (R) packages for this section. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\n\n\nTo install seaborn, pick one of the following methods (you can read more about them and decide which is appropriate for you in @sec-py-pkg-install)\n\n::: panel-tabset\n\n### System Terminal\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip3 install seaborn matplotlib\n```\n:::\n\n\n\n\n### R Terminal\n\nThis package installation method requires that you have a virtual environment set up (that is, if you are on Windows, don't try to install packages this way).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_install(c(\"seaborn\", \"matplotlib\"))\n```\n:::\n\n\n\n\n### Python Terminal\n\nIn a python chunk (or the python terminal), you can run the following command. This depends on something called \"IPython magic\" commands, so if it doesn't work for you, try the System Terminal method instead.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n%pip install seaborn matplotlib\n```\n:::\n\n\n\n\nOnce you have run this command, please comment it out so that you don't reinstall the same packages every time.\n\n:::\n\n## First Steps\n\nNow that you can read data in to R and python and define new variables, you can create plots! \nData visualization is a skill that takes a lifetime to learn, but for now, let's start out easy:  let's talk about how to make (basic) plots in R (with `ggplot2`) and in python (with `seaborn`, which has a similar approach to charts).\nYou can read more about this approach, called the **grammar of graphics** in @sec-data-vis.\n\n### Graphing HBCU Enrollment\n\nLet's work with Historically Black College and University enrollment. \n\n::: callout-demo\n\n#### Loading Libraries\n\n::: panel-tabset\n\n#### R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbcu_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-02/hbcu_all.csv')\n\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n#### Python\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nhbcu_all = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-02/hbcu_all.csv')\n```\n:::\n\n\n\n\n:::\n\n:::\n\n### Making a Line Chart\n\n`ggplot2` and `seaborn` work with data frames. \n\nIf you pass a data frame in as the data argument, you can refer to columns in that data with \"bare\" column names (you don't have to reference the full data object using `df$name` or `df.name`; you can instead use `name` or `\"name\"`).\n\n::: callout-demo\n\n::: panel-tabset\n\n#### R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hbcu_all, aes(x = Year, y = `4-year`)) + geom_line() +\n  ggtitle(\"4-year HBCU College Enrollment\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/line-graph-r-1.png){width=2100}\n:::\n:::\n\n\n\n\n#### Python\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplot = sns.lineplot(hbcu_all, x = \"Year\", y = \"4-year\")\nplot.set_title(\"4-year HBCU College Enrollment\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/line-graph-python-seaborn-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n### Data Formatting\n\nIf your data is in the right format, `ggplot2` is very easy to use; if your data aren't formatted neatly, it can be a real pain. \nIf you want to plot multiple lines, you need to either list each variable you want to plot, one by one, or (more likely) you want to get your data into \"long form\". \nWe'll learn more about how to do this type of data transition when we talk about [reshaping data](05-data-reshape.qmd).\n\n::: {.column-margin .callout}\n#### Tip {-}\nIt's helpful to start thinking about what format your data is in, and what format you would want it to be in in order to plot it. \nSketching a data frame for the \"as is\" condition and the \"to plot\" condition is a useful skill to cultivate. \n\n:::\n\n::: callout-demo\n\nYou don't need to know exactly how this works, but it is helpful to see the difference in the two datasets:\n\n::: panel-tabset\n\n#### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nhbcu_long <- pivot_longer(hbcu_all, -Year, names_to = \"type\", values_to = \"value\")\n```\n:::\n\n\n\n\n#### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhbcu_long = pd.melt(hbcu_all, id_vars = ['Year'], value_vars = hbcu_all.columns[1:11])\n```\n:::\n\n\n\n\n#### Original Data\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Year| Total enrollment|  Males| Females| 4-year| 2-year| Total - Public| 4-year - Public| 2-year - Public| Total - Private| 4-year - Private| 2-year - Private|\n|----:|----------------:|------:|-------:|------:|------:|--------------:|---------------:|---------------:|---------------:|----------------:|----------------:|\n| 1976|           222613| 104669|  117944| 206676|  15937|         156836|          143528|           13308|           65777|            63148|             2629|\n| 1980|           233557| 106387|  127170| 218009|  15548|         168217|          155085|           13132|           65340|            62924|             2416|\n| 1982|           228371| 104897|  123474| 212017|  16354|         165871|          151472|           14399|           62500|            60545|             1955|\n| 1984|           227519| 102823|  124696| 212844|  14675|         164116|          151289|           12827|           63403|            61555|             1848|\n| 1986|           223275|  97523|  125752| 207231|  16044|         162048|          147631|           14417|           61227|            59600|             1627|\n| 1988|           239755| 100561|  139194| 223250|  16505|         173672|          158606|           15066|           66083|            64644|             1439|\n\n\n:::\n:::\n\n\n\n\n#### Long Data\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Year|type             |  value|\n|----:|:----------------|------:|\n| 1976|Total enrollment | 222613|\n| 1976|Males            | 104669|\n| 1976|Females          | 117944|\n| 1976|4-year           | 206676|\n| 1976|2-year           |  15937|\n| 1976|Total - Public   | 156836|\n| 1976|4-year - Public  | 143528|\n| 1976|2-year - Public  |  13308|\n| 1976|Total - Private  |  65777|\n| 1976|4-year - Private |  63148|\n| 1976|2-year - Private |   2629|\n| 1980|Total enrollment | 233557|\n| 1980|Males            | 106387|\n| 1980|Females          | 127170|\n| 1980|4-year           | 218009|\n| 1980|2-year           |  15548|\n| 1980|Total - Public   | 168217|\n| 1980|4-year - Public  | 155085|\n| 1980|2-year - Public  |  13132|\n| 1980|Total - Private  |  65340|\n| 1980|4-year - Private |  62924|\n| 1980|2-year - Private |   2416|\n| 1982|Total enrollment | 228371|\n| 1982|Males            | 104897|\n| 1982|Females          | 123474|\n| 1982|4-year           | 212017|\n| 1982|2-year           |  16354|\n| 1982|Total - Public   | 165871|\n| 1982|4-year - Public  | 151472|\n| 1982|2-year - Public  |  14399|\n| 1982|Total - Private  |  62500|\n| 1982|4-year - Private |  60545|\n| 1982|2-year - Private |   1955|\n| 1984|Total enrollment | 227519|\n| 1984|Males            | 102823|\n| 1984|Females          | 124696|\n| 1984|4-year           | 212844|\n| 1984|2-year           |  14675|\n| 1984|Total - Public   | 164116|\n| 1984|4-year - Public  | 151289|\n| 1984|2-year - Public  |  12827|\n| 1984|Total - Private  |  63403|\n| 1984|4-year - Private |  61555|\n| 1984|2-year - Private |   1848|\n| 1986|Total enrollment | 223275|\n| 1986|Males            |  97523|\n| 1986|Females          | 125752|\n| 1986|4-year           | 207231|\n| 1986|2-year           |  16044|\n| 1986|Total - Public   | 162048|\n| 1986|4-year - Public  | 147631|\n| 1986|2-year - Public  |  14417|\n| 1986|Total - Private  |  61227|\n| 1986|4-year - Private |  59600|\n\n\n:::\n:::\n\n\n\n\nIn the long form of the data, we have a row for each data point (year x measurement type), not for each year.\nI've shown the same amount of data (6 years, 9 measurements) in this table as in the original data, but this takes up much more vertical space!\n\n:::\n\n:::\n\n### Making a (Better) Line Chart\n\nIf we had wanted to show all of the available data before, we would have needed to add a separate line for each column, coloring each one manually, and then we would have wanted to create a legend manually (which is a pain). \nConverting the data to long form means we can use `ggplot2`/`seaborn` to do all of this for us with only a single plot statement (`geom_line` or `sns.lineplot`).\nHaving the data in the right form to plot is very important if you want to get the plot you're imagining with relatively little effort.\n\n\n::: callout-demo\n\n::: panel-tabset\n\n#### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hbcu_long, aes(x = Year, y = value, color = type)) + geom_line() +\n  ggtitle(\"HBCU College Enrollment\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/long-form-demo-r-1.png){fig-alt='A chart titled HBCU College Enrollment, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Many lines are shown, with combinations of 2-year, 4-year, and total, private and public within those designations, and male and female enrollment as well. For most values, the overall enrollment has grown over time (declining somewhat since 2010), but the value for private 2-year HBCUs has declined over the entire time period and remained relatively flat. It is clear that private HBCUs make up an extremely small proportion of overall HBCU enrollment.' width=2400}\n:::\n:::\n\n\n\n\n#### Python\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nplot = sns.lineplot(hbcu_long, x = \"Year\", y = \"value\", hue = \"variable\")\nplot.set_title(\"4-year HBCU College Enrollment\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/long-form-demo-python-seaborn-1.png){fig-alt='A chart titled HBCU College Enrollment, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Many lines are shown, with combinations of 2-year, 4-year, and total, private and public within those designations, and male and female enrollment as well. For most values, the overall enrollment has grown over time (declining somewhat since 2010), but the value for private 2-year HBCUs has declined over the entire time period and remained relatively flat. It is clear that private HBCUs make up an extremely small proportion of overall HBCU enrollment.' width=768}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n\n### Highlighting Key Insights\n\nExamining the charts in the previous section, it seems that there are at least three different contrasts which are easily made: 2 year vs. 4 year (vs. Total), Public vs. Private, and Male vs. Female enrollment. \nThe 2 year vs. 4 year vs. Total and Public vs. Private variables seem to be \"crossed\" - we have values for every combination of these variables. \nThe Male and Female numbers are not broken out further.\n\nWhen creating charts, it's useful to think about key comparisons and insights that the user may wish to explore, and then to explicitly highlight those comparisons with separate charts.\nIt's never enough to just make one chart -- any data that is complex enough to plot deserves to be explored from multiple angles. \n\n::: demo\n#### Sketching Possible Comparisons\n\nIt is helpful to sketch out the data structure and then use that sketch to identify key comparisons. \nYou do not have to know what the data looks like at this stage -- it is enough to think through what *might* be interesting and then to test whether or not the comparison is interesting by generating the chart.\n\n::: panel-tabset\n\n##### Data Structure\n\n![Sketching the data structure and identifying interesting comparisons can help to guide your data analysis and exploration of the data visually.](../images/wrangling/hbcu-sketch-data-comparisons.png){fig-alt=\"A sketch of the HBCU data in wide form, with annotations underneath the table showing comparisons between relevant columns - by gender, by public and private 2y vs 4y, by total 2y and 4y enrollment, by public vs. private\"}\n\n##### Chart 1\n\n![This sketch shows what we might see by breaking the data out by gender.](../images/wrangling/hbcu-sketch-subplots-gender.png){fig-alt=\"A sketch of what the HBCU enrollment data broken out by gender might show.\"}\n\n##### Chart 2\n\n![One way of representing the public/private and 2y/4y data using small multiples.](../images/wrangling/hbcu-sketch-subplots-0.png){fig-alt=\" There are three subplots shown - Total, Public, and Private. In the Total pane, lines are broken out by public and private, while in the public and private panes they are broken out by 2y vs. 4y.\"}\n##### Chart 3\n\n![Another way of representing the public/private and 2y/4y data using small multiples.](../images/wrangling/hbcu-sketch-subplots-1.png){fig-alt=\" There are four subplots shown, arranged in a 2x2 table, with columns Public and Private, and rows 2yr and 4yr. In each cell, there is a subplot with a single line drawn.\"}\n\n##### Chart 4\n\n![An additional way of representing the public/private and 2y/4y data using small multiples.](../images/wrangling/hbcu-sketch-subplots-2.png){fig-alt=\" There are two subplots shown, arranged in a 1x2 table, with columns Public and Private. In each cell there is a chart with two lines: 4yr and 2yr.\"}\n:::\n\nWhen considering which version of a chart to generate, it is helpful to think about which comparisons are most natural for each chart. When lines are close together and share the same scale, comparisons are easier to make. So, if the goal is to highlight the difference between 2yr enrollment and 4yr enrollment, then Chart 4 is particularly effective, as those comparisons are easiest to make in that chart. \n@sec-data-vis discusses this in more detail.\n\n:::\n\n#### HBCU Enrollment by Gender\n\nFirst, let's peel off the gender-specific enrollment data. \nThis requires us to find only types \"Females\" and \"Males\", which we can obtain by filtering or subsetting the data.\n\n\n::: callout-demo\n\n::: panel-tabset\n\n#### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbcu_gender <- hbcu_long |>\n  dplyr::filter(type %in% c(\"Females\", \"Males\", \"Total enrollment\"))\n\nggplot(hbcu_gender, aes(x = Year, y = value, color = type)) + geom_line() +\n  ggtitle(\"HBCU College Enrollment by Gender\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/long-form-subset-r-3.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=2400}\n:::\n:::\n\n\n\n\n#### Python\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.clf() # Clear previous plot\nrel_types=[\"Total enrollment\", \"Females\", \"Males\"]\nhbcu_gender = hbcu_long.query('variable.isin(@rel_types)')\nplot = sns.lineplot(hbcu_gender, x = \"Year\", y = \"value\", hue = \"variable\")\nplot.set_title(\"HBCU College Enrollment\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/long-form-subset-python-seaborn-1.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=768}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\nSeeing only the gender related data (with total enrollment as a comparison) helps to highlight that the same temporal trends seem to apply across males and females, though in some cases growth is more shallow in males.\n\n#### Institution Types\n\nIt may also be useful to consider the type of institution when we consider enrollment numbers -- public or private? 2 year or 4 year? \nIn this case, it may be most useful to aim for creating some \"small multiples\" -- multiple charts that are similarly constructed and  placed together systematically. \n\n::: demo\n\n::: panel-tabset\n\n#### R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhbcu_inst <- hbcu_all |>\n  dplyr::select(1:2, 5:12) |>\n  dplyr::rename(\n    \"Total-Total\" = \"Total enrollment\",\n    \"Total-4year\" = \"4-year\", \n    \"Total-2year\"=\"2-year\", \n    \"Public-Total\" = \"Total - Public\", \n    \"Public-4year\" = \"4-year - Public\", \n    \"Public-2year\" = \"2-year - Public\", \n    \"Private-Total\" = \"Total - Private\", \n    \"Private-4year\" = \"4-year - Private\", \n    \"Private-2year\" = \"2-year - Private\") |>\n  tidyr::pivot_longer(2:10, names_to=\"variable\", values_to=\"enrollment\") |>\n  tidyr::separate(\"variable\", into = c(\"Type\", \"Degree\")) \n\nggplot(hbcu_inst, aes(x = Year, y = enrollment, color = Degree)) + geom_line() +\n  ggtitle(\"HBCU College Enrollment by Institution Type and Degree Length\") + \n  facet_wrap(~Type)\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-r-3.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=2400}\n:::\n\n```{.r .cell-code}\n\n\nggplot(hbcu_inst, aes(x = Year, y = enrollment, color = Degree)) + geom_line() +\n  ggtitle(\"HBCU College Enrollment by Institution Type and Degree Length\") + \n  facet_wrap(~Degree)\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-r-4.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=2400}\n:::\n:::\n\n\n\n\n#### Python\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhbcu_inst = hbcu_all.iloc[:,[0,1,4,5,6,7,8,9,10,11]]\nhbcu_inst_names=[\"Year\", \"Total-Total\", \"Total-4year\", \"Total-2year\", \"Public-Total\", \"Public-4year\", \"Public-2year\",\"Private-Total\", \"Private-4year\", \"Private-2year\"]\nhbcu_inst.columns = hbcu_inst_names\nhbcu_inst_long = pd.melt(hbcu_inst, id_vars = ['Year'], value_vars = hbcu_inst.columns[1:10])\nhbcu_inst_long[['Type','Degree']]=list(hbcu_inst_long[\"variable\"].str.split(\"-\"))\n\nplt.clf() # Clear previous plot\nplot = sns.FacetGrid(hbcu_inst_long, col=\"Type\")\nplot.map_dataframe(sns.lineplot,x = \"Year\", y = \"value\", hue = \"Degree\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-1.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=142}\n:::\n\n```{.python .cell-code}\nplot.add_legend()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-2.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=156}\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-3.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=950}\n:::\n\n```{.python .cell-code}\n\n\nplt.clf() # Clear previous plot\nplot = sns.FacetGrid(hbcu_inst_long, col=\"Degree\")\nplot.map_dataframe(sns.lineplot,x = \"Year\", y = \"value\", hue = \"Type\")\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-4.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=142}\n:::\n\n```{.python .cell-code}\nplot.add_legend()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-5.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=158}\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-6.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=959}\n:::\n\n::: {.cell-output-display}\n![](02-basic-data-vis_files/figure-html/hbcu-small-multiples-python-seaborn-7.png){fig-alt='A chart titled HBCU College Enrollment by gender, with y-axis labeled \\'value\\' ranging from 0 to 350000 and x-axis year spanning from 1976 to 2015. Three lines are shown: Total enrollment, Males, and Females.' width=768}\n:::\n:::\n\n\n\n\n:::\n\nAny of these plots could be customized by e.g. removing Totals (if desired), changing axis parameters so that facets don't have the same axis values, etc., but this is enough to get the basic idea of how to work with data.\n\n:::\n\n### Key Takeaways\n\nFrom this example of HBCU enrollment, a few things are clear:\n\n- The form of the data is important to be able to plot the data easily\n- It can be helpful to break measurements down into disjoint combinations (where the data allows) to create plots that thoughtfully compare variables\n- Plotting subsets of variables and rows can help us understand effects in the data better\n\n## References {#sec-graphics-intro-refs}\n",
    "supporting": [
      "02-basic-data-vis_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}