{
  "hash": "0cab2b590167d1c1b68b33392c4f17a3",
  "result": {
    "engine": "knitr",
    "markdown": "# Exploratory Data Analysis {#sec-eda}\n\n## Objectives {-}\n\n- Understand the main goals of exploratory data analysis\n- Generate and answer questions about a new dataset using charts, tables, and numerical summaries\n\n## Package Installation \n\nYou will need the `seaborn` and `matplotlib` (python) and `ggplot2` (R) packages for this section. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\n\n\nTo install python graphing libraries, pick one of the following methods (you can read more about them and decide which is appropriate for you in @sec-py-pkg-install)\n\n::: panel-tabset\n### System Terminal\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip3 install matplotlib seaborn\n```\n:::\n\n\n\n\n### R Terminal\n\nThis package installation method requires that you have a virtual environment set up (that is, if you are on Windows, don't try to install packages this way).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_install(c(\"matplotlib\", \"seaborn\"))\n```\n:::\n\n\n\n\n### Python Terminal\n\nIn a python chunk (or the python terminal), you can run the following command. This depends on something called \"IPython magic\" commands, so if it doesn't work for you, try the System Terminal method instead.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n%pip install matplotlib seaborn\n```\n:::\n\n\n\n\nOnce you have run this command, please comment it out so that you don't reinstall the same packages every time.\n\n:::\n\n\n::: {.callout-learnmore}\n## Extra Reading {.unnumbered}\n\n[The EDA chapter in R for Data Science](https://r4ds.had.co.nz/exploratory-data-analysis.html) [@r4ds] is very good at\nexplaining what the goals of EDA are, and what types of questions you\nwill typically need to answer in\nEDA. Much of the\nmaterial in this chapter is based at least in part on the R4DS chapter.\n:::\n\n\n![(Image from https://www.mrdbourke.com) \nThe EDA lifecycle starts with data collection and is\nprimarily a cycle between checking data types, assessing distributions,\nfeature engineering, and model iteration. These tasks are supported by\nsummary statistics, visualization, and\nmodeling.](../images/wrangling/an-EDA-lifecycle.png){fig-align=\"center\"\nwidth=\"75%\"}\n<!-- https://www.mrdbourke.com/content/images/size/w1000/2019/09/an-EDA-lifecycle.png -->\n\nMajor components of Exploratory Data Analysis (EDA):\n\n-   generating questions about your data\n-   look for answers to the questions (visualization, transformation,\n    modeling)\n-   use answers to refine the questions and generate new questions\n\nEDA is an iterative process. It is like brainstorming - you start with an idea or question you might have about the data, investigate, and then generate new ideas. \nEDA is useful even when you are relatively familiar with the type of data you're working with: in any dataset, it is good to make sure that you know the quality of the data as well as the relationships between the variables in the dataset.\n\nEDA is important because it helps us to know what challenges a particular data set might bring, what we might do with it. \nReal data is often messy, with large amounts of cleaning that must be done before statistical analysis can commence.\n\nWhile in many classes you'll be given mostly clean data, you do need to know how to clean your own data up so that you can use more interesting data sets for projects (and for fun!). \nEDA is an important component to learning how to work with messy data.\n\n::: .callout-note\nIn this section, I will mostly be using the plot commands that come with\nbase R/python and require no extra packages. The R for Data Science book\n[@r4ds] shows plot commands which use the `ggplot2` library. I'll show\nyou some plots from ggplot here as well, but you don't have to\nunderstand how to generate them yet. We will learn more about ggplot2\nlater, though if you want to start using it now, you may.\n:::\n\n## A Note on Language Philosophies \n\nIt is usually relatively easy to get summary statistics from a dataset, but the \"flow\" of EDA is somewhat different depending on the language patterns.\n\n> You must realize that R is written by experts in statistics and\n> statistical computing who, despite popular opinion, do not believe\n> that everything in SAS and SPSS is worth copying. Some things done in\n> such packages, which trace their roots back to the days of punched\n> cards and magnetic tape when fitting a single linear model may take\n> several days because your first 5 attempts failed due to syntax errors\n> in the JCL or the SAS code, still reflect the approach of \"give me\n> every possible statistic that could be calculated from this model,\n> whether or not it makes sense\". The approach taken in R is different.\n> The underlying assumption is that the useR is thinking about the\n> analysis while doing it. -- Douglas Bates\n\nI provide this as a historical artifact, but it does explain the difference between the approach to EDA and model output in R and Python, and the approach in SAS, which you may see in your other statistics classes. \nThis is not (at least, in my opinion) a criticism -- the SAS philosophy dates back to the mainframe and punch card days, and the syntax and output still bear evidence of that -- but it is worth noting.\n\nIn R and in Python, you will have to specify each piece of output you want, but in SAS you will get more than you ever wanted with a single command. Neither approach is wrong, but sometimes one is preferable over the other for a given problem.\n\n## Generating EDA Questions\n\nI very much like the two quotes in the @r4ds section on EDA Questions:\n\n> There are no routine statistical questions, only questionable\n> statistical routines. --- Sir David Cox\n\n> Far better an approximate answer to the right question, which is often\n> vague, than an exact answer to the wrong question, which can always be\n> made precise. --- John Tukey\n\nAs statisticians, we are concerned with variability by default. \nThis is also true during EDA: we are interested in variability (or sometimes, lack thereof) in the variables in our dataset, including the co-variability between multiple variables.\n\nWe may assess variability using pictures or numerical summaries:\n\n-   histograms or density plots (continuous variables)\n-   column plots (categorical variables)\n-   boxplots\n-   5 number summaries (min, 25%, mean, 75%, max)\n-   tabular data summaries (for categorical variables)\n\nIn many cases, this gives us a picture of both variability and the\n\"typical\" value of our variable.\n\nSometimes we may also be interested in identifying unusual values: outliers, data entry errors, and other points which don't conform to our expectations. \nThese unusual values may show up when we generate pictures and the axis limits are much larger than expected.\n\nWe also are usually concerned with missing values - in many cases, not all observations are complete, and this missingness can interfere with statistical analyses. \nIt can be helpful to keep track of how much missingness there is in any particular variable and any patterns of missingness that would impact the eventual data analysis[^exploratory-data-analysis-1].\n\n[^exploratory-data-analysis-1]: One package for this process in R is\n    `naniar` [@tierneyNaniarDataStructures2021].\n\nIf you are having trouble getting started on EDA, @danielbourkeGentleIntroductionExploratory2019 provides a nice checklist to get you thinking:\n\n> 1.  What question(s) are you trying to solve (or prove wrong)?\n> 2.  What kind of data do you have and how do you treat different\n>     types?\n> 3.  What's missing from the data and how do you deal with it?\n> 4.  Where are the outliers and why should you care about them?\n> 5.  How can you add, change or remove features to get more out of your\n>     data?\n\n## Useful EDA Techniques\n\n::: column-margin\n[![Nintendo, Creatures, Game Freak, The Pok√©mon Company, Public domain, via Wikimedia Commons](../images/wrangling/International_Pokemon_logo.png){fig-alt=\"Pokemon logo\"}](https://commons.wikimedia.org/wiki/File:International_Pok%C3%A9mon_logo.svg\")\n:::\n\n::: callout-caution\n\n### Example: Generations of Pokemon\n\nSuppose we want to explore Pokemon. There's not just the original 150 (gotta catch 'em all!) - now there are over 1000! \nLet's start out by looking at the proportion of Pokemon added in each of the 9 generations.\n\n::: panel-tabset\n\n#### R setup {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n\n# Setup the data\npoke <- read_csv(\"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/pokemon_gen_1-9.csv\", na = '.') %>%\n  mutate(generation = factor(gen))\n```\n:::\n\n\n\n\n#### Python setup {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\npoke = pd.read_csv(\"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/pokemon_gen_1-9.csv\")\npoke['generation'] = pd.Categorical(poke.gen)\n```\n:::\n\n\n\n:::\n:::\n\nThis data has several categorical and continuous variables that should allow for a reasonable demonstration of a number of techniques for exploring data.\n\n### Numerical Summary Statistics\n\n::: panel-tabset\n#### R: summary {.unnumbered}\n\nThe first, and most basic EDA command in R is `summary()`.\n\nFor numeric variables, `summary` provides 5-number summaries plus the mean. \nFor categorical variables, `summary` provides the length of the variable and the Class and Mode. For factors, `summary` provides a table of the most common values, as well as a catch-all \"other\" category.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make types into factors to demonstrate the difference\npoke <- tidyr::separate(poke, type, into = c(\"type_1\", \"type_2\"), sep = \",\")\npoke$type_1 <- factor(poke$type_1)\npoke$type_2 <- factor(poke$type_2)\n\nsummary(poke)\n##       gen          pokedex_no       img_link             name          \n##  Min.   :1.000   Min.   :   1.0   Length:1526        Length:1526       \n##  1st Qu.:2.000   1st Qu.: 226.2   Class :character   Class :character  \n##  Median :4.000   Median : 484.0   Mode  :character   Mode  :character  \n##  Mean   :4.478   Mean   : 487.9                                        \n##  3rd Qu.:7.000   3rd Qu.: 726.8                                        \n##  Max.   :9.000   Max.   :1008.0                                        \n##                                                                        \n##    variant               type_1        type_2        total       \n##  Length:1526        Water   :179   Flying :157   Min.   : 175.0  \n##  Class :character   Normal  :156   Psychic: 61   1st Qu.: 345.8  \n##  Mode  :character   Psychic :123   Ghost  : 57   Median : 475.0  \n##                     Electric:119   Ground : 57   Mean   : 450.3  \n##                     Grass   :113   Steel  : 55   3rd Qu.: 525.0  \n##                     Bug     :107   (Other):466   Max.   :1125.0  \n##                     (Other) :729   NA's   :673                   \n##        hp             attack          defense         sp_attack     \n##  Min.   :  1.00   Min.   :  5.00   Min.   :  5.00   Min.   : 10.00  \n##  1st Qu.: 50.25   1st Qu.: 60.00   1st Qu.: 55.00   1st Qu.: 50.00  \n##  Median : 70.00   Median : 80.00   Median : 70.00   Median : 70.00  \n##  Mean   : 71.18   Mean   : 82.05   Mean   : 75.66   Mean   : 75.05  \n##  3rd Qu.: 85.00   3rd Qu.:100.00   3rd Qu.: 95.00   3rd Qu.: 98.00  \n##  Max.   :255.00   Max.   :190.00   Max.   :250.00   Max.   :194.00  \n##                                                                     \n##    sp_defense         speed         species             height_m     \n##  Min.   : 20.00   Min.   :  5.0   Length:1526        Min.   : 0.100  \n##  1st Qu.: 55.00   1st Qu.: 50.0   Class :character   1st Qu.: 0.500  \n##  Median : 70.00   Median : 70.0   Mode  :character   Median : 1.000  \n##  Mean   : 73.84   Mean   : 72.5                      Mean   : 1.233  \n##  3rd Qu.: 90.00   3rd Qu.: 95.0                      3rd Qu.: 1.500  \n##  Max.   :250.00   Max.   :200.0                      Max.   :20.000  \n##                                                                      \n##    weight_kg        generation \n##  Min.   :  0.10   1      :285  \n##  1st Qu.:  8.00   5      :237  \n##  Median : 29.25   3      :193  \n##  Mean   : 68.25   4      :178  \n##  3rd Qu.: 78.50   8      :134  \n##  Max.   :999.90   7      :133  \n##                   (Other):366\n```\n:::\n\n\n\n\nOne common question in EDA is whether there are missing values or other inconsistencies that need to be handled. \n`summary()` provides you with the NA count for each variable, making it easy to identify what variables are likely to cause problems in an analysis.\nWe can see in this summary that 673 pokemon don't have a second type.\n\nWe also look for extreme values. \nThere is at least one pokemon who appears to have a weight of 999.90 kg. \nLet's investigate further:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke[poke$weight_kg > 999,] \n## # A tibble: 2 √ó 18\n##     gen pokedex_no img_link       name  variant type_1 type_2 total    hp attack\n##   <dbl>      <dbl> <chr>          <chr> <chr>   <fct>  <fct>  <dbl> <dbl>  <dbl>\n## 1     7        790 https://img.p‚Ä¶ Cosm‚Ä¶ NA      Psych‚Ä¶ <NA>     400    43     29\n## 2     7        797 https://img.p‚Ä¶ Cele‚Ä¶ NA      Steel  Flying   570    97    101\n## # ‚Ñπ 8 more variables: defense <dbl>, sp_attack <dbl>, sp_defense <dbl>,\n## #   speed <dbl>, species <chr>, height_m <dbl>, weight_kg <dbl>,\n## #   generation <fct>\n# Show any rows where weight_kg is extreme\n```\n:::\n\n\n\n\nThis is the last row of our data frame, and this pokemon appears to have\nmany missing values.\n\n#### Python: describe {.unnumbered}\n\nThe most basic EDA command in pandas is `df.describe()` (which operates\non a DataFrame named `df`). Like `summary()` in R, `describe()` provides\na 5-number summary for numeric variables. For categorical variables,\n`describe()` provides the number of unique values, the most common\nvalue, and the frequency of that common value.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Split types into two columns\npoke[['type_1', 'type_2']] = poke.type.str.split(\",\", expand = True)\n# Make each one categorical\npoke['type_1'] = pd.Categorical(poke.type_1)\npoke['type_2'] = pd.Categorical(poke.type_2)\n\npoke.iloc[:,:].describe() # describe only shows numeric variables by default\n##                gen   pokedex_no  ...     height_m    weight_kg\n## count  1526.000000  1526.000000  ...  1526.000000  1526.000000\n## mean      4.477720   487.863041  ...     1.232962    68.249607\n## std       2.565182   290.328644  ...     1.289446   121.828015\n## min       1.000000     1.000000  ...     0.100000     0.100000\n## 25%       2.000000   226.250000  ...     0.500000     8.000000\n## 50%       4.000000   484.000000  ...     1.000000    29.250000\n## 75%       7.000000   726.750000  ...     1.500000    78.500000\n## max       9.000000  1008.000000  ...    20.000000   999.900000\n## \n## [8 rows x 11 columns]\n\n# You can get categorical variables too if that's all you give it to show\npoke['type_1'].describe()\n## count      1526\n## unique       18\n## top       Water\n## freq        179\n## Name: type_1, dtype: object\npoke['type_2'].describe()\n## count        853\n## unique        18\n## top       Flying\n## freq         157\n## Name: type_2, dtype: object\n```\n:::\n\n\n\n\n#### R: skimr {.unnumbered}\n\nAn R package that is incredibly useful for this type of dataset\nexploration is `skimr`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nskim(poke)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |     |\n|:------------------------|:----|\n|Name                     |poke |\n|Number of rows           |1526 |\n|Number of columns        |18   |\n|_______________________  |     |\n|Column type frequency:   |     |\n|character                |4    |\n|factor                   |3    |\n|numeric                  |11   |\n|________________________ |     |\n|Group variables          |None |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|img_link      |         0|             1|  59|  84|     0|     1192|          0|\n|name          |         0|             1|   3|  12|     0|     1008|          0|\n|variant       |         0|             1|   2|  22|     0|      105|          0|\n|species       |         0|             1|  11|  21|     0|      708|          0|\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                             |\n|:-------------|---------:|-------------:|:-------|--------:|:--------------------------------------|\n|type_1        |         0|          1.00|FALSE   |       18|Wat: 179, Nor: 156, Psy: 123, Ele: 119 |\n|type_2        |       673|          0.56|FALSE   |       18|Fly: 157, Psy: 61, Gho: 57, Gro: 57    |\n|generation    |         0|          1.00|FALSE   |        9|1: 285, 5: 237, 3: 193, 4: 178         |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|   mean|     sd|    p0|    p25|    p50|    p75|   p100|hist  |\n|:-------------|---------:|-------------:|------:|------:|-----:|------:|------:|------:|------:|:-----|\n|gen           |         0|             1|   4.48|   2.57|   1.0|   2.00|   4.00|   7.00|    9.0|‚ñá‚ñá‚ñÖ‚ñÖ‚ñÖ |\n|pokedex_no    |         0|             1| 487.86| 290.33|   1.0| 226.25| 484.00| 726.75| 1008.0|‚ñá‚ñÜ‚ñá‚ñá‚ñÜ |\n|total         |         0|             1| 450.29| 120.59| 175.0| 345.75| 475.00| 525.00| 1125.0|‚ñÖ‚ñá‚ñÇ‚ñÅ‚ñÅ |\n|hp            |         0|             1|  71.18|  26.53|   1.0|  50.25|  70.00|  85.00|  255.0|‚ñÉ‚ñá‚ñÅ‚ñÅ‚ñÅ |\n|attack        |         0|             1|  82.05|  32.41|   5.0|  60.00|  80.00| 100.00|  190.0|‚ñÇ‚ñá‚ñá‚ñÇ‚ñÅ |\n|defense       |         0|             1|  75.66|  30.21|   5.0|  55.00|  70.00|  95.00|  250.0|‚ñÉ‚ñá‚ñÇ‚ñÅ‚ñÅ |\n|sp_attack     |         0|             1|  75.05|  33.88|  10.0|  50.00|  70.00|  98.00|  194.0|‚ñÖ‚ñá‚ñÖ‚ñÇ‚ñÅ |\n|sp_defense    |         0|             1|  73.84|  27.72|  20.0|  55.00|  70.00|  90.00|  250.0|‚ñá‚ñá‚ñÅ‚ñÅ‚ñÅ |\n|speed         |         0|             1|  72.50|  30.74|   5.0|  50.00|  70.00|  95.00|  200.0|‚ñÉ‚ñá‚ñÜ‚ñÅ‚ñÅ |\n|height_m      |         0|             1|   1.23|   1.29|   0.1|   0.50|   1.00|   1.50|   20.0|‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |\n|weight_kg     |         0|             1|  68.25| 121.83|   0.1|   8.00|  29.25|  78.50|  999.9|‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |\n\n\n:::\n:::\n\n\n\n\n`skim` provides a beautiful table of summary statistics along with a\nsparklines-style histogram of values, giving you a sneak peek at the\ndistribution.\n\n#### python: skimpy {.unnumbered}\n\nThere is a similar package to `skimr` in R called `skimpy` in Python.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom skimpy import skim\nskim(poke)\n## ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ skimpy summary ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n## ‚îÇ          Data Summary                Data Types                              ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì                       ‚îÇ\n## ‚îÇ ‚îÉ Dataframe         ‚îÉ Values ‚îÉ ‚îÉ Column Type ‚îÉ Count ‚îÉ                       ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î© ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©                       ‚îÇ\n## ‚îÇ ‚îÇ Number of rows    ‚îÇ 1526   ‚îÇ ‚îÇ int64       ‚îÇ 9     ‚îÇ                       ‚îÇ\n## ‚îÇ ‚îÇ Number of columns ‚îÇ 19     ‚îÇ ‚îÇ string      ‚îÇ 5     ‚îÇ                       ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ category    ‚îÇ 3     ‚îÇ                       ‚îÇ\n## ‚îÇ                                ‚îÇ float64     ‚îÇ 2     ‚îÇ                       ‚îÇ\n## ‚îÇ                                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                       ‚îÇ\n## ‚îÇ        Categories                                                            ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì                                                    ‚îÇ\n## ‚îÇ ‚îÉ Categorical Variables ‚îÉ                                                    ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©                                                    ‚îÇ\n## ‚îÇ ‚îÇ generation            ‚îÇ                                                    ‚îÇ\n## ‚îÇ ‚îÇ type_1                ‚îÇ                                                    ‚îÇ\n## ‚îÇ ‚îÇ type_2                ‚îÇ                                                    ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                                    ‚îÇ\n## ‚îÇ                                   number                                     ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì  ‚îÇ\n## ‚îÇ ‚îÉ colu ‚îÉ    ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ     ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ mn   ‚îÉ NA ‚îÉ NA % ‚îÉ mean ‚îÉ sd   ‚îÉ p0  ‚îÉ p25  ‚îÉ p50  ‚îÉ p75  ‚îÉ p100 ‚îÉ hist ‚îÉ  ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©  ‚îÇ\n## ‚îÇ ‚îÇ gen  ‚îÇ  0 ‚îÇ    0 ‚îÇ 4.47 ‚îÇ 2.56 ‚îÇ   1 ‚îÇ    2 ‚îÇ    4 ‚îÇ    7 ‚îÇ    9 ‚îÇ ‚ñà‚ñÑ‚ñÉ‚ñá ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ    ‚îÇ      ‚îÇ    8 ‚îÇ    5 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚ñÉ‚ñÖ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ poke ‚îÇ  0 ‚îÇ    0 ‚îÇ 487. ‚îÇ 290. ‚îÇ   1 ‚îÇ 226. ‚îÇ  484 ‚îÇ 726. ‚îÇ 1008 ‚îÇ ‚ñà‚ñÖ‚ñá‚ñá ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ dex_ ‚îÇ    ‚îÇ      ‚îÇ    9 ‚îÇ    3 ‚îÇ     ‚îÇ    2 ‚îÇ      ‚îÇ    8 ‚îÇ      ‚îÇ  ‚ñÜ‚ñÜ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ no   ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ tota ‚îÇ  0 ‚îÇ    0 ‚îÇ 450. ‚îÇ 120. ‚îÇ 175 ‚îÇ 345. ‚îÇ  475 ‚îÇ  525 ‚îÇ 1125 ‚îÇ ‚ñÖ‚ñà‚ñá‚ñÅ ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ l    ‚îÇ    ‚îÇ      ‚îÇ    3 ‚îÇ    6 ‚îÇ     ‚îÇ    8 ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ hp   ‚îÇ  0 ‚îÇ    0 ‚îÇ 71.1 ‚îÇ 26.5 ‚îÇ   1 ‚îÇ 50.2 ‚îÇ   70 ‚îÇ   85 ‚îÇ  255 ‚îÇ ‚ñÅ‚ñà‚ñÉ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ    ‚îÇ      ‚îÇ    8 ‚îÇ    3 ‚îÇ     ‚îÇ    5 ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ atta ‚îÇ  0 ‚îÇ    0 ‚îÇ 82.0 ‚îÇ 32.4 ‚îÇ   5 ‚îÇ   60 ‚îÇ   80 ‚îÇ  100 ‚îÇ  190 ‚îÇ ‚ñÇ‚ñá‚ñà‚ñÜ ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ck   ‚îÇ    ‚îÇ      ‚îÇ    5 ‚îÇ    1 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚ñÇ‚ñÅ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ defe ‚îÇ  0 ‚îÇ    0 ‚îÇ 75.6 ‚îÇ 30.2 ‚îÇ   5 ‚îÇ   55 ‚îÇ   70 ‚îÇ   95 ‚îÇ  250 ‚îÇ ‚ñÇ‚ñà‚ñÑ‚ñÅ ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ nse  ‚îÇ    ‚îÇ      ‚îÇ    6 ‚îÇ    1 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ sp_a ‚îÇ  0 ‚îÇ    0 ‚îÇ 75.0 ‚îÇ 33.8 ‚îÇ  10 ‚îÇ   50 ‚îÇ   70 ‚îÇ   98 ‚îÇ  194 ‚îÇ ‚ñÑ‚ñà‚ñÜ‚ñÉ ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ttac ‚îÇ    ‚îÇ      ‚îÇ    5 ‚îÇ    8 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚ñÅ   ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ k    ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ sp_d ‚îÇ  0 ‚îÇ    0 ‚îÇ 73.8 ‚îÇ 27.7 ‚îÇ  20 ‚îÇ   55 ‚îÇ   70 ‚îÇ   90 ‚îÇ  250 ‚îÇ ‚ñÖ‚ñà‚ñÉ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ efen ‚îÇ    ‚îÇ      ‚îÇ    4 ‚îÇ    2 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ se   ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ spee ‚îÇ  0 ‚îÇ    0 ‚îÇ 72.5 ‚îÇ 30.7 ‚îÇ   5 ‚îÇ   50 ‚îÇ   70 ‚îÇ   95 ‚îÇ  200 ‚îÇ ‚ñÉ‚ñÜ‚ñà‚ñÇ ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ d    ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ    4 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚ñÅ   ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ heig ‚îÇ  0 ‚îÇ    0 ‚îÇ 1.23 ‚îÇ 1.28 ‚îÇ 0.1 ‚îÇ  0.5 ‚îÇ    1 ‚îÇ  1.5 ‚îÇ   20 ‚îÇ  ‚ñà   ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ht_m ‚îÇ    ‚îÇ      ‚îÇ    3 ‚îÇ    9 ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ weig ‚îÇ  0 ‚îÇ    0 ‚îÇ 68.2 ‚îÇ 121. ‚îÇ 0.1 ‚îÇ    8 ‚îÇ 29.2 ‚îÇ 78.5 ‚îÇ 999. ‚îÇ  ‚ñà‚ñÅ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ht_k ‚îÇ    ‚îÇ      ‚îÇ    5 ‚îÇ    8 ‚îÇ     ‚îÇ      ‚îÇ    5 ‚îÇ      ‚îÇ    9 ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ g    ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ\n## ‚îÇ                                  category                                    ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì  ‚îÇ\n## ‚îÇ ‚îÉ column         ‚îÉ NA    ‚îÉ NA %                    ‚îÉ ordered    ‚îÉ unique  ‚îÉ  ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©  ‚îÇ\n## ‚îÇ ‚îÇ generation     ‚îÇ     0 ‚îÇ                       0 ‚îÇ False      ‚îÇ       9 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ type_1         ‚îÇ     0 ‚îÇ                       0 ‚îÇ False      ‚îÇ      18 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ type_2         ‚îÇ   673 ‚îÇ       44.10222804718217 ‚îÇ False      ‚îÇ      19 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ\n## ‚îÇ                                   string                                     ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì  ‚îÇ\n## ‚îÇ ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ       ‚îÉ      ‚îÉ       ‚îÉ      ‚îÉ       ‚îÉ word ‚îÉ       ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ       ‚îÉ      ‚îÉ       ‚îÉ      ‚îÉ chars ‚îÉ s    ‚îÉ       ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ colu ‚îÉ      ‚îÉ      ‚îÉ short ‚îÉ long ‚îÉ       ‚îÉ      ‚îÉ per   ‚îÉ per  ‚îÉ total ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ mn   ‚îÉ NA   ‚îÉ NA % ‚îÉ est   ‚îÉ est  ‚îÉ min   ‚îÉ max  ‚îÉ row   ‚îÉ row  ‚îÉ words ‚îÉ  ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©  ‚îÇ\n## ‚îÇ ‚îÇ img_ ‚îÇ    0 ‚îÇ    0 ‚îÇ https ‚îÇ http ‚îÇ https ‚îÇ http ‚îÇ  65.9 ‚îÇ    1 ‚îÇ  1526 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ link ‚îÇ      ‚îÇ      ‚îÇ ://im ‚îÇ s:// ‚îÇ ://im ‚îÇ s:// ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ g.pok ‚îÇ img. ‚îÇ g.pok ‚îÇ img. ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ emond ‚îÇ poke ‚îÇ emond ‚îÇ poke ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ b.net ‚îÇ mond ‚îÇ b.net ‚îÇ mond ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ /spri ‚îÇ b.ne ‚îÇ /spri ‚îÇ b.ne ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ tes/s ‚îÇ t/sp ‚îÇ tes/s ‚îÇ t/sp ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ word- ‚îÇ rite ‚îÇ carle ‚îÇ rite ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ shiel ‚îÇ s/sw ‚îÇ t-vio ‚îÇ s/sw ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ d/ico ‚îÇ ord- ‚îÇ let/i ‚îÇ ord- ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ n/muk ‚îÇ shie ‚îÇ con/a ‚îÇ shie ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ .png  ‚îÇ ld/i ‚îÇ nnihi ‚îÇ ld/i ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ con/ ‚îÇ lape. ‚îÇ con/ ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ darm ‚îÇ png   ‚îÇ zyga ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ anit ‚îÇ       ‚îÇ rde- ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ an-g ‚îÇ       ‚îÇ comp ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ alar ‚îÇ       ‚îÇ lete ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ ian- ‚îÇ       ‚îÇ .png ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ stan ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ dard ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ .png ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ name ‚îÇ    0 ‚îÇ    0 ‚îÇ Muk   ‚îÇ Crab ‚îÇ Aboma ‚îÇ Zyga ‚îÇ  7.55 ‚îÇ    1 ‚îÇ  1551 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ omin ‚îÇ snow  ‚îÇ rde  ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ able ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ vari ‚îÇ 1071 ‚îÇ 70.1 ‚îÇ Fan   ‚îÇ Gala ‚îÇ 10%   ‚îÇ Zero ‚îÇ  7.51 ‚îÇ 0.39 ‚îÇ   598 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ant  ‚îÇ      ‚îÇ 8348 ‚îÇ       ‚îÇ rian ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ 6238 ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ 5321 ‚îÇ       ‚îÇ Stan ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ    1 ‚îÇ       ‚îÇ dard ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ Mode ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ type ‚îÇ    0 ‚îÇ    0 ‚îÇ Bug   ‚îÇ Elec ‚îÇ Bug   ‚îÇ Wate ‚îÇ  9.03 ‚îÇ    1 ‚îÇ  1526 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ tric ‚îÇ       ‚îÇ r,St ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ ,Fig ‚îÇ       ‚îÇ eel  ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ htin ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ g    ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ spec ‚îÇ    0 ‚îÇ    0 ‚îÇ Fox   ‚îÇ Mega ‚îÇ Abund ‚îÇ Zen  ‚îÇ  15.4 ‚îÇ  2.3 ‚îÇ  3469 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ies  ‚îÇ      ‚îÇ      ‚îÇ Pok√©m ‚îÇ Fire ‚îÇ ance  ‚îÇ Char ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ on    ‚îÇ Pig  ‚îÇ Pok√©m ‚îÇ m    ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ Pok√© ‚îÇ on    ‚îÇ Pok√© ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ       ‚îÇ mon  ‚îÇ       ‚îÇ mon  ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ  ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ\n## ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ End ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n```\n:::\n\n\n\n:::\n\n### Assessing Distributions\n\nWe are often also interested in the distribution of values.\n\n#### Categorical Variables\n\nOne useful way to assess the distribution of values is to generate a\ncross-tabular view of the data. This is mostly important for variables\nwith a relatively low number of categories - otherwise, it is usually\neasier to use a graphical summary method.\n\n##### Tabular Summaries {.unnumbered}\n\n::: panel-tabset\n###### R {.unnumbered}\n\nWe can generate cross-tabs for variables that we know are discrete (such\nas generation, which will always be a whole number). We can even\ngenerate cross-tabular views for a combination of two variables (or\ntheoretically more, but this gets hard to read and track).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(poke$generation)\n## \n##   1   2   3   4   5   6   7   8   9 \n## 285 124 193 178 237 119 133 134 123\n\ntable(poke$type_1, poke$type_2)\n##           \n##            Bug Dark Dragon Electric Fairy Fighting Fire Flying Ghost Grass\n##   Bug        0    1      0        4     2        5    2     14     1     8\n##   Dark       0    0      4        0     3        2    4      8     2     2\n##   Dragon     0    1      0        1     1        2    1      6     3     0\n##   Electric   0    4      3        0     2        2    6     19     6    10\n##   Fairy      0    0      0        0     0        1    0      6     0     0\n##   Fighting   0    3      1        1     0        0    4      3     2     0\n##   Fire       2    1      2        0     0        7    0     11     7     0\n##   Flying     0    1      2        0     0        1    0      0     0     0\n##   Ghost      0    1      4        0     3        0    3      6     0    11\n##   Grass      0    5      6        0     5        7    1      8     4     0\n##   Ground     0    3      2        2     0        1    1      6     5     2\n##   Ice        2    0      0        0     2        0    4      3     1     0\n##   Normal     0    0      1        0     5        5    0     33     4     8\n##   Poison     1    7      4        0     2        3    2      3     0     0\n##   Psychic    0    2      3        0    11        3    1     14     9     4\n##   Rock       2    2      2        7     3        1    2      8     0     2\n##   Steel      0    0      9        0     4        1    0      2     7     0\n##   Water      2    9      6        2     4        6    0      7     6     3\n##           \n##            Ground Ice Normal Poison Psychic Rock Steel Water\n##   Bug           4   0      0     12       3    4    13     3\n##   Dark          1   4      9      3       2    0     3     0\n##   Dragon       13  12      1      0       4    0     0     9\n##   Electric      1   7      2      5       2    0     4     6\n##   Fairy         0   0      0      0       1    0     5     0\n##   Fighting      0   1      0      2       3    0     4     6\n##   Fire          3   0      2      1       6    5     1     1\n##   Flying        0   0      0      0       0    0     1     3\n##   Ghost         2   0      0      4       0    0     0     0\n##   Grass         1   3      3     15       3    0     3     0\n##   Ground        0   0      1      0       2    3     8     0\n##   Ice           3   0      0      0       5    2     4     4\n##   Normal        1   0      0      0       6    0     0     1\n##   Poison        5   0      2      0       4    0     0     3\n##   Psychic       0   3      4      0       0    0     4     0\n##   Rock          9   2      0      3       2    0     4     6\n##   Steel         2   0      0      2       7    3     0     0\n##   Water        12   4      0      4      11    6     1     0\n```\n:::\n\n\n\n\n###### Python {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n# For only one factor, use .groupby('colname')['colname'].count()\npoke.groupby(['generation'])['generation'].count()\n## generation\n## 1    285\n## 2    124\n## 3    193\n## 4    178\n## 5    237\n## 6    119\n## 7    133\n## 8    134\n## 9    123\n## Name: generation, dtype: int64\n\n# for two or more factors, use pd.crosstab\npd.crosstab(index = poke['type_1'], columns = poke['type_2'])\n## type_2    Bug  Dark  Dragon  Electric  ...  Psychic  Rock  Steel  Water\n## type_1                                 ...                             \n## Bug         0     1       0         4  ...        3     4     13      3\n## Dark        0     0       4         0  ...        2     0      3      0\n## Dragon      0     1       0         1  ...        4     0      0      9\n## Electric    0     4       3         0  ...        2     0      4      6\n## Fairy       0     0       0         0  ...        1     0      5      0\n## Fighting    0     3       1         1  ...        3     0      4      6\n## Fire        2     1       2         0  ...        6     5      1      1\n## Flying      0     1       2         0  ...        0     0      1      3\n## Ghost       0     1       4         0  ...        0     0      0      0\n## Grass       0     5       6         0  ...        3     0      3      0\n## Ground      0     3       2         2  ...        2     3      8      0\n## Ice         2     0       0         0  ...        5     2      4      4\n## Normal      0     0       1         0  ...        6     0      0      1\n## Poison      1     7       4         0  ...        4     0      0      3\n## Psychic     0     2       3         0  ...        0     0      4      0\n## Rock        2     2       2         7  ...        2     0      4      6\n## Steel       0     0       9         0  ...        7     3      0      0\n## Water       2     9       6         2  ...       11     6      1      0\n## \n## [18 rows x 18 columns]\n```\n:::\n\n\n\n:::\n\n##### Frequency Plots {.unnumbered}\n\n::: panel-tabset\n###### Base R {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(table(poke$generation)) # bar plot\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/poke-distribution-plots-1.png){width=2100}\n:::\n:::\n\n\n\n\n###### R: ggplot2 {.unnumbered}\n\nWe generate a bar chart using `geom_bar`. It helps to tell R that\ngeneration (despite appearances) is categorical by declaring it a factor\nvariable. This ensures that we get a break on the x-axis at each\ngeneration.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(poke, aes(x = factor(generation))) +\n  geom_bar() +\n  xlab(\"Generation\") + ylab(\"# Pokemon\")\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/poke-dist-plots-ggplot2-1.png){width=2100}\n:::\n:::\n\n\n\n\n\n###### Python: matplotlib {.unnumbered}\n\nWe generate a bar chart using the contingency table we generated earlier\ncombined with matplotlib's `plt.bar()`.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\ntab = poke.groupby(['generation'])['generation'].count()\n\nplt.bar(tab.keys(), tab.values, color = 'grey')\nplt.xlabel(\"Generation\")\nplt.ylabel(\"# Pokemon\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/matplotlib-categorical-chart-1.png){width=672}\n:::\n:::\n\n\n\n\n\n:::\n\n#### Quantitative Variables\n\nWe covered some numerical summary statistics in the numerical summary\nstatistic section above. In this section, we will primarily focus on\nvisualization methods for assessing the distribution of quantitative\nvariables.\n\n::: callout-note\n##### Note: R pipe {.unnumbered}\n\nThe code in this section uses the R pipe, `%>%`. The left side of the\npipe is passed as an argument to the right side. This makes code easier\nto read because it becomes a step-wise \"recipe\" instead of a nested mess\nof functions and parentheses.\n\n![In each step, the left hand side of the pipe is put into the first\nargument of the function. Source: [Arthur Welle\n(Github)](https://github.com/arthurwelle/VIS/blob/master/Pipe_Cake/)](../images/wrangling/Pipe_baking_magrittr_backAssign.gif){width=\"50%\"}\n:::\n\nWe can generate histograms[^exploratory-data-analysis-2] or kernel\ndensity plots (a continuous version of the histogram) to show us the\ndistribution of a continuous variable.\n\n[^exploratory-data-analysis-2]: A histogram is a chart which breaks up a\n    continuous variable into ranges, where the height of the bar is\n    proportional to the number of items in the range. A bar chart is\n    similar, but shows the number of occurrences of a discrete variable.\n\n::: panel-tabset\n##### Base R {.unnumbered}\n\nBy default, R uses ranges of $(a, b]$ in histograms, so we specify which\nbreaks will give us a desirable result. If we do not specify breaks, R\nwill pick them for us.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(poke$hp)\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/poke-hp-out-3.png){width=48%}\n:::\n:::\n\n\n\n\nFor continuous variables, we can use histograms, or we can examine\nkernel density plots.\n\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nlibrary(magrittr) # This provides the pipe command, %>%\n\nhist(poke$weight_kg)\n\npoke$weight_kg %>%\n  log10() %>% # Take the log - will transformation be useful w/ modeling?\n  hist(main = \"Histogram of Log10 Weight (Kg)\") # create a histogram\n\npoke$weight_kg %>%\n  density(na.rm = T) %>% # First, we compute the kernel density\n  # (na.rm = T says to ignore NA values)\n  plot(main = \"Density of Weight (Kg)\") # Then, we plot the result\n\n\npoke$weight_kg %>%\n  log10() %>% # Transform the variable\n  density(na.rm = T) %>% # Compute the density ignoring missing values\n  plot(main = \"Density of Log10 pokemon weight in Kg\") # Plot the result,\n    # changing the title of the plot to a meaningful value\n```\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m)](02a-eda_files/figure-html/poke-graphs-base-cts-1.png){width=900}\n:::\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m, log 10)](02a-eda_files/figure-html/poke-graphs-base-cts-2.png){width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m)](02a-eda_files/figure-html/poke-graphs-base-cts-3.png){width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m, log 10)](02a-eda_files/figure-html/poke-graphs-base-cts-4.png){width=900}\n:::\n\nHistogram and density plots of weight and log10 weight of different pokemon. The untransformed data are highly skewed, the transformed data are significantly less skewed.\n:::\n\n\n\n\n##### Python: matplotlib {.unnumbered}\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Create a 2x2 grid of plots with separate axes\n# This uses python multi-assignment to assign figures, axes\n# variables all in one go\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n\npoke.weight_kg.plot.hist(ax = ax1) # first plot\nax1.set_title(\"Histogram of Weight (kg)\")\n\n\nnp.log10(poke.weight_kg).plot.hist(ax = ax2)\nax2.set_title(\"Histogram of Log10 Weight (kg)\")\n\npoke.weight_kg.plot.density(ax = ax3)\nax3.set_title(\"Density of Weight (kg)\")\n\nnp.log10(poke.weight_kg).plot.density(ax = ax4)\nax4.set_title(\"Density of Log10 Weight (kg)\")\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![Histogram and density plots of weight and log10 weight of different pokemon. The untransformed data are highly skewed, the transformed data are significantly less skewed.](02a-eda_files/figure-html/poke-graphs-matplotlib-cts-3.png){width=576}\n:::\n:::\n\n\n\n\n##### R: ggplot2\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(poke, aes(x = height_m)) +\n  geom_histogram(bins = 30)\nggplot(poke, aes(x = height_m)) +\n  geom_histogram(bins = 30) +\n  scale_x_log10()\nggplot(poke, aes(x = height_m)) +\n  geom_density()\nggplot(poke, aes(x = height_m)) +\n  geom_density() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m)](02a-eda_files/figure-html/poke-ggplot2-cts-r-5.png){fig-align='center' width=900}\n:::\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m, log 10)](02a-eda_files/figure-html/poke-ggplot2-cts-r-6.png){fig-align='center' width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m)](02a-eda_files/figure-html/poke-ggplot2-cts-r-7.png){fig-align='center' width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m, log 10)](02a-eda_files/figure-html/poke-ggplot2-cts-r-8.png){fig-align='center' width=900}\n:::\n\nHistogram and density plots of height and log10 height of different pokemon. The untransformed data are highly skewed, the transformed data are significantly less skewed.\n:::\n\n\n\n\nNotice that in ggplot2, we transform the axes instead of the\ndata. This means that the units on the axis are true to the original,\nunlike in base R and matplotlib.\n\n##### Python: seaborn\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create a 2x2 grid of plots with separate axes\n# This uses python multi-assignment to assign figures, axes\n# variables all in one go\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n\nsns.histplot(poke, x = \"height_m\", bins = 30, ax = ax1)\nsns.histplot(poke, x = \"height_m\", bins = 30, log_scale = True, ax = ax2)\nsns.kdeplot(poke, x = \"height_m\", bw_adjust = 1, ax = ax3)\nsns.kdeplot(poke, x = \"height_m\", bw_adjust = 1, log_scale = True, ax = ax4)\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/poke-seaborn-cts-py-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n\n### Relationships Between Variables\n#### Categorical - Categorical Relationships\n\n::: panel-tabset\n\n##### R: ggplot2 {.unnumbered}\n\nWe can generate a (simple) mosaic plot (the equivalent of a 2-dimensional\ncross-tabular view) using `geom_bar` with `position = 'fill'`, which\nscales each bar so that it ends at 1. I've flipped the axes using\n`coord_flip` so that you can read the labels more easily.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(poke, aes(x = factor(type_1), fill = factor(type_2))) +\n  geom_bar(color = \"black\", position = \"fill\") +\n  xlab(\"Type 1\") + ylab(\"Proportion of Pokemon w/ Type 2\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/poke-dist-plots-ggplot2-mosaic-3.png){width=2100}\n:::\n:::\n\n\n\n\nAnother way to look at this data is to bin it in x and y and shade the\nresulting bins by the number of data points in each bin. We can even add\nin labels so that this is at least as clear as the tabular view!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(poke, aes(x = factor(type_1), y = factor(type_2))) +\n  # Shade tiles according to the number of things in the bin\n  geom_tile(aes(fill = after_stat(count)), stat = \"bin2d\") +\n  # Add the number of things in the bin to the top of the tile as text\n  geom_text(aes(label = after_stat(count)), stat = 'bin2d') +\n  # Scale the tile fill\n  scale_fill_gradient2(limits = c(0, 100), low = \"white\", high = \"blue\", na.value = \"white\") + \n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/poke-dist-plots-ggplot2-tile-1.png){width=2100}\n:::\n:::\n\n\n\n\n##### Base R {.unnumbered}\n\nBase R mosaic plots aren't nearly as pretty as the ggplot version, but I will at least show you how to create them. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(table(poke$type_1, poke$type_2)) \n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/mosaic-base-r-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# mosaic plot - hard to read b/c too many categories\n```\n:::\n\n\n\n\n##### Python: matplotlib {.unnumbered}\n\nTo get a mosaicplot, we need an additional library, called\n`statsmodels`, which we install with `pip install statsmodels` in the\nterminal.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.mosaicplot import mosaic\n\nmosaic(poke, ['type_1', 'type_2'], title = \"Pokemon Types\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/mosaic-plot-poke-statsmodels-1.png){width=672}\n:::\n:::\n\n\n\n\nThis obviously needs a bit of cleaning up to remove extra labels, but\nit's easy to get to and relatively functional. Notice that it does not,\nby default, show NA values.\n\n##### Python: seaborn {.unnumbered}\n\nSeaborn doesn't appear to have built-in mosaic plots; the [example I found](https://www.kaggle.com/code/aswathrao/seaborn#Mosaic-Plot) used the statsmodels function shown in the `maptlotlib` example and used seaborn to create facets. \nAs the point here isn't to display facets, borrowing the code from that example doesn't add any value here. \n\n:::\n\n#### Categorical - Continuous Relationships\n\n::: panel-tabset\n##### Base R {.unnumbered}\n\nIn R, most models are specified as `y ~ x1 + x2 + x3`, where the\ninformation on the left side of the tilde is the dependent variable, and\nthe information on the right side are any explanatory variables.\nInteractions are specified using `x1*x2` to get all combinations of x1\nand x2 (x1, x2, x1\\*x2); single interaction terms are specified as e.g.\n`x1:x2` and do not include any component terms.\n\nTo examine the relationship between a categorical variable and a\ncontinuous variable, we might look at box plots:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2)) # put figures in same row\nboxplot(log10(height_m) ~ type_1, data = poke)\nboxplot(total ~ generation, data = poke)\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-graphs-3.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nIn the second box plot, there are far too many categories to be able to\nresolve the relationship clearly, but the plot is still effective in\nthat we can identify that there are one or two species which have a much\nhigher point range than other species. EDA isn't usually about creating\npretty plots (or we'd be using `ggplot` right now) but rather about\nidentifying things which may come up in the analysis later.\n\n##### R: ggplot2 {.unnumbered}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = poke, aes(x = type_1, y = height_m)) + \n  geom_boxplot() + \n  scale_y_log10()\n\nggplot(data = poke, aes(x = factor(generation), y = total)) + \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-ggplot2-1.png){fig-align='center' width=100%}\n:::\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-ggplot2-2.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n##### Python: matplotlib {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.figure()\n\n# Create a list of vectors of height_m by type_1\npoke['height_m_log'] = np.log(poke.height_m)\nheight_by_type = poke.groupby('type_1', group_keys = True).height_m_log.apply(list)\n\n# Plot each object in the list\nplt.boxplot(height_by_type, labels = height_by_type.index)\n## {'whiskers': [<matplotlib.lines.Line2D object at 0x7f94f260b890>, <matplotlib.lines.Line2D object at 0x7f94f23c4050>, <matplotlib.lines.Line2D object at 0x7f94f23c7610>, <matplotlib.lines.Line2D object at 0x7f94f23c7e10>, <matplotlib.lines.Line2D object at 0x7f94f23d3350>, <matplotlib.lines.Line2D object at 0x7f94f23d3c50>, <matplotlib.lines.Line2D object at 0x7f94f23df010>, <matplotlib.lines.Line2D object at 0x7f94f23df890>, <matplotlib.lines.Line2D object at 0x7f94f23eed50>, <matplotlib.lines.Line2D object at 0x7f94f23ef550>, <matplotlib.lines.Line2D object at 0x7f94f23feb50>, <matplotlib.lines.Line2D object at 0x7f94f23ff450>, <matplotlib.lines.Line2D object at 0x7f94f240e9d0>, <matplotlib.lines.Line2D object at 0x7f94f240f2d0>, <matplotlib.lines.Line2D object at 0x7f94f241a990>, <matplotlib.lines.Line2D object at 0x7f94f241b1d0>, <matplotlib.lines.Line2D object at 0x7f94f2426690>, <matplotlib.lines.Line2D object at 0x7f94f2426f90>, <matplotlib.lines.Line2D object at 0x7f94f2435950>, <matplotlib.lines.Line2D object at 0x7f94f2391690>, <matplotlib.lines.Line2D object at 0x7f94f2445c50>, <matplotlib.lines.Line2D object at 0x7f94f24464d0>, <matplotlib.lines.Line2D object at 0x7f94f23b3bd0>, <matplotlib.lines.Line2D object at 0x7f94f3bcefd0>, <matplotlib.lines.Line2D object at 0x7f94f39a2310>, <matplotlib.lines.Line2D object at 0x7f94f39a09d0>, <matplotlib.lines.Line2D object at 0x7f94f288c850>, <matplotlib.lines.Line2D object at 0x7f94f288eb90>, <matplotlib.lines.Line2D object at 0x7f94f2813790>, <matplotlib.lines.Line2D object at 0x7f94f3a50d90>, <matplotlib.lines.Line2D object at 0x7f94f28d2490>, <matplotlib.lines.Line2D object at 0x7f94f28d1c10>, <matplotlib.lines.Line2D object at 0x7f94f2788e10>, <matplotlib.lines.Line2D object at 0x7f94f2788c90>, <matplotlib.lines.Line2D object at 0x7f94f27f8f50>, <matplotlib.lines.Line2D object at 0x7f94f27fa690>], 'caps': [<matplotlib.lines.Line2D object at 0x7f94f23c49d0>, <matplotlib.lines.Line2D object at 0x7f94f23c5350>, <matplotlib.lines.Line2D object at 0x7f94f23d0710>, <matplotlib.lines.Line2D object at 0x7f94f23d0fd0>, <matplotlib.lines.Line2D object at 0x7f94f23dc450>, <matplotlib.lines.Line2D object at 0x7f94f23dcd50>, <matplotlib.lines.Line2D object at 0x7f94f23ec150>, <matplotlib.lines.Line2D object at 0x7f94f23ec950>, <matplotlib.lines.Line2D object at 0x7f94f23efe50>, <matplotlib.lines.Line2D object at 0x7f94f23fc750>, <matplotlib.lines.Line2D object at 0x7f94f23ffcd0>, <matplotlib.lines.Line2D object at 0x7f94f240c650>, <matplotlib.lines.Line2D object at 0x7f94f240fbd0>, <matplotlib.lines.Line2D object at 0x7f94f24184d0>, <matplotlib.lines.Line2D object at 0x7f94f241b9d0>, <matplotlib.lines.Line2D object at 0x7f94f2424310>, <matplotlib.lines.Line2D object at 0x7f94f2427850>, <matplotlib.lines.Line2D object at 0x7f94f2434090>, <matplotlib.lines.Line2D object at 0x7f94f24371d0>, <matplotlib.lines.Line2D object at 0x7f94f2437a90>, <matplotlib.lines.Line2D object at 0x7f94f2446d90>, <matplotlib.lines.Line2D object at 0x7f94f2447590>, <matplotlib.lines.Line2D object at 0x7f94f27df5d0>, <matplotlib.lines.Line2D object at 0x7f94f27dc0d0>, <matplotlib.lines.Line2D object at 0x7f94f39a18d0>, <matplotlib.lines.Line2D object at 0x7f94f39a2e10>, <matplotlib.lines.Line2D object at 0x7f94f288fc10>, <matplotlib.lines.Line2D object at 0x7f94f2813d50>, <matplotlib.lines.Line2D object at 0x7f94f3a52cd0>, <matplotlib.lines.Line2D object at 0x7f94f3a51150>, <matplotlib.lines.Line2D object at 0x7f94f28d0750>, <matplotlib.lines.Line2D object at 0x7f94f28d1e90>, <matplotlib.lines.Line2D object at 0x7f94f278a490>, <matplotlib.lines.Line2D object at 0x7f94f278b210>, <matplotlib.lines.Line2D object at 0x7f94f27fb6d0>, <matplotlib.lines.Line2D object at 0x7f94f28a8c10>], 'boxes': [<matplotlib.lines.Line2D object at 0x7f94f3eecfd0>, <matplotlib.lines.Line2D object at 0x7f94f23c6dd0>, <matplotlib.lines.Line2D object at 0x7f94f23d2a50>, <matplotlib.lines.Line2D object at 0x7f94f23de750>, <matplotlib.lines.Line2D object at 0x7f94f23ee4d0>, <matplotlib.lines.Line2D object at 0x7f94f23fe2d0>, <matplotlib.lines.Line2D object at 0x7f94f240e150>, <matplotlib.lines.Line2D object at 0x7f94f241a090>, <matplotlib.lines.Line2D object at 0x7f94f2425dd0>, <matplotlib.lines.Line2D object at 0x7f94f2435ad0>, <matplotlib.lines.Line2D object at 0x7f94f24453d0>, <matplotlib.lines.Line2D object at 0x7f94f2458f10>, <matplotlib.lines.Line2D object at 0x7f94f27dfe90>, <matplotlib.lines.Line2D object at 0x7f94f288c950>, <matplotlib.lines.Line2D object at 0x7f94f2812050>, <matplotlib.lines.Line2D object at 0x7f94f3a53bd0>, <matplotlib.lines.Line2D object at 0x7f94f27884d0>, <matplotlib.lines.Line2D object at 0x7f94f27f8e50>], 'medians': [<matplotlib.lines.Line2D object at 0x7f94f23c5d50>, <matplotlib.lines.Line2D object at 0x7f94f23d18d0>, <matplotlib.lines.Line2D object at 0x7f94f23dd590>, <matplotlib.lines.Line2D object at 0x7f94f23ed250>, <matplotlib.lines.Line2D object at 0x7f94f23fcfd0>, <matplotlib.lines.Line2D object at 0x7f94f240cf90>, <matplotlib.lines.Line2D object at 0x7f94f2418d50>, <matplotlib.lines.Line2D object at 0x7f94f2424b50>, <matplotlib.lines.Line2D object at 0x7f94f24347d0>, <matplotlib.lines.Line2D object at 0x7f94f2444310>, <matplotlib.lines.Line2D object at 0x7f94f2447d90>, <matplotlib.lines.Line2D object at 0x7f94f27dc910>, <matplotlib.lines.Line2D object at 0x7f94f39a3f50>, <matplotlib.lines.Line2D object at 0x7f94f2812a10>, <matplotlib.lines.Line2D object at 0x7f94f3a51f10>, <matplotlib.lines.Line2D object at 0x7f94f28d3190>, <matplotlib.lines.Line2D object at 0x7f94f27f9bd0>, <matplotlib.lines.Line2D object at 0x7f94f28a8290>], 'fliers': [<matplotlib.lines.Line2D object at 0x7f94f23c6650>, <matplotlib.lines.Line2D object at 0x7f94f23d2150>, <matplotlib.lines.Line2D object at 0x7f94f23dde50>, <matplotlib.lines.Line2D object at 0x7f94f23edb50>, <matplotlib.lines.Line2D object at 0x7f94f23fd950>, <matplotlib.lines.Line2D object at 0x7f94f240d850>, <matplotlib.lines.Line2D object at 0x7f94f2419710>, <matplotlib.lines.Line2D object at 0x7f94f2425450>, <matplotlib.lines.Line2D object at 0x7f94f2435250>, <matplotlib.lines.Line2D object at 0x7f94f2444ad0>, <matplotlib.lines.Line2D object at 0x7f94f2458690>, <matplotlib.lines.Line2D object at 0x7f94f27dce50>, <matplotlib.lines.Line2D object at 0x7f94f288e690>, <matplotlib.lines.Line2D object at 0x7f94f2810150>, <matplotlib.lines.Line2D object at 0x7f94f3a52f10>, <matplotlib.lines.Line2D object at 0x7f94f28d0290>, <matplotlib.lines.Line2D object at 0x7f94f27f9510>, <matplotlib.lines.Line2D object at 0x7f94f28a9410>], 'means': []}\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-matplotlib-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.figure()\n\n# Create a list of vectors of total by generation\ntotal_by_gen = poke.groupby('generation', group_keys = True).total.apply(list)\n\n# Plot each object in the list\nplt.boxplot(total_by_gen, labels = total_by_gen.index)\n## {'whiskers': [<matplotlib.lines.Line2D object at 0x7f94f27336d0>, <matplotlib.lines.Line2D object at 0x7f94f2968890>, <matplotlib.lines.Line2D object at 0x7f94f296b450>, <matplotlib.lines.Line2D object at 0x7f94f28ba050>, <matplotlib.lines.Line2D object at 0x7f94f28bba10>, <matplotlib.lines.Line2D object at 0x7f94f28bb550>, <matplotlib.lines.Line2D object at 0x7f94f27afe50>, <matplotlib.lines.Line2D object at 0x7f94f282a7d0>, <matplotlib.lines.Line2D object at 0x7f94f2682490>, <matplotlib.lines.Line2D object at 0x7f94f26812d0>, <matplotlib.lines.Line2D object at 0x7f94f26dc510>, <matplotlib.lines.Line2D object at 0x7f94f26ddf90>, <matplotlib.lines.Line2D object at 0x7f94f27e8d50>, <matplotlib.lines.Line2D object at 0x7f94f27eb350>, <matplotlib.lines.Line2D object at 0x7f94f3a47c90>, <matplotlib.lines.Line2D object at 0x7f94f26a6610>, <matplotlib.lines.Line2D object at 0x7f94f2970510>, <matplotlib.lines.Line2D object at 0x7f94f2973110>], 'caps': [<matplotlib.lines.Line2D object at 0x7f94f296b0d0>, <matplotlib.lines.Line2D object at 0x7f94f296a790>, <matplotlib.lines.Line2D object at 0x7f94f28b9210>, <matplotlib.lines.Line2D object at 0x7f94f28b8090>, <matplotlib.lines.Line2D object at 0x7f94f27ac150>, <matplotlib.lines.Line2D object at 0x7f94f27ac0d0>, <matplotlib.lines.Line2D object at 0x7f94f2829310>, <matplotlib.lines.Line2D object at 0x7f94f2829110>, <matplotlib.lines.Line2D object at 0x7f94f2680c10>, <matplotlib.lines.Line2D object at 0x7f94f2682750>, <matplotlib.lines.Line2D object at 0x7f94f26df290>, <matplotlib.lines.Line2D object at 0x7f94f26dc310>, <matplotlib.lines.Line2D object at 0x7f94f3a44e90>, <matplotlib.lines.Line2D object at 0x7f94f3a45650>, <matplotlib.lines.Line2D object at 0x7f94f26a5d50>, <matplotlib.lines.Line2D object at 0x7f94f26a4050>, <matplotlib.lines.Line2D object at 0x7f94f29704d0>, <matplotlib.lines.Line2D object at 0x7f94f2971b10>], 'boxes': [<matplotlib.lines.Line2D object at 0x7f94f2732e10>, <matplotlib.lines.Line2D object at 0x7f94f296aa10>, <matplotlib.lines.Line2D object at 0x7f94f28ba4d0>, <matplotlib.lines.Line2D object at 0x7f94f27af050>, <matplotlib.lines.Line2D object at 0x7f94f2683110>, <matplotlib.lines.Line2D object at 0x7f94f26de3d0>, <matplotlib.lines.Line2D object at 0x7f94f27e8f90>, <matplotlib.lines.Line2D object at 0x7f94f3a46c50>, <matplotlib.lines.Line2D object at 0x7f94f26a7c10>], 'medians': [<matplotlib.lines.Line2D object at 0x7f94f2968c50>, <matplotlib.lines.Line2D object at 0x7f94f28b8fd0>, <matplotlib.lines.Line2D object at 0x7f94f27ac910>, <matplotlib.lines.Line2D object at 0x7f94f282a4d0>, <matplotlib.lines.Line2D object at 0x7f94f2683310>, <matplotlib.lines.Line2D object at 0x7f94f27e89d0>, <matplotlib.lines.Line2D object at 0x7f94f3a44b10>, <matplotlib.lines.Line2D object at 0x7f94f26a54d0>, <matplotlib.lines.Line2D object at 0x7f94f2973450>], 'fliers': [<matplotlib.lines.Line2D object at 0x7f94f2969a90>, <matplotlib.lines.Line2D object at 0x7f94f28b9fd0>, <matplotlib.lines.Line2D object at 0x7f94f27ac250>, <matplotlib.lines.Line2D object at 0x7f94f282b790>, <matplotlib.lines.Line2D object at 0x7f94f26dda50>, <matplotlib.lines.Line2D object at 0x7f94f27eae90>, <matplotlib.lines.Line2D object at 0x7f94f3a45e50>, <matplotlib.lines.Line2D object at 0x7f94f26a6f10>, <matplotlib.lines.Line2D object at 0x7f94f2973810>], 'means': []}\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-matplotlib2-3.png){width=672}\n:::\n:::\n\n\n\n##### Python: seaborn  {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns\nplt.figure()\nsns.boxplot(poke, x = \"generation\", y = \"height_m\", log_scale = True)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-seaborn-5.png){width=672}\n:::\n:::\n\n\n\nAs a higher-level graphics library, `seaborn` allows you to transform the scale shown on the axes instead of having to manually transform the data. \nThis is a more natural presentation, as the values on the scale are (at least in theory) a bit easier to read. \nIn practice, I'd still probably customize the labels on the y-axis if I were hoping to use this for publication. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns\nplt.figure()\nsns.boxplot(poke, x = \"generation\", y = \"total\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/boxplot-seaborn2-7.png){width=672}\n:::\n:::\n\n\n\n:::\n\nYou can find more on boxplots and ways to customize boxplots in the [Graphics](02b-graphics.qmd) chapter.\n\n#### Continuous - Continuous Relationships\n\n::: panel-tabset\n##### Base R {.unnumbered}\n\nTo look at the relationship between numeric variables, we could compute\na numeric correlation, but a plot may be more useful, because it allows\nus to see outliers as well.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(defense ~ attack, data = poke, type = \"p\")\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/base-scatter-cor-9.png){fig-align='center' width=48%}\n:::\n\n```{.r .cell-code}\n\ncor(poke$defense, poke$attack)\n## [1] 0.4259168\n```\n:::\n\n\n\n\nSometimes, we discover that a numeric variable which may seem to be continuous is actually relatively quantized. \nIn other cases, like in the plot below, we may discover an interesting correlation that sticks out - the identity line $y=x$ seems to stand out from the cloud here.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x = poke$sp_attack, y = poke$attack, type = \"p\")\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/base-scatter-quantized-1.png){width=2100}\n:::\n:::\n\n\n\n\nA scatterplot matrix can also be a useful way to visualize relationships\nbetween several variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(poke[,c(\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\")]) # hp - sp_defense columns\n```\n\n::: {.cell-output-display}\n![A scatterplot matrix of hit points, attack, defense, special attack, and special defense characteristics for all generation 1-8 Pokemon.](02a-eda_files/figure-html/base-scatter-matrix-1.png){width=100%}\n:::\n:::\n\n\n\n\n::: callout-note\n[There's more information on how to customize base R scatterplot\nmatrices\nhere](http://www.sthda.com/english/wiki/scatter-plot-matrices-r-base-graphs).\n:::\n\n##### R: ggplot2 {.unnumbered}\n\nTo look at the relationship between numeric variables, we could compute\na numeric correlation, but a plot may be more useful, because it allows\nus to see outliers as well.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(poke, aes(x = attack, y = defense)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/ggplot-scatter-cor-1.png){width=2100}\n:::\n:::\n\n\n\n\nSometimes, we discover that a numeric variable which may seem to be continuous is actually relatively quantized. \nWhen this happens, it can be a good idea to use `geom_jitter` to provide some \"wiggle\" in the data so that you can still see the point density. \nChanging the point transparency (alpha = .5) can also help with overplotting.\n\nIn other cases, we might find that there is a prominent feature of a scatterplot (in this case, the line $y=x$ seems to stand out a bit from the overall point cloud). We can highlight this feature by adding a line at $y=x$ in red behind the points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(poke, aes(x = attack, y = sp_attack)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/ggplot-scatter-quantized-1.png){width=50%}\n:::\n\n```{.r .cell-code}\n\nggplot(poke, aes(x = attack, y = sp_attack)) + \n  geom_abline(slope = 1, color = \"red\") + \n  geom_jitter(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/ggplot-scatter-quantized-2.png){width=50%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(GGally) # an extension to ggplot2\nggpairs(poke[,c(\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\")], \n        # hp - sp_defense columns\n        lower = list(continuous = wrap(\"points\", alpha = .15)),\n        progress = F) \n```\n\n::: {.cell-output-display}\n![A scatterplot matrix of hit points, attack, defense, special attack, and special defense characteristics for all generation 1-8 Pokemon.](02a-eda_files/figure-html/ggplot-scatter-matrix-1.png){width=2400}\n:::\n:::\n\n\n\n\n`ggpairs` can also handle continuous variables, if you want to explore the options available. \n\n##### Python: pandas {.unnumbered}\n\nBelieve it or not, you don't have to go to `matplotlib` to get plots in python - you can get some plots from `pandas` directly, even if you are still using `matplotlib` under the hood (this is why you have to run `plt.show()` to get the plot to appear if you're working in markdown).\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\npoke.plot.scatter(x = 'attack', y = 'defense')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/pandas-scatterplot-1.png){width=672}\n:::\n:::\n\n\n\n\nPandas also includes a nice scatterplot matrix method. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\n\nvars = [6, 7,14,15]\nscatter_matrix(poke.iloc[:,vars], alpha = 0.2, figsize = (6, 6), diagonal = 'kde')\n## array([[<Axes: xlabel='total', ylabel='total'>,\n##         <Axes: xlabel='hp', ylabel='total'>,\n##         <Axes: xlabel='height_m', ylabel='total'>,\n##         <Axes: xlabel='weight_kg', ylabel='total'>],\n##        [<Axes: xlabel='total', ylabel='hp'>,\n##         <Axes: xlabel='hp', ylabel='hp'>,\n##         <Axes: xlabel='height_m', ylabel='hp'>,\n##         <Axes: xlabel='weight_kg', ylabel='hp'>],\n##        [<Axes: xlabel='total', ylabel='height_m'>,\n##         <Axes: xlabel='hp', ylabel='height_m'>,\n##         <Axes: xlabel='height_m', ylabel='height_m'>,\n##         <Axes: xlabel='weight_kg', ylabel='height_m'>],\n##        [<Axes: xlabel='total', ylabel='weight_kg'>,\n##         <Axes: xlabel='hp', ylabel='weight_kg'>,\n##         <Axes: xlabel='height_m', ylabel='weight_kg'>,\n##         <Axes: xlabel='weight_kg', ylabel='weight_kg'>]], dtype=object)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/pandas-scatterplot-matrix-3.png){width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nvars = [6, 7,14,15]\n\nplt.figure()\nsns.set_theme(style=\"ticks\")\nsns.pairplot(data = poke.iloc[:,vars])\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/seaborn-scatterplot-matrix-5.png){width=157}\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/seaborn-scatterplot-matrix-6.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/seaborn-scatterplot-matrix-7.png){width=672}\n:::\n:::\n\n\n\n\n\n:::\n\nIf you want summary statistics by group, you can get that using the\n`dplyr` package functions `select` and `group_by`, which we will learn\nmore about in the next section. (I'm cheating a bit by mentioning it\nnow, but it's just so useful!)\n\n\n\n\n\n\n\n\n\n::: callout-tip\n## Try it out: EDA {#EDA-housing-data}\n\n::: panel-tabset\n### Problem {.unnumbered}\n\nExplore the variables present in [the Lancaster County Assessor Housing Sales Data](https://github.com/srvanderplas/datasets/blob/main/raw/Lancaster%20County,%20NE%20-%20Assessor.xlsx?raw=true) [Documentation](https://github.com/srvanderplas/datasets/blob/main/code/lincoln-housing-sales.md).\n\nNote that some variables may be too messy to handle with the things that you have seen thus far - that is ok. \nAs you find irregularities, document them - these are things you may need to clean up in the dataset before you conduct a formal analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"readxl\" %in% installed.packages()) install.packages(\"readxl\")\nlibrary(readxl)\ndownload.file(\"https://github.com/srvanderplas/datasets/blob/main/raw/Lancaster%20County,%20NE%20-%20Assessor.xlsx?raw=true\", destfile = \"../data/lancaster-housing.xlsx\")\nhousing_lincoln <- read_xlsx(\"../data/lancaster-housing.xlsx\", sheet = 1, guess_max = 7000)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nhousing_lincoln = pd.read_excel(\"../data/lancaster-housing.xlsx\")\n```\n:::\n\n\n\n\n### R solution {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhousing_lincoln$TLA <- readr::parse_number(housing_lincoln$`TLA (Sqft)`)\nhousing_lincoln$Assd_Value <- readr::parse_number(housing_lincoln$Assd_Value)\n\nskim(housing_lincoln)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |                |\n|:------------------------|:---------------|\n|Name                     |housing_lincoln |\n|Number of rows           |6918            |\n|Number of columns        |9               |\n|_______________________  |                |\n|Column type frequency:   |                |\n|character                |6               |\n|numeric                  |3               |\n|________________________ |                |\n|Group variables          |None            |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Parcel_ID     |         0|             1|  17|  17|     0|     6740|          0|\n|Address       |         0|             1|  29|  50|     0|     6740|          0|\n|Owner         |         0|             1|   6|  67|     0|     6435|          0|\n|Owner Address |         0|             1|  25|  93|     0|     6184|          0|\n|Imp_Type      |         0|             1|   2|   3|     0|       39|          0|\n|TLA (Sqft)    |         0|             1|   3|   5|     0|     1767|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|      mean|       sd|    p0|    p25|      p50|    p75|    p100|hist  |\n|:-------------|---------:|-------------:|---------:|--------:|-----:|------:|--------:|------:|-------:|:-----|\n|Yr_Blt        |         0|             1|   1950.85|    22.55|  1900|   1933|   1954.0|   1963|    2023|‚ñÇ‚ñÉ‚ñá‚ñÇ‚ñÅ |\n|Assd_Value    |         0|             1| 229956.23| 96272.53| 36500| 174925| 214500.0| 259175| 1404800|‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñÅ |\n|TLA           |         0|             1|   1379.08|   599.09|   400|    966|   1235.5|   1612|    6819|‚ñá‚ñÇ‚ñÅ‚ñÅ‚ñÅ |\n\n\n:::\n:::\n\n\n\n\nLet's examine the numeric variables first:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(housing_lincoln$Assd_Value)\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-data-numeric-date-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n\nhist(housing_lincoln$Yr_Blt)\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-data-numeric-date-2.png){width=2100}\n:::\n:::\n\n\n\n\nLet's look at the years the houses were built and the Imp\\_Types.\nWe can find more data on what the Improvement Types mean [here](https://www.lincoln.ne.gov/files/sharedassets/intranet/county/clerk/protest-public/appraisal_card_code_sheet.pdf), where the various abbreviations are defined. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhousing_lincoln$decade <- 10*floor(housing_lincoln$Yr_Blt/10)\n\ntable(housing_lincoln$decade, useNA = 'ifany')\n## \n## 1900 1910 1920 1930 1940 1950 1960 1970 1980 1990 2000 2010 2020 \n##  245  295  885  414  647 1949 1429  282  550  116   72   24   10\ntable(housing_lincoln$Imp_Type)\n## \n##   BL   BN   C1   C2   CA   CB  CXF  CXU  CYF  CYU   D1   D2   D3   D4   D5   D6 \n##  163  764   11   39   48   17    4    3    7   25    2   40    9  232   45   10 \n##   DA   HC   M1   R1   R2   RA   RB   RR   RS  RXF  RXU  RYF  RYU   T1   T2   T3 \n##    2  132    1 3165  492  628   23   15  218  257   79   31   73  160    9   14 \n##   T4   T5   T6   T7   TA   TS  TYF \n##   17   37    5   21  110    9    1\ntable(housing_lincoln$Imp_Type, housing_lincoln$decade)\n##      \n##       1900 1910 1920 1930 1940 1950 1960 1970 1980 1990 2000 2010 2020\n##   BL     0    0    0    0    0    0  119   42    0    1    1    0    0\n##   BN    77   84  413  176   14    0    0    0    0    0    0    0    0\n##   C1     1    0    8    0    1    0    0    0    1    0    0    0    0\n##   C2    14    9   12    1    1    2    0    0    0    0    0    0    0\n##   CA     7   14   17    5    4    1    0    0    0    0    0    0    0\n##   CB     5   11    0    0    0    1    0    0    0    0    0    0    0\n##   CXF    0    1    2    0    1    0    0    0    0    0    0    0    0\n##   CXU    0    0    1    2    0    0    0    0    0    0    0    0    0\n##   CYF    0    5    2    0    0    0    0    0    0    0    0    0    0\n##   CYU    7    9    7    2    0    0    0    0    0    0    0    0    0\n##   D1     0    0    0    0    0    0    1    1    0    0    0    0    0\n##   D2     0    0    0    0    0    5   26    8    1    0    0    0    0\n##   D3     0    0    0    0    0    0    1    1    2    3    2    0    0\n##   D4     0    0    1    3   29   91   87    8    5    5    1    2    0\n##   D5     0    2    1   10    9   12    0    5    1    2    3    0    0\n##   D6     0    0    0    0    0    2    0    2    0    6    0    0    0\n##   DA     0    0    1    0    0    1    0    0    0    0    0    0    0\n##   HC     0    0    0    0    0    0   83    8   41    0    0    0    0\n##   M1     0    0    0    1    0    0    0    0    0    0    0    0    0\n##   R1     3    1   10    8  382 1641  902  133   52   10    3   10   10\n##   R2    33   46   76   42   19   11   48   25  163   27    0    2    0\n##   RA    47   51  165   87  115  104   13    7   26    6    4    3    0\n##   RB     4    5    8    5    1    0    0    0    0    0    0    0    0\n##   RR     0    0    0    0    1    9    3    0    0    1    1    0    0\n##   RS     0    0    2    0    4   33  145   26    8    0    0    0    0\n##   RXF   16   13  101   53   45   28    1    0    0    0    0    0    0\n##   RXU    3    8   31   12   18    7    0    0    0    0    0    0    0\n##   RYF   12   11    6    0    1    1    0    0    0    0    0    0    0\n##   RYU   16   25   21    7    2    0    0    0    2    0    0    0    0\n##   T1     0    0    0    0    0    0    0    6  124    8   22    0    0\n##   T2     0    0    0    0    0    0    0    0    3    0    0    6    0\n##   T3     0    0    0    0    0    0    0    4   10    0    0    0    0\n##   T4     0    0    0    0    0    0    0    0   16    0    0    1    0\n##   T5     0    0    0    0    0    0    0    0    8   29    0    0    0\n##   T6     0    0    0    0    0    0    0    0    4    1    0    0    0\n##   T7     0    0    0    0    0    0    0    0    5   13    3    0    0\n##   TA     0    0    0    0    0    0    0    0   74    4   32    0    0\n##   TS     0    0    0    0    0    0    0    6    3    0    0    0    0\n##   TYF    0    0    0    0    0    0    0    0    1    0    0    0    0\n\nplot(table(housing_lincoln$decade, housing_lincoln$Imp_Type),\n     main = \"Year Built and Improvement Type\")\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-data-year-1.png){width=2100}\n:::\n:::\n\n\n\n\nWe can also look at the square footage for each improvement type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhousing_lincoln %>%\n  subset(Imp_Type %in% c(\"BN\", \"R1\", \"R2\", \"RA\")) %>%\n  boxplot(TLA ~ Imp_Type, data = .)\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/unnamed-chunk-7-1.png){width=2100}\n:::\n:::\n\n\n\n\nThis makes sense - there are relatively few bungalows (BN), but R1 means 1 story house, R2 means 2 story house, and RA is a so-called 1.5 story house. \n\n### Python solution {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhousing_lincoln[\"TLA\"] = housing_lincoln[\"TLA (Sqft)\"].str.replace(\"[,\\$]\", \"\", regex = True)\n# For some reason, things without a comma just get NaN'd, so fix that\nhousing_lincoln.loc[housing_lincoln[\"TLA\"].isna(), \"TLA\"] = housing_lincoln.loc[housing_lincoln[\"TLA\"].isna(), \"TLA (Sqft)\"]\nhousing_lincoln[\"TLA\"] = pd.to_numeric(housing_lincoln[\"TLA\"], errors = 'coerce')\n\nhousing_lincoln[\"Assessed\"] = housing_lincoln[\"Assd_Value\"].str.replace(\"[,\\$]\", \"\", regex = True)\n# For some reason, things without a comma just get NaN'd, so fix that\nhousing_lincoln.loc[housing_lincoln[\"Assessed\"].isna(), \"Assessed\"] = housing_lincoln.loc[housing_lincoln[\"Assessed\"].isna(), \"Assd_Value\"]\nhousing_lincoln[\"Assessed\"] = pd.to_numeric(housing_lincoln[\"Assessed\"], errors = 'coerce')\n\nhousing_lincoln = housing_lincoln.drop([\"TLA (Sqft)\", \"Assd_Value\"], axis = 1)\n\n# housing_lincoln.describe()\nskim(housing_lincoln)\n## ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ skimpy summary ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n## ‚îÇ          Data Summary                Data Types                              ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì                       ‚îÇ\n## ‚îÇ ‚îÉ Dataframe         ‚îÉ Values ‚îÉ ‚îÉ Column Type ‚îÉ Count ‚îÉ                       ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î© ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©                       ‚îÇ\n## ‚îÇ ‚îÇ Number of rows    ‚îÇ 6918   ‚îÇ ‚îÇ string      ‚îÇ 5     ‚îÇ                       ‚îÇ\n## ‚îÇ ‚îÇ Number of columns ‚îÇ 8      ‚îÇ ‚îÇ int64       ‚îÇ 3     ‚îÇ                       ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                       ‚îÇ\n## ‚îÇ                                   number                                     ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì  ‚îÇ\n## ‚îÇ ‚îÉ colu ‚îÉ    ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ      ‚îÉ his ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ mn   ‚îÉ NA ‚îÉ NA % ‚îÉ mean ‚îÉ sd   ‚îÉ p0   ‚îÉ p25  ‚îÉ p50  ‚îÉ p75  ‚îÉ p100 ‚îÉ t   ‚îÉ  ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©  ‚îÇ\n## ‚îÇ ‚îÇ Yr_B ‚îÇ  0 ‚îÇ    0 ‚îÇ 1951 ‚îÇ 22.5 ‚îÇ 1900 ‚îÇ 1933 ‚îÇ 1954 ‚îÇ 1963 ‚îÇ 2023 ‚îÇ ‚ñÉ‚ñÉ‚ñà ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ lt   ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ    5 ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ ‚ñÑ‚ñÇ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ TLA  ‚îÇ  0 ‚îÇ    0 ‚îÇ 1379 ‚îÇ 599. ‚îÇ  400 ‚îÇ  966 ‚îÇ 1236 ‚îÇ 1612 ‚îÇ 6819 ‚îÇ ‚ñà‚ñÉ‚ñÅ ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ      ‚îÇ    ‚îÇ      ‚îÇ      ‚îÇ    1 ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ     ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ Asse ‚îÇ  0 ‚îÇ    0 ‚îÇ 2300 ‚îÇ 9627 ‚îÇ 3650 ‚îÇ 1749 ‚îÇ 2145 ‚îÇ 2592 ‚îÇ 1405 ‚îÇ ‚ñà‚ñÇ  ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ssed ‚îÇ    ‚îÇ      ‚îÇ   00 ‚îÇ    0 ‚îÇ    0 ‚îÇ   00 ‚îÇ   00 ‚îÇ   00 ‚îÇ  000 ‚îÇ     ‚îÇ  ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ\n## ‚îÇ                                   string                                     ‚îÇ\n## ‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì  ‚îÇ\n## ‚îÇ ‚îÉ       ‚îÉ    ‚îÉ      ‚îÉ       ‚îÉ       ‚îÉ       ‚îÉ       ‚îÉ char ‚îÉ       ‚îÉ tota ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ       ‚îÉ    ‚îÉ      ‚îÉ       ‚îÉ       ‚îÉ       ‚îÉ       ‚îÉ s    ‚îÉ words ‚îÉ l    ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ colum ‚îÉ    ‚îÉ      ‚îÉ short ‚îÉ longe ‚îÉ       ‚îÉ       ‚îÉ per  ‚îÉ per   ‚îÉ word ‚îÉ  ‚îÇ\n## ‚îÇ ‚îÉ n     ‚îÉ NA ‚îÉ NA % ‚îÉ est   ‚îÉ st    ‚îÉ min   ‚îÉ max   ‚îÉ row  ‚îÉ row   ‚îÉ s    ‚îÉ  ‚îÇ\n## ‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©  ‚îÇ\n## ‚îÇ ‚îÇ Parce ‚îÇ  0 ‚îÇ    0 ‚îÇ 10-25 ‚îÇ 10-25 ‚îÇ 10-25 ‚îÇ 17-34 ‚îÇ   17 ‚îÇ     1 ‚îÇ 6918 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ l_ID  ‚îÇ    ‚îÇ      ‚îÇ -125- ‚îÇ -125- ‚îÇ -125- ‚îÇ -241- ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ 007-0 ‚îÇ 007-0 ‚îÇ 007-0 ‚îÇ 001-0 ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ 00    ‚îÇ 00    ‚îÇ 00    ‚îÇ 00    ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ Addre ‚îÇ  0 ‚îÇ    0 ‚îÇ 2011  ‚îÇ 1100  ‚îÇ 100   ‚îÇ 964 S ‚îÇ 33.8 ‚îÇ   7.4 ‚îÇ 5141 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ss    ‚îÇ    ‚îÇ      ‚îÇ L ST, ‚îÇ SILVE ‚îÇ SYCAM ‚îÇ 49TH  ‚îÇ      ‚îÇ       ‚îÇ    0 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ LINCO ‚îÇ R     ‚îÇ ORE   ‚îÇ ST,   ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ LN,   ‚îÇ RIDGE ‚îÇ DR,   ‚îÇ LINCO ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ NE    ‚îÇ RD,   ‚îÇ LINCO ‚îÇ LN,   ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ 68510 ‚îÇ UNIT  ‚îÇ LN,   ‚îÇ NE    ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ #13,  ‚îÇ NE    ‚îÇ 68510 ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ LINCO ‚îÇ 68510 ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ LN,   ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ NE    ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ 68510 ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ Owner ‚îÇ  0 ‚îÇ    0 ‚îÇ NBK   ‚îÇ GOVAE ‚îÇ 1     ‚îÇ ZWIEB ‚îÇ   23 ‚îÇ   4.2 ‚îÇ 2929 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ PC    ‚îÇ RTS,  ‚îÇ CHRON ‚îÇ EL,   ‚îÇ      ‚îÇ       ‚îÇ    4 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ KENNE ‚îÇ 29:11 ‚îÇ THOMA ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ TH    ‚îÇ LLC   ‚îÇ S E   ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ CHARL ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ ES &  ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ KATHR ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ YN    ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ ANN   ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ REVOC ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ ABLE  ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ LIVIN ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ G     ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ TRUST ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ , THE ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ Owner ‚îÇ  0 ‚îÇ    0 ‚îÇ 3419  ‚îÇ Attn: ‚îÇ 100 N ‚îÇ UNION ‚îÇ 33.8 ‚îÇ   7.6 ‚îÇ 5229 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ Addre ‚îÇ    ‚îÇ      ‚îÇ J     ‚îÇ US    ‚îÇ 12 ST ‚îÇ BANK- ‚îÇ      ‚îÇ       ‚îÇ    2 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ss    ‚îÇ    ‚îÇ      ‚îÇ LINCO ‚îÇ BANK  ‚îÇ #UNIT ‚îÇ ANDRE ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ LN,   ‚îÇ NATIO ‚îÇ 1005  ‚îÇ W     ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ NE    ‚îÇ NAL   ‚îÇ LINCO ‚îÇ KAFKA ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ 68510 ‚îÇ ASSOC ‚îÇ LN,   ‚îÇ PO    ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ IATIO ‚îÇ NE    ‚îÇ BOX   ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ N C/O ‚îÇ 68508 ‚îÇ 82535 ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ YVONN ‚îÇ       ‚îÇ LINCO ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ E     ‚îÇ       ‚îÇ LN,   ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ LUNNE ‚îÇ       ‚îÇ NE    ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ Y 233 ‚îÇ       ‚îÇ 68501 ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ S 13  ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ ST    ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ #STE  ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ 1011  ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ LINCO ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ LN,   ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ NE    ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ       ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ 68508 ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ Imp_T ‚îÇ  0 ‚îÇ    0 ‚îÇ BN    ‚îÇ RXU   ‚îÇ BL    ‚îÇ TYF   ‚îÇ 2.07 ‚îÇ     1 ‚îÇ 6918 ‚îÇ  ‚îÇ\n## ‚îÇ ‚îÇ ype   ‚îÇ    ‚îÇ      ‚îÇ       ‚îÇ       ‚îÇ       ‚îÇ       ‚îÇ      ‚îÇ       ‚îÇ      ‚îÇ  ‚îÇ\n## ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ\n## ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ End ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n```\n:::\n\n\n\n\nLet's examine the numeric and date variables first:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhousing_lincoln[\"TLA\"].plot.hist()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-numeric-py-1.png){width=672}\n:::\n\n```{.python .cell-code}\n\nhousing_lincoln[\"Yr_Blt\"].plot.hist()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-numeric-py-2.png){width=672}\n:::\n:::\n\n\n\n\n\nLet's look at the years the houses were built and the Imp\\_Types.\nWe can find more data on what the Improvement Types mean [here](https://www.lincoln.ne.gov/files/sharedassets/intranet/county/clerk/protest-public/appraisal_card_code_sheet.pdf), where the various abbreviations are defined. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nhousing_lincoln['decade'] = 10*np.floor(housing_lincoln.Yr_Blt/10)\n\nhousing_lincoln[\"decade\"].groupby(housing_lincoln[\"decade\"]).count()\n## decade\n## 1900.0     245\n## 1910.0     295\n## 1920.0     885\n## 1930.0     414\n## 1940.0     647\n## 1950.0    1949\n## 1960.0    1429\n## 1970.0     282\n## 1980.0     550\n## 1990.0     116\n## 2000.0      72\n## 2010.0      24\n## 2020.0      10\n## Name: decade, dtype: int64\nhousing_lincoln[\"Imp_Type\"].groupby(housing_lincoln[\"Imp_Type\"]).count()\n## Imp_Type\n## BL      163\n## BN      764\n## C1       11\n## C2       39\n## CA       48\n## CB       17\n## CXF       4\n## CXU       3\n## CYF       7\n## CYU      25\n## D1        2\n## D2       40\n## D3        9\n## D4      232\n## D5       45\n## D6       10\n## DA        2\n## HC      132\n## M1        1\n## R1     3165\n## R2      492\n## RA      628\n## RB       23\n## RR       15\n## RS      218\n## RXF     257\n## RXU      79\n## RYF      31\n## RYU      73\n## T1      160\n## T2        9\n## T3       14\n## T4       17\n## T5       37\n## T6        5\n## T7       21\n## TA      110\n## TS        9\n## TYF       1\n## Name: Imp_Type, dtype: int64\n\npd.crosstab(index = housing_lincoln[\"decade\"], columns = housing_lincoln[\"Imp_Type\"])\n## Imp_Type   BL   BN  C1  C2  CA  CB  CXF  CXU  ...  T3  T4  T5  T6  T7  TA  TS  TYF\n## decade                                        ...                                 \n## 1900.0      0   77   1  14   7   5    0    0  ...   0   0   0   0   0   0   0    0\n## 1910.0      0   84   0   9  14  11    1    0  ...   0   0   0   0   0   0   0    0\n## 1920.0      0  413   8  12  17   0    2    1  ...   0   0   0   0   0   0   0    0\n## 1930.0      0  176   0   1   5   0    0    2  ...   0   0   0   0   0   0   0    0\n## 1940.0      0   14   1   1   4   0    1    0  ...   0   0   0   0   0   0   0    0\n## 1950.0      0    0   0   2   1   1    0    0  ...   0   0   0   0   0   0   0    0\n## 1960.0    119    0   0   0   0   0    0    0  ...   0   0   0   0   0   0   0    0\n## 1970.0     42    0   0   0   0   0    0    0  ...   4   0   0   0   0   0   6    0\n## 1980.0      0    0   1   0   0   0    0    0  ...  10  16   8   4   5  74   3    1\n## 1990.0      1    0   0   0   0   0    0    0  ...   0   0  29   1  13   4   0    0\n## 2000.0      1    0   0   0   0   0    0    0  ...   0   0   0   0   3  32   0    0\n## 2010.0      0    0   0   0   0   0    0    0  ...   0   1   0   0   0   0   0    0\n## 2020.0      0    0   0   0   0   0    0    0  ...   0   0   0   0   0   0   0    0\n## \n## [13 rows x 39 columns]\n\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.mosaicplot import mosaic\n\nmosaic(housing_lincoln, [\"decade\", \"Imp_Type\"], title = \"Housing Built by Type, Decade\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-categorical-py-5.png){width=672}\n:::\n:::\n\n\n\n\nWe can also look at the square footage for each improvement type:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nhousing_subcat = [\"BN\", \"R1\", \"RA\", \"R2\"]\n\nhousing_sub = housing_lincoln.loc[housing_lincoln[\"Imp_Type\"].isin(housing_subcat)]\nhousing_sub = housing_sub.assign(Imp_cat = pd.Categorical(housing_sub[\"Imp_Type\"], categories = housing_subcat))\n\nhousing_sub.boxplot(\"TLA\", by = \"Imp_cat\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](02a-eda_files/figure-html/housing-cat-cts-py-7.png){width=672}\n:::\n:::\n\n\n\nThis makes sense - there are relatively few bungalows (BN), but R1 means 1 story house, R2 means 2 story house, and RA is a so-called 1.5 story house; we would expect an increase in square footage with each additional floor of the house (broadly speaking).\n\n:::\n:::\n\n\n::: callout-note\n## Learn More: Janitor R package\n\nThe janitor package [@janitorpkg] has some very convenient functions for cleaning up messy data. \nOne of its best features is the `clean_names()` function, which creates names based on a capitalization/separation scheme of your choosing.\n\n![janitor and clean_names() by Allison\nHorst](../images/wrangling/janitor_clean_names.png){fig-alt=\"A cartoon beaver putting shapes with long, messy column names (pulled from a bin labeled ‚ÄúMESS‚Äù and ‚Äúnot so awesome column names‚Äù) into a contraption that converts them to lower snake case. The output has stylized text reading ‚ÄúWay more deal-withable column names.‚Äù Title text reads ‚Äújanitor::clean_names(): convert all column names to *_case!‚Äù\"}\n:::\n\n## References {#sec-eda-refs}\n",
    "supporting": [
      "02a-eda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}