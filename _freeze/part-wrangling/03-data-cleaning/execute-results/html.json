{
  "hash": "96c2274628e34d5986e7b3b4c2437022",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Cleaning {#sec-data-cleaning}\n\n## Objectives {-}\n\n- Identify required sequence of steps for data cleaning\n- Describe step-by-step data cleaning process in lay terms appropriately\n- Apply data manipulation verbs to prepare data for analysis\n- Understand the consequences of data cleaning steps for statistical analysis\n- Create summaries of data appropriate for analysis or display using data manipulation techniques\n\n\n## Introduction\n\nIn this section, we're going start learning how to work with data. \nGenerally speaking, data doesn't come in a form suitable for analysis^[See [this twitter thread](https://twitter.com/JennyBryan/status/722954354198597632) for some horror stories. \n[This tweet](https://twitter.com/jengolbeck/status/1153064308483510272?s=20) is also pretty good at showing one type of messiness.] - you have to clean it up, create the variables you care about, get rid of those you don't care about, and so on. \n\n::: aside\n![Data wrangling (by Allison Horst)](../images/wrangling/data_cowboy.png){fig-alt=\"Cartoon of a fuzzy monster with a cowboy hat and lasso, riding another fuzzy monster labeled “dplyr”, lassoing a group of angry / unruly looking creatures labeled “data.”\"}\n:::\n\nSome people call the process of cleaning and organizing your data \"data wrangling\", which is a fantastic way to think about chasing down all of the issues in the data. \n\n\nIn R, we'll be using the `tidyverse` for this. \nIt's a meta-package (a package that just loads other packages) that collects packages designed with the same philosophy^[The philosophy includes a preference for pipes, but this preference stems from the belief that code should be readable in the same way that text is readable.] and interface (basically, the commands will use predictable argument names and structure). \nYou've already been introduced to parts of the tidyverse - specifically, `readr` and `ggplot2`. \n\n`dplyr` (one of the packages in the tidyverse) creates a \"grammar of data manipulation\" to make it easier to describe different operations. \nI find the `dplyr` grammar to be extremely useful when talking about data operations, so I'm going to attempt to show you how to do the same operations in R with dplyr, and in Python (without the underlying framework). \n\nEach `dplyr` verb describes a common task when doing both exploratory data analysis and more formal statistical modeling. \nIn all tidyverse functions, **data comes first** -- literally, as it's the first argument to any function. \nIn addition, you don't use df$variable to access a variable - you refer to the variable by its name alone (\"bare\" names). \nThis makes the syntax much cleaner and easier to read, which is another principle of the tidy philosophy. \n\n\nIn Python, most data manipulation tasks are handled using `pandas`[@pandasIndexingSelectingData2022]. \nIn the interests of using a single consistent \"language\" for describing data manipulation tasks, I'll use the tidyverse \"verbs\" to describe operations in both languages. \nThe goal of this is to help focus your attention on the essentials of the operations, instead of the specific syntax.\n\nThere is also the `datar` python package[@pwwangDatarGrammarData2022], which attempts to port the dplyr grammar of data wrangling into python. \nWhile pandas tends to be fairly similar to base R in basic operation, `datar` may be more useful if you prefer the `dplyr` way of handling things using a data-first API. \n\n::: column-margin\nI haven't had the chance to add the `datar` package to this book, but it looks promising and may be worth your time to figure out. \nIt's a bit too new for me to teach right now - I want packages that will be maintained long-term if I'm going to teach them to others.\n:::\n\n\n::: {.callout-note}\n\n[There is an excellent dplyr cheatsheet available from RStudio](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf). You may want to print it out to have a copy to reference as you work through this chapter.\n\n[Here is a data wrangling with pandas cheatsheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf) that is formatted similarly to the dplyr cheat sheet.\n\n:::\n\n\n## Tidy Data\n\nThere are infinitely many ways to configure \"messy\" data, but data that is \"tidy\" has 3 attributes:\n\n1. Each variable has its own column\n2. Each observation has its own row\n3. Each value has its own cell\n\nThese attributes aren't sufficient to define \"clean\" data, but they work to define \"tidy\" data (in the same way that you can have a \"tidy\" room because all of your clothes are folded, but they aren't clean just because they're folded; you could have folded a pile of dirty clothes). \n\nWe'll get more into how to work with different \"messy\" data configurations in @sec-data-reshape and @sec-data-join, but it's worth keeping rules 1 and 3 in mind while working through this module. \n\n\n\n## Filter: Subset rows\n\nFilter allows us to work with a subset of a larger data frame, keeping only the rows we're interested in. \nWe provide one or more logical conditions, and only those rows which meet the logical conditions are returned from `filter()`. \nNote that unless we store the result from `filter()` in the original object, we don't change the original. \n\n![dplyr filter() by Allison Horst](../images/wrangling/dplyr_filter.jpg){fig-alt=\"Cartoon showing three fuzzy monsters either selecting or crossing out rows of a data table. If the type of animal in the table is “otter” and the site is “bay”, a monster is drawing a purple rectangle around the row. If those conditions are not met, another monster is putting a line through the column indicating it will be excluded. Stylized text reads “dplyr::filter() - keep rows that satisfy your conditions.”\"}\n\n\n::: {.callout-caution}\n\n### Example: starwars\n\nLet's explore how it works, using the `starwars` dataset, which contains a comprehensive list of the characters in the Star Wars movies. \n\nIn the interests of demonstrating the process on the same data, I've exported the starwars data to a CSV file using the `readr` package. I had to remove the list-columns (films, vehicles, starships) because that format isn't supported by CSV files. You can access the csv data [here](https://github.com/srvanderplas/datasets/raw/main/clean/starwars.csv). \n\n::: panel-tabset\n\n#### R {-}\n\nThis data set is included in the `dplyr` package, so we load that package and then use the `data()` function to load dataset into memory. \nThe loading isn't complete until we actually use the dataset though... so let's print the first few rows. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndata(starwars)\nstarwars\n## # A tibble: 87 × 14\n##    name     height  mass hair_color skin_color eye_color birth_year sex   gender\n##    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n##  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n##  2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n##  3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n##  4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n##  5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n##  6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n##  7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n##  8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n##  9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n## 10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n## # ℹ 77 more rows\n## # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n## #   vehicles <list>, starships <list>\n```\n:::\n\n\n\n\n#### Python {-}\n\nWe have to use the exported CSV data in python.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nstarwars = pd.read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/starwars.csv\")\nstarwars\n##               name  height   mass  ...     gender homeworld species\n## 0   Luke Skywalker   172.0   77.0  ...  masculine  Tatooine   Human\n## 1            C-3PO   167.0   75.0  ...  masculine  Tatooine   Droid\n## 2            R2-D2    96.0   32.0  ...  masculine     Naboo   Droid\n## 3      Darth Vader   202.0  136.0  ...  masculine  Tatooine   Human\n## 4      Leia Organa   150.0   49.0  ...   feminine  Alderaan   Human\n## ..             ...     ...    ...  ...        ...       ...     ...\n## 82             Rey     NaN    NaN  ...   feminine       NaN   Human\n## 83     Poe Dameron     NaN    NaN  ...  masculine       NaN   Human\n## 84             BB8     NaN    NaN  ...  masculine       NaN   Droid\n## 85  Captain Phasma     NaN    NaN  ...        NaN       NaN     NaN\n## 86   Padmé Amidala   165.0   45.0  ...   feminine     Naboo   Human\n## \n## [87 rows x 11 columns]\n\nfrom skimpy import skim\nskim(starwars)\n## ╭─────────────────────────────── skimpy summary ───────────────────────────────╮\n## │          Data Summary                Data Types                              │\n## │ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                       │\n## │ ┃ Dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                       │\n## │ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                       │\n## │ │ Number of rows    │ 87     │ │ string      │ 8     │                       │\n## │ │ Number of columns │ 11     │ │ float64     │ 3     │                       │\n## │ └───────────────────┴────────┘ └─────────────┴───────┘                       │\n## │                                   number                                     │\n## │ ┏━━━━━━┳━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━┳━━━━━━┳━━━━━┳━━━━━━┳━━━━━━┳━━━━━━┓  │\n## │ ┃ colu ┃    ┃       ┃      ┃       ┃    ┃      ┃     ┃      ┃      ┃      ┃  │\n## │ ┃ mn   ┃ NA ┃ NA %  ┃ mean ┃ sd    ┃ p0 ┃ p25  ┃ p50 ┃ p75  ┃ p100 ┃ hist ┃  │\n## │ ┡━━━━━━╇━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━╇━━━━━━╇━━━━━╇━━━━━━╇━━━━━━╇━━━━━━┩  │\n## │ │ heig │  6 │ 6.896 │ 174. │ 34.77 │ 66 │  167 │ 180 │  191 │  264 │  ▁   │  │\n## │ │ ht   │    │ 55172 │    4 │       │    │      │     │      │      │ ▁█▂  │  │\n## │ │      │    │ 41379 │      │       │    │      │     │      │      │      │  │\n## │ │      │    │    31 │      │       │    │      │     │      │      │      │  │\n## │ │ mass │ 28 │ 32.18 │ 97.3 │ 169.5 │ 15 │ 55.6 │  79 │ 84.5 │ 1358 │  █   │  │\n## │ │      │    │ 39080 │    1 │       │    │      │     │      │      │      │  │\n## │ │      │    │ 45977 │      │       │    │      │     │      │      │      │  │\n## │ │      │    │    01 │      │       │    │      │     │      │      │      │  │\n## │ │ birt │ 44 │ 50.57 │ 87.5 │ 154.7 │  8 │   35 │  52 │   72 │  896 │  █   │  │\n## │ │ h_ye │    │ 47126 │    7 │       │    │      │     │      │      │      │  │\n## │ │ ar   │    │ 43678 │      │       │    │      │     │      │      │      │  │\n## │ │      │    │    16 │      │       │    │      │     │      │      │      │  │\n## │ └──────┴────┴───────┴──────┴───────┴────┴──────┴─────┴──────┴──────┴──────┘  │\n## │                                   string                                     │\n## │ ┏━━━━━━━┳━━━━┳━━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┓  │\n## │ ┃       ┃    ┃       ┃       ┃      ┃       ┃      ┃       ┃ word ┃       ┃  │\n## │ ┃       ┃    ┃       ┃       ┃      ┃       ┃      ┃ chars ┃ s    ┃       ┃  │\n## │ ┃ colum ┃    ┃       ┃ short ┃ long ┃       ┃      ┃ per   ┃ per  ┃ total ┃  │\n## │ ┃ n     ┃ NA ┃ NA %  ┃ est   ┃ est  ┃ min   ┃ max  ┃ row   ┃ row  ┃ words ┃  │\n## │ ┡━━━━━━━╇━━━━╇━━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━┩  │\n## │ │ name  │  0 │     0 │ Rey   │ Jabb │ Ackba │ Zam  │  10.3 │  1.8 │   157 │  │\n## │ │       │    │       │       │ a    │ r     │ Wese │       │      │       │  │\n## │ │       │    │       │       │ Desi │       │ ll   │       │      │       │  │\n## │ │       │    │       │       │ liji │       │      │       │      │       │  │\n## │ │       │    │       │       │ c    │       │      │       │      │       │  │\n## │ │       │    │       │       │ Tiur │       │      │       │      │       │  │\n## │ │       │    │       │       │ e    │       │      │       │      │       │  │\n## │ │ hair_ │  5 │ 5.747 │ none  │ aubu │ aubur │ whit │  4.84 │ 0.98 │    85 │  │\n## │ │ color │    │ 12643 │       │ rn,  │ n     │ e    │       │      │       │  │\n## │ │       │    │ 67816 │       │ whit │       │      │       │      │       │  │\n## │ │       │    │    09 │       │ e    │       │      │       │      │       │  │\n## │ │ skin_ │  0 │     0 │ red   │ grey │ blue  │ yell │  5.97 │  1.2 │   106 │  │\n## │ │ color │    │       │       │ ,    │       │ ow   │       │      │       │  │\n## │ │       │    │       │       │ gree │       │      │       │      │       │  │\n## │ │       │    │       │       │ n,   │       │      │       │      │       │  │\n## │ │       │    │       │       │ yell │       │      │       │      │       │  │\n## │ │       │    │       │       │ ow   │       │      │       │      │       │  │\n## │ │ eye_c │  0 │     0 │ red   │ gree │ black │ yell │   5.1 │    1 │    89 │  │\n## │ │ olor  │    │       │       │ n,   │       │ ow   │       │      │       │  │\n## │ │       │    │       │       │ yell │       │      │       │      │       │  │\n## │ │       │    │       │       │ ow   │       │      │       │      │       │  │\n## │ │ sex   │  4 │ 4.597 │ male  │ herm │ femal │ none │  4.51 │ 0.95 │    83 │  │\n## │ │       │    │ 70114 │       │ aphr │ e     │      │       │      │       │  │\n## │ │       │    │ 94252 │       │ odit │       │      │       │      │       │  │\n## │ │       │    │    87 │       │ ic   │       │      │       │      │       │  │\n## │ │ gende │  4 │ 4.597 │ femin │ masc │ femin │ masc │   8.8 │ 0.95 │    83 │  │\n## │ │ r     │    │ 70114 │ ine   │ ulin │ ine   │ ulin │       │      │       │  │\n## │ │       │    │ 94252 │       │ e    │       │ e    │       │      │       │  │\n## │ │       │    │    87 │       │      │       │      │       │      │       │  │\n## │ │ homew │ 10 │ 11.49 │ Tund  │ Cato │ Alder │ Zola │  7.14 │ 0.98 │    85 │  │\n## │ │ orld  │    │ 42528 │       │ Neim │ aan   │ n    │       │      │       │  │\n## │ │       │    │ 73563 │       │ oidi │       │      │       │      │       │  │\n## │ │       │    │   218 │       │ a    │       │      │       │      │       │  │\n## │ │ speci │  4 │ 4.597 │ Dug   │ Yoda │ Aleen │ Zabr │  6.17 │ 0.99 │    86 │  │\n## │ │ es    │    │ 70114 │       │ 's   │ a     │ ak   │       │      │       │  │\n## │ │       │    │ 94252 │       │ spec │       │      │       │      │       │  │\n## │ │       │    │    87 │       │ ies  │       │      │       │      │       │  │\n## │ └───────┴────┴───────┴───────┴──────┴───────┴──────┴───────┴──────┴───────┘  │\n## ╰──────────────────────────────────── End ─────────────────────────────────────╯\n```\n:::\n\n\n\n\n:::\n\n\nOnce the data is set up, filtering the data (selecting certain **rows**) is actually very simple. \nOf course, we've talked about how to use logical indexing before in @sec-indexing, but here we'll focus on using specific functions to perform the same operation. \n\n::: panel-tabset\n\n#### R: `dplyr`\n\nThe dplyr verb for selecting rows is `filter`. \n`filter` takes a set of one or more logical conditions, using bare column names and logical operators. \nEach provided condition is combined using AND.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get only the people\nfilter(starwars, species == \"Human\")\n## # A tibble: 35 × 14\n##    name     height  mass hair_color skin_color eye_color birth_year sex   gender\n##    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n##  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n##  2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n##  3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n##  4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n##  5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n##  6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n##  7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n##  8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n##  9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n## 10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n## # ℹ 25 more rows\n## # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n## #   vehicles <list>, starships <list>\n\n# Get only the people who come from Tatooine\nfilter(starwars, species == \"Human\", homeworld == \"Tatooine\")\n## # A tibble: 8 × 14\n##   name      height  mass hair_color skin_color eye_color birth_year sex   gender\n##   <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n## 1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n## 2 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n## 3 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n## 4 Beru Whi…    165    75 brown      light      blue            47   fema… femin…\n## 5 Biggs Da…    183    84 black      light      brown           24   male  mascu…\n## 6 Anakin S…    188    84 blond      fair       blue            41.9 male  mascu…\n## 7 Shmi Sky…    163    NA black      fair       brown           72   fema… femin…\n## 8 Cliegg L…    183    NA brown      fair       blue            82   male  mascu…\n## # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n## #   vehicles <list>, starships <list>\n```\n:::\n\n\n\n\n\n#### Python\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Get only the people\nstarwars.query(\"species == 'Human'\")\n##                    name  height   mass  ...     gender     homeworld species\n## 0        Luke Skywalker   172.0   77.0  ...  masculine      Tatooine   Human\n## 3           Darth Vader   202.0  136.0  ...  masculine      Tatooine   Human\n## 4           Leia Organa   150.0   49.0  ...   feminine      Alderaan   Human\n## 5             Owen Lars   178.0  120.0  ...  masculine      Tatooine   Human\n## 6    Beru Whitesun lars   165.0   75.0  ...   feminine      Tatooine   Human\n## 8     Biggs Darklighter   183.0   84.0  ...  masculine      Tatooine   Human\n## 9        Obi-Wan Kenobi   182.0   77.0  ...  masculine       Stewjon   Human\n## 10     Anakin Skywalker   188.0   84.0  ...  masculine      Tatooine   Human\n## 11       Wilhuff Tarkin   180.0    NaN  ...  masculine        Eriadu   Human\n## 13             Han Solo   180.0   80.0  ...  masculine      Corellia   Human\n## 16       Wedge Antilles   170.0   77.0  ...  masculine      Corellia   Human\n## 17     Jek Tono Porkins   180.0  110.0  ...  masculine    Bestine IV   Human\n## 19            Palpatine   170.0   75.0  ...  masculine         Naboo   Human\n## 20            Boba Fett   183.0   78.2  ...  masculine        Kamino   Human\n## 23     Lando Calrissian   177.0   79.0  ...  masculine       Socorro   Human\n## 24                Lobot   175.0   79.0  ...  masculine        Bespin   Human\n## 26           Mon Mothma   150.0    NaN  ...   feminine     Chandrila   Human\n## 27         Arvel Crynyd     NaN    NaN  ...  masculine           NaN   Human\n## 30         Qui-Gon Jinn   193.0   89.0  ...  masculine           NaN   Human\n## 32        Finis Valorum   170.0    NaN  ...  masculine     Coruscant   Human\n## 40       Shmi Skywalker   163.0    NaN  ...   feminine      Tatooine   Human\n## 47           Mace Windu   188.0   84.0  ...  masculine    Haruun Kal   Human\n## 56         Gregar Typho   185.0   85.0  ...  masculine         Naboo   Human\n## 57                Cordé   157.0    NaN  ...   feminine         Naboo   Human\n## 58          Cliegg Lars   183.0    NaN  ...  masculine      Tatooine   Human\n## 62                Dormé   165.0    NaN  ...   feminine         Naboo   Human\n## 63                Dooku   193.0   80.0  ...  masculine       Serenno   Human\n## 64  Bail Prestor Organa   191.0    NaN  ...  masculine      Alderaan   Human\n## 65           Jango Fett   183.0   79.0  ...  masculine  Concord Dawn   Human\n## 70           Jocasta Nu   167.0    NaN  ...   feminine     Coruscant   Human\n## 78      Raymus Antilles   188.0   79.0  ...  masculine      Alderaan   Human\n## 81                 Finn     NaN    NaN  ...  masculine           NaN   Human\n## 82                  Rey     NaN    NaN  ...   feminine           NaN   Human\n## 83          Poe Dameron     NaN    NaN  ...  masculine           NaN   Human\n## 86        Padmé Amidala   165.0   45.0  ...   feminine         Naboo   Human\n## \n## [35 rows x 11 columns]\n\n# Get only the people who come from Tattoine\nstarwars.query(\"species == 'Human' & homeworld == 'Tatooine'\")\n##                   name  height   mass  ...     gender homeworld species\n## 0       Luke Skywalker   172.0   77.0  ...  masculine  Tatooine   Human\n## 3          Darth Vader   202.0  136.0  ...  masculine  Tatooine   Human\n## 5            Owen Lars   178.0  120.0  ...  masculine  Tatooine   Human\n## 6   Beru Whitesun lars   165.0   75.0  ...   feminine  Tatooine   Human\n## 8    Biggs Darklighter   183.0   84.0  ...  masculine  Tatooine   Human\n## 10    Anakin Skywalker   188.0   84.0  ...  masculine  Tatooine   Human\n## 40      Shmi Skywalker   163.0    NaN  ...   feminine  Tatooine   Human\n## 58         Cliegg Lars   183.0    NaN  ...  masculine  Tatooine   Human\n## \n## [8 rows x 11 columns]\n\n# This is another option if you prefer to keep the queries separate\n# starwars.query(\"species == 'Human'\").query(\"homeworld == 'Tatooine'\")\n```\n:::\n\n\n\n\n#### Base R\n\nIn base R, you would perform a filtering operation using `subset`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get only the people\nsubset(starwars, species == \"Human\")\n## # A tibble: 35 × 14\n##    name     height  mass hair_color skin_color eye_color birth_year sex   gender\n##    <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n##  1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n##  2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n##  3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n##  4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n##  5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n##  6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n##  7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n##  8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n##  9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n## 10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n## # ℹ 25 more rows\n## # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n## #   vehicles <list>, starships <list>\n\n# Get only the people who come from Tatooine\nsubset(starwars, species == \"Human\" & homeworld == \"Tatooine\")\n## # A tibble: 8 × 14\n##   name      height  mass hair_color skin_color eye_color birth_year sex   gender\n##   <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n## 1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n## 2 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n## 3 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n## 4 Beru Whi…    165    75 brown      light      blue            47   fema… femin…\n## 5 Biggs Da…    183    84 black      light      brown           24   male  mascu…\n## 6 Anakin S…    188    84 blond      fair       blue            41.9 male  mascu…\n## 7 Shmi Sky…    163    NA black      fair       brown           72   fema… femin…\n## 8 Cliegg L…    183    NA brown      fair       blue            82   male  mascu…\n## # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n## #   vehicles <list>, starships <list>\n```\n:::\n\n\n\n\nNotice that with `subset`, you have to use `&` to join two logical statements; it does not by default take multiple successive arguments. \n\n:::\n\n:::\n\n\n### Common Row Selection Tasks\n\nIn `dplyr`, there are a few helper functions which may be useful when constructing filter statements.\nIn base R or python, these tasks are still important, and so I'll do my best to show you easy ways to handle each task in each language.\n\n::: {.callout-demo collapse=\"true\"}\n\n#### Filtering by row number\n\n::: panel-tabset\n\n##### R: `dplyr` {-}\n\n`row_number()` is a helper function that is only used inside of another dplyr function (e.g. filter). \nYou might want to keep only even rows, or only the first 10 rows in a table. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\n\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\nfilter(poke, (row_number() %% 2 == 0)) \n## # A tibble: 763 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     1          2 https://img.… Ivys… <NA>    Gras…   405    60     62      63\n##  2     1          3 https://img.… Venu… Mega    Gras…   625    80    100     123\n##  3     1          5 https://img.… Char… <NA>    Fire    405    58     64      58\n##  4     1          6 https://img.… Char… Mega  X Fire…   634    78    130     111\n##  5     1          7 https://img.… Squi… <NA>    Water   314    44     48      65\n##  6     1          9 https://img.… Blas… <NA>    Water   530    79     83     100\n##  7     1         10 https://img.… Cate… <NA>    Bug     195    45     30      35\n##  8     1         12 https://img.… Butt… <NA>    Bug,…   395    60     45      50\n##  9     1         14 https://img.… Kaku… <NA>    Bug,…   205    45     25      50\n## 10     1         15 https://img.… Beed… Mega    Bug,…   495    65    150      40\n## # ℹ 753 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n# There are several pokemon who have multiple entries in the table,\n# so the pokedex_number doesn't line up with the row number.\n```\n:::\n\n\n\n\n##### Python {-}\n\nIn python, the easiest way to accomplish filtering by row number is by using `.iloc`. \nBut, up until now, we've only talked about how Python creates slices using `start:(end+1)` notation. \nThere is an additional option with slicing - `start:(end+1):by`. So if we want to get only even rows, we can use the index `[::2]`, which will give us row 0, 2, 4, 6, ... through the end of the dataset, because we didn't specify the start and end portions of the slice. \n\nBecause Python is 0-indexed, using `::2` will give us the opposite set of rows from that returned in R, which is 1-indexed.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\npoke = pd.read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\npoke.iloc[0::2]\n##       gen  pokedex_no  ... height_m weight_kg\n## 0       1           1  ...      0.7       6.9\n## 2       1           3  ...      2.0     100.0\n## 4       1           4  ...      0.6       8.5\n## 6       1           6  ...      1.7      90.5\n## 8       1           6  ...      1.7      90.5\n## ...   ...         ...  ...      ...       ...\n## 1516    9         999  ...      0.3       5.0\n## 1518    9        1001  ...      1.5      74.2\n## 1520    9        1003  ...      2.7     699.7\n## 1522    9        1005  ...      2.0     380.0\n## 1524    9        1007  ...      2.5     303.0\n## \n## [763 rows x 16 columns]\n```\n:::\n\n\n\nIf we want to get only odd rows, we can use the index `[1::2]`, which will start at row 1 and give us 1, 3, 5, ...\n\n##### Base R {-}\n\nIn base R, we'd use `seq()` to create an index vector instead of using the approach in filter and evaluating the whole index for a logical condition. \nAlternately, we can use `subset`, which requires a logical condition, and use `1:nrow(poke)` to create an index which we then use for deciding whether each row is even or odd.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke[seq(1, nrow(poke), 2),]\n## # A tibble: 763 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     1          1 https://img.… Bulb… <NA>    Gras…   318    45     49      49\n##  2     1          3 https://img.… Venu… <NA>    Gras…   525    80     82      83\n##  3     1          4 https://img.… Char… <NA>    Fire    309    39     52      43\n##  4     1          6 https://img.… Char… <NA>    Fire…   534    78     84      78\n##  5     1          6 https://img.… Char… Mega  Y Fire…   634    78    104      78\n##  6     1          8 https://img.… Wart… <NA>    Water   405    59     63      80\n##  7     1          9 https://img.… Blas… Mega    Water   630    79    103     120\n##  8     1         11 https://img.… Meta… <NA>    Bug     205    50     20      55\n##  9     1         13 https://img.… Weed… <NA>    Bug,…   195    40     35      30\n## 10     1         15 https://img.… Beed… <NA>    Bug,…   395    65     90      40\n## # ℹ 753 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n\nsubset(poke, 1:nrow(poke) %% 2 == 0)\n## # A tibble: 763 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     1          2 https://img.… Ivys… <NA>    Gras…   405    60     62      63\n##  2     1          3 https://img.… Venu… Mega    Gras…   625    80    100     123\n##  3     1          5 https://img.… Char… <NA>    Fire    405    58     64      58\n##  4     1          6 https://img.… Char… Mega  X Fire…   634    78    130     111\n##  5     1          7 https://img.… Squi… <NA>    Water   314    44     48      65\n##  6     1          9 https://img.… Blas… <NA>    Water   530    79     83     100\n##  7     1         10 https://img.… Cate… <NA>    Bug     195    45     30      35\n##  8     1         12 https://img.… Butt… <NA>    Bug,…   395    60     45      50\n##  9     1         14 https://img.… Kaku… <NA>    Bug,…   205    45     25      50\n## 10     1         15 https://img.… Beed… Mega    Bug,…   495    65    150      40\n## # ℹ 753 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\nThis is less fun than using `dplyr` because you have to repeat the name of the dataset at least twice using base R, but either option will get you where you're going. \nThe real power of `dplyr` is in the collection of the full set of verbs with a consistent user interface; nothing done in `dplyr` is so special that it can't be done in base R as well.\n\n:::\n\n:::\n\n::: {.callout-demo collapse=\"true\"}\n#### Sorting rows by variable values\n\nAnother common operation is to sort your data frame by the values of one or more variables.\n\n::: panel-tabset\n\n##### R: `dplyr` {-}\n\n`arrange()` is a dplyr verb for sort rows in the table by one or more variables. \nIt is often used with a helper function, `desc()`, which reverses the order of a variable, sorting it in descending order. \nMultiple arguments can be passed to `arrange` to sort the data frame by multiple columns hierarchically; each column can be modified with `desc()` separately.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(poke, desc(total))\n## # A tibble: 1,526 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     8        890 https://img.… Eter… Eterna… Pois…  1125   255    115     250\n##  2     1        150 https://img.… Mewt… Mega  X Psyc…   780   106    190     100\n##  3     1        150 https://img.… Mewt… Mega  Y Psyc…   780   106    150      70\n##  4     3        384 https://img.… Rayq… Mega    Drag…   780   105    180     100\n##  5     3        382 https://img.… Kyog… Primal  Water   770   100    150      90\n##  6     3        383 https://img.… Grou… Primal  Grou…   770   100    180     160\n##  7     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  8     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  9     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n## 10     4        493 https://img.… Arce… <NA>    Norm…   720   120    120     120\n## # ℹ 1,516 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\n##### Python {-}\n\nIn pandas, we use the `sort_values` function, which has an argument `ascending`. Multiple columns can be passed in to sort by multiple columns in a hierarchical manner.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npoke.sort_values(['total'], ascending = False)\n##       gen  pokedex_no  ... height_m weight_kg\n## 1370    8         890  ...     20.0     950.0\n## 584     3         384  ...      7.0     206.5\n## 282     1         150  ...      2.0     122.0\n## 283     1         150  ...      2.0     122.0\n## 580     3         382  ...      4.5     352.0\n## ...   ...         ...  ...      ...       ...\n## 1336    8         872  ...      0.3       3.8\n## 328     2         191  ...      0.3       1.8\n## 1283    8         824  ...      0.4       8.0\n## 1187    7         746  ...      0.2       0.3\n## 1188    7         746  ...      0.2       0.3\n## \n## [1526 rows x 16 columns]\n```\n:::\n\n\n\n\n\n##### Base R {-}\n\nThe `sort()` function in R can be used to sort a vector, but when sorting a data frame we usually want to use the `order()` function instead. \nThis is because `sort()` orders the values of the argument directly, where `order()` returns a sorted index.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(32, 25, 98, 45, 31, 19, 5)\nsort(x)\n## [1]  5 19 25 31 32 45 98\norder(x)\n## [1] 7 6 2 5 1 4 3\n```\n:::\n\n\n\n\nWhen working with a data frame, we want to sort the entire data frame's rows by the variables we choose; it is easiest to do this using an index to reorder the rows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke[order(poke$total, decreasing = T),]\n## # A tibble: 1,526 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     8        890 https://img.… Eter… Eterna… Pois…  1125   255    115     250\n##  2     1        150 https://img.… Mewt… Mega  X Psyc…   780   106    190     100\n##  3     1        150 https://img.… Mewt… Mega  Y Psyc…   780   106    150      70\n##  4     3        384 https://img.… Rayq… Mega    Drag…   780   105    180     100\n##  5     3        382 https://img.… Kyog… Primal  Water   770   100    150      90\n##  6     3        383 https://img.… Grou… Primal  Grou…   770   100    180     160\n##  7     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  8     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  9     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n## 10     4        493 https://img.… Arce… <NA>    Norm…   720   120    120     120\n## # ℹ 1,516 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n:::\n\n:::\n\n::: {.callout-demo collapse=\"true\"}\n#### Keep the top $n$ values of a variable\n\n::: panel-tabset\n\n##### R: `dplyr` {-}\n\n`slice_max()` will keep the top values of a specified variable. \nThis is like a filter statement, but it's a shortcut built to handle a common task. \nYou could write a filter statement that would do this, but it would take a few more lines of code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_max(poke, order_by = total, n = 5)\n## # A tibble: 6 × 16\n##     gen pokedex_no img_link       name  variant type  total    hp attack defense\n##   <dbl>      <dbl> <chr>          <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n## 1     8        890 https://img.p… Eter… Eterna… Pois…  1125   255    115     250\n## 2     1        150 https://img.p… Mewt… Mega  X Psyc…   780   106    190     100\n## 3     1        150 https://img.p… Mewt… Mega  Y Psyc…   780   106    150      70\n## 4     3        384 https://img.p… Rayq… Mega    Drag…   780   105    180     100\n## 5     3        382 https://img.p… Kyog… Primal  Water   770   100    150      90\n## 6     3        383 https://img.p… Grou… Primal  Grou…   770   100    180     160\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\nBy default, `slice_max()` returns values tied with the nth value as well, which is why our result has 6 rows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_max(poke, order_by = total, n = 5, with_ties = F) \n## # A tibble: 5 × 16\n##     gen pokedex_no img_link       name  variant type  total    hp attack defense\n##   <dbl>      <dbl> <chr>          <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n## 1     8        890 https://img.p… Eter… Eterna… Pois…  1125   255    115     250\n## 2     1        150 https://img.p… Mewt… Mega  X Psyc…   780   106    190     100\n## 3     1        150 https://img.p… Mewt… Mega  Y Psyc…   780   106    150      70\n## 4     3        384 https://img.p… Rayq… Mega    Drag…   780   105    180     100\n## 5     3        382 https://img.p… Kyog… Primal  Water   770   100    150      90\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\nOf course, there is a similar `slice_min()` function as well:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_min(poke, order_by = total, n = 5)\n## # A tibble: 5 × 16\n##     gen pokedex_no img_link       name  variant type  total    hp attack defense\n##   <dbl>      <dbl> <chr>          <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n## 1     7        746 https://img.p… Wish… Solo    Water   175    45     20      20\n## 2     7        746 https://img.p… Wish… Solo    Water   175    45     20      20\n## 3     2        191 https://img.p… Sunk… <NA>    Grass   180    30     30      30\n## 4     8        824 https://img.p… Blip… <NA>    Bug     180    25     20      20\n## 5     8        872 https://img.p… Snom  <NA>    Ice,…   185    30     25      35\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\n`slice_max` and `slice_min` also take a `prop` argument that gives you a certain proportion of the values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_max(poke, order_by = total, prop = .01)\n## # A tibble: 30 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     8        890 https://img.… Eter… Eterna… Pois…  1125   255    115     250\n##  2     1        150 https://img.… Mewt… Mega  X Psyc…   780   106    190     100\n##  3     1        150 https://img.… Mewt… Mega  Y Psyc…   780   106    150      70\n##  4     3        384 https://img.… Rayq… Mega    Drag…   780   105    180     100\n##  5     3        382 https://img.… Kyog… Primal  Water   770   100    150      90\n##  6     3        383 https://img.… Grou… Primal  Grou…   770   100    180     160\n##  7     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  8     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  9     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n## 10     4        493 https://img.… Arce… <NA>    Norm…   720   120    120     120\n## # ℹ 20 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\n##### Python {-}\n\nIn Python, `nlargest` and `nsmallest` work roughly the same as `dplyr`'s `slice_max` and `slice_min` for integer counts.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npoke.nlargest(5, 'total')\n##       gen  pokedex_no  ... height_m weight_kg\n## 1370    8         890  ...     20.0     950.0\n## 282     1         150  ...      2.0     122.0\n## 283     1         150  ...      2.0     122.0\n## 584     3         384  ...      7.0     206.5\n## 580     3         382  ...      4.5     352.0\n## \n## [5 rows x 16 columns]\npoke.nsmallest(5, 'total')\n##       gen  pokedex_no  ... height_m weight_kg\n## 1187    7         746  ...      0.2       0.3\n## 1188    7         746  ...      0.2       0.3\n## 328     2         191  ...      0.3       1.8\n## 1283    8         824  ...      0.4       8.0\n## 1336    8         872  ...      0.3       3.8\n## \n## [5 rows x 16 columns]\n```\n:::\n\n\n\n\nTo get proportions, though, we have to do some math:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npoke.nlargest(int(len(poke)*0.01), 'total')\n##       gen  pokedex_no  ... height_m weight_kg\n## 1370    8         890  ...     20.0     950.0\n## 282     1         150  ...      2.0     122.0\n## 283     1         150  ...      2.0     122.0\n## 584     3         384  ...      7.0     206.5\n## 580     3         382  ...      4.5     352.0\n## 582     3         383  ...      3.5     950.0\n## 1257    7         800  ...      2.4     230.0\n## 1258    7         800  ...      2.4     230.0\n## 1259    7         800  ...      2.4     230.0\n## 779     4         493  ...      3.2     320.0\n## 1126    6         718  ...      5.0     305.0\n## 1127    6         718  ...      5.0     305.0\n## 1128    6         718  ...      5.0     305.0\n## 405     2         248  ...      2.0     202.0\n## 567     3         373  ...      1.5     102.6\n## \n## [15 rows x 16 columns]\npoke.nsmallest(int(len(poke)*0.01), 'total')\n##       gen  pokedex_no  ... height_m weight_kg\n## 1187    7         746  ...      0.2       0.3\n## 1188    7         746  ...      0.2       0.3\n## 328     2         191  ...      0.3       1.8\n## 1283    8         824  ...      0.4       8.0\n## 1336    8         872  ...      0.3       3.8\n## 465     3         298  ...      0.2       2.0\n## 616     4         401  ...      0.3       2.2\n## 13      1          10  ...      0.3       2.9\n## 16      1          13  ...      0.3       3.2\n## 431     3         265  ...      0.3       3.6\n## 446     3         280  ...      0.4       6.6\n## 248     1         129  ...      0.9      10.0\n## 524     3         349  ...      0.6       7.4\n## 1032    6         664  ...      0.3       2.5\n## 1237    7         789  ...      0.2       0.1\n## \n## [15 rows x 16 columns]\n```\n:::\n\n\n\n\n##### Base R {-}\n\nThe simplest way to do this type of task with base R is to combine the order() function and indexing.\nIn the case of selecting the top 1% of rows, we need to use round(nrow(poke)*.01) to get an integer.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke[order(poke$total, decreasing = T)[1:5],]\n## # A tibble: 5 × 16\n##     gen pokedex_no img_link       name  variant type  total    hp attack defense\n##   <dbl>      <dbl> <chr>          <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n## 1     8        890 https://img.p… Eter… Eterna… Pois…  1125   255    115     250\n## 2     1        150 https://img.p… Mewt… Mega  X Psyc…   780   106    190     100\n## 3     1        150 https://img.p… Mewt… Mega  Y Psyc…   780   106    150      70\n## 4     3        384 https://img.p… Rayq… Mega    Drag…   780   105    180     100\n## 5     3        382 https://img.p… Kyog… Primal  Water   770   100    150      90\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\npoke[order(poke$total, decreasing = T)[1:round(nrow(poke)*.01)],]\n## # A tibble: 15 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     8        890 https://img.… Eter… Eterna… Pois…  1125   255    115     250\n##  2     1        150 https://img.… Mewt… Mega  X Psyc…   780   106    190     100\n##  3     1        150 https://img.… Mewt… Mega  Y Psyc…   780   106    150      70\n##  4     3        384 https://img.… Rayq… Mega    Drag…   780   105    180     100\n##  5     3        382 https://img.… Kyog… Primal  Water   770   100    150      90\n##  6     3        383 https://img.… Grou… Primal  Grou…   770   100    180     160\n##  7     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  8     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n##  9     7        800 https://img.… Necr… Ultra   Psyc…   754    97    167      97\n## 10     4        493 https://img.… Arce… <NA>    Norm…   720   120    120     120\n## 11     6        718 https://img.… Zyga… Comple… Drag…   708   216    100     121\n## 12     6        718 https://img.… Zyga… Comple… Drag…   708   216    100     121\n## 13     6        718 https://img.… Zyga… Comple… Drag…   708   216    100     121\n## 14     2        248 https://img.… Tyra… Mega    Rock…   700   100    164     150\n## 15     3        373 https://img.… Sala… Mega    Drag…   700    95    145     130\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\n:::\n\n:::\n\n\n\n::: {.callout-tip}\n\n### Try it out: Filtering\n\n::: panel-tabset\n\n#### Problem {-}\n\nUse the [Pokemon data](https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv) to accomplish the following:\n\n- create a new data frame that has only water type Pokemon\n- write a filter statement that looks for any Pokemon which has water type for either type1 or type2\n\n\n#### R: `dplyr` {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\nfilter(poke, str_detect(type, \"Water\"))[,c('gen', 'type', 'weight_kg')] \n## Error in `filter()`:\n## ℹ In argument: `str_detect(type, \"Water\")`.\n## Caused by error in `str_detect()`:\n## ! could not find function \"str_detect\"\n```\n:::\n\n\n\n`str_detect` looks for Water in the type entry -- Pokemon can have one or two types, and in type, these are separated by a comma. Instead of splitting the types apart (which we could do), it's easier to just check to see if water exists in the entire string.\n\n#### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\npoke = pd.read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\npoke.query(\"type.str.contains('Water')\")[['gen', 'type', 'weight_kg']]\n##       gen          type  weight_kg\n## 9       1         Water        9.0\n## 10      1         Water       22.5\n## 11      1         Water       85.5\n## 12      1         Water       85.5\n## 98      1         Water       19.6\n## ...   ...           ...        ...\n## 1488    9  Dragon,Water        8.0\n## 1489    9  Dragon,Water        8.0\n## 1490    9  Dragon,Water        8.0\n## 1491    9  Dragon,Water        8.0\n## 1505    9     Ice,Water       11.0\n## \n## [221 rows x 3 columns]\n```\n:::\n\n\n\n\n#### Base R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\nsubset(poke, grepl(\"Water\", type))\n## # A tibble: 221 × 16\n##      gen pokedex_no img_link      name  variant type  total    hp attack defense\n##    <dbl>      <dbl> <chr>         <chr> <chr>   <chr> <dbl> <dbl>  <dbl>   <dbl>\n##  1     1          7 https://img.… Squi… <NA>    Water   314    44     48      65\n##  2     1          8 https://img.… Wart… <NA>    Water   405    59     63      80\n##  3     1          9 https://img.… Blas… <NA>    Water   530    79     83     100\n##  4     1          9 https://img.… Blas… Mega    Water   630    79    103     120\n##  5     1         54 https://img.… Psyd… <NA>    Water   320    50     52      48\n##  6     1         55 https://img.… Gold… <NA>    Water   500    80     82      78\n##  7     1         60 https://img.… Poli… <NA>    Water   300    40     50      40\n##  8     1         61 https://img.… Poli… <NA>    Water   385    65     65      65\n##  9     1         62 https://img.… Poli… <NA>    Wate…   510    90     95      95\n## 10     1         72 https://img.… Tent… <NA>    Wate…   335    40     40      35\n## # ℹ 211 more rows\n## # ℹ 6 more variables: sp_attack <dbl>, sp_defense <dbl>, speed <dbl>,\n## #   species <chr>, height_m <dbl>, weight_kg <dbl>\n```\n:::\n\n\n\n\n`grepl` is a function that searches a string (`grep`) and returns a logical value (`grep+l`). \nIt's very useful for subsetting. \n\n:::\n\n:::\n\n\n## Select: Pick columns\n\nSometimes, we don't want to work with a set of 50 variables when we're only interested in 5.\nWhen that happens, we might be able to pick the variables we want by index (e.g. `df[, c(1, 3, 5)]`), but this can get tedious.\n\n::: panel-tabset\n\n### R: `dplyr` {-}\n\nIn `dplyr`, the function to pick a few columns is `select()`. The syntax from the help file (`?select`) looks deceptively simple.\n\n> select(.data, ...)\n\nSo as with just about every other tidyverse function, the first argument in a select statement is the data. \nAfter that, though, you can put just about anything that R can interpret. `...` means something along the lines of \"put in any additional arguments that make sense in context or might be passed on to other functions\".\n\nSo what can go in there?\n\n::: {.callout-note collapse=true}\n\n#### Ways to select variables in `dplyr`\n\nFirst, dplyr aims to work with standard R syntax, making it intuitive (and also, making it work with variable names instead of just variable indices).^[It accomplishes this through the magic of quasiquotation, which we will not cover in this course because it's basically witchcraft.]  \nMost `dplyr` commands work with \"bare\" variable names - you don't need to put the variable name in quotes to reference it. \nThere are a few exceptions to this rule, but they're very explicitly exceptions.\n\n- `var3:var5`: `select(df, var3:var5)` will give you a data frame with columns var3, anything between var3 and var 5, and var5\n\n- `!(<set of variables>)` will give you any columns that aren't in the set of variables in parentheses\n    - `(<set of vars 1>) & (<set of vars 2>)` will give you any variables that are in both set 1 and set 2. `(<set of vars 1>) | (<set of vars 2>)` will give you any variables that are in either set 1 or set 2.\n    - `c()` combines sets of variables.\n\n`dplyr` also defines a lot of variable selection \"helpers\" that can be used inside `select()` statements. \nThese statements work with bare column names (so you don't have to put quotes around the column names when you use them).\n\n- `everything()` matches all variables\n- `last_col()` matches the last variable. `last_col(offset = n)` selects the n-th to last variable.\n- `starts_with(\"xyz\")` will match any columns with names that start with xyz. Similarly, `ends_with()` does exactly what you'd expect as well.\n- `contains(\"xyz\")` will match any columns with names containing the literal string \"xyz\". Note, `contains` does not work with regular expressions (you don't need to know what that means right now).\n- `matches(regex)` takes a regular expression as an argument and returns all columns matching that expression.\n- `num_range(prefix, range)` selects any columns that start with prefix and have numbers matching the provided numerical range.\n\nThere are also selectors that deal with character vectors. \nThese can be useful if you have a list of important variables and want to just keep those variables.\n\n- `all_of(char)` matches all variable names in the character vector `char`. If one of the variables doesn't exist, this will return an error.\n- `any_of(char)` matches the contents of the character vector `char`, but does not throw an error if the variable doesn't exist in the data set.\n\nThere's one final selector -\n\n- `where()` applies a function to each variable and selects those for which the function returns TRUE. This provides a lot of flexibility and opportunity to be creative.\n\n:::\n\nLet's try these selector functions out and see what we can accomplish!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\ndata(flights)\nstr(flights)\n## tibble [336,776 × 19] (S3: tbl_df/tbl/data.frame)\n##  $ year          : int [1:336776] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ...\n##  $ month         : int [1:336776] 1 1 1 1 1 1 1 1 1 1 ...\n##  $ day           : int [1:336776] 1 1 1 1 1 1 1 1 1 1 ...\n##  $ dep_time      : int [1:336776] 517 533 542 544 554 554 555 557 557 558 ...\n##  $ sched_dep_time: int [1:336776] 515 529 540 545 600 558 600 600 600 600 ...\n##  $ dep_delay     : num [1:336776] 2 4 2 -1 -6 -4 -5 -3 -3 -2 ...\n##  $ arr_time      : int [1:336776] 830 850 923 1004 812 740 913 709 838 753 ...\n##  $ sched_arr_time: int [1:336776] 819 830 850 1022 837 728 854 723 846 745 ...\n##  $ arr_delay     : num [1:336776] 11 20 33 -18 -25 12 19 -14 -8 8 ...\n##  $ carrier       : chr [1:336776] \"UA\" \"UA\" \"AA\" \"B6\" ...\n##  $ flight        : int [1:336776] 1545 1714 1141 725 461 1696 507 5708 79 301 ...\n##  $ tailnum       : chr [1:336776] \"N14228\" \"N24211\" \"N619AA\" \"N804JB\" ...\n##  $ origin        : chr [1:336776] \"EWR\" \"LGA\" \"JFK\" \"JFK\" ...\n##  $ dest          : chr [1:336776] \"IAH\" \"IAH\" \"MIA\" \"BQN\" ...\n##  $ air_time      : num [1:336776] 227 227 160 183 116 150 158 53 140 138 ...\n##  $ distance      : num [1:336776] 1400 1416 1089 1576 762 ...\n##  $ hour          : num [1:336776] 5 5 5 5 6 5 6 6 6 6 ...\n##  $ minute        : num [1:336776] 15 29 40 45 0 58 0 0 0 0 ...\n##  $ time_hour     : POSIXct[1:336776], format: \"2013-01-01 05:00:00\" \"2013-01-01 05:00:00\" ...\n```\n:::\n\n\n\n\nWe'll start out with the `nycflights13` package, which contains information on all flights that left a NYC airport to destinations in the US, Puerto Rico, and the US Virgin Islands.\n\n::: {.callout-tip}\n\nYou might want to try out your EDA (Exploratory Data Analysis) skills to see what you can find out about the dataset, before seeing how `select()` works.\n\n:::\n\n\nWe could get a data frame of departure information for each flight:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, flight, year:day, tailnum, origin, matches(\"dep\"))\n## # A tibble: 336,776 × 9\n##    flight  year month   day tailnum origin dep_time sched_dep_time dep_delay\n##     <int> <int> <int> <int> <chr>   <chr>     <int>          <int>     <dbl>\n##  1   1545  2013     1     1 N14228  EWR         517            515         2\n##  2   1714  2013     1     1 N24211  LGA         533            529         4\n##  3   1141  2013     1     1 N619AA  JFK         542            540         2\n##  4    725  2013     1     1 N804JB  JFK         544            545        -1\n##  5    461  2013     1     1 N668DN  LGA         554            600        -6\n##  6   1696  2013     1     1 N39463  EWR         554            558        -4\n##  7    507  2013     1     1 N516JB  EWR         555            600        -5\n##  8   5708  2013     1     1 N829AS  LGA         557            600        -3\n##  9     79  2013     1     1 N593JB  JFK         557            600        -3\n## 10    301  2013     1     1 N3ALAA  LGA         558            600        -2\n## # ℹ 336,766 more rows\n```\n:::\n\n\n\n\nPerhaps we want the plane and flight ID information to be the first columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  select(carrier:dest, everything())\n## # A tibble: 336,776 × 19\n##    carrier flight tailnum origin dest   year month   day dep_time sched_dep_time\n##    <chr>    <int> <chr>   <chr>  <chr> <int> <int> <int>    <int>          <int>\n##  1 UA        1545 N14228  EWR    IAH    2013     1     1      517            515\n##  2 UA        1714 N24211  LGA    IAH    2013     1     1      533            529\n##  3 AA        1141 N619AA  JFK    MIA    2013     1     1      542            540\n##  4 B6         725 N804JB  JFK    BQN    2013     1     1      544            545\n##  5 DL         461 N668DN  LGA    ATL    2013     1     1      554            600\n##  6 UA        1696 N39463  EWR    ORD    2013     1     1      554            558\n##  7 B6         507 N516JB  EWR    FLL    2013     1     1      555            600\n##  8 EV        5708 N829AS  LGA    IAD    2013     1     1      557            600\n##  9 B6          79 N593JB  JFK    MCO    2013     1     1      557            600\n## 10 AA         301 N3ALAA  LGA    ORD    2013     1     1      558            600\n## # ℹ 336,766 more rows\n## # ℹ 9 more variables: dep_delay <dbl>, arr_time <int>, sched_arr_time <int>,\n## #   arr_delay <dbl>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n## #   time_hour <dttm>\n```\n:::\n\n\n\n\nNote that `everything()` won't duplicate columns you've already added.\n\nExploring the difference between bare name selection and `all_of()`/`any_of()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  select(carrier, flight, tailnum, matches(\"time\"))\n## # A tibble: 336,776 × 9\n##    carrier flight tailnum dep_time sched_dep_time arr_time sched_arr_time\n##    <chr>    <int> <chr>      <int>          <int>    <int>          <int>\n##  1 UA        1545 N14228       517            515      830            819\n##  2 UA        1714 N24211       533            529      850            830\n##  3 AA        1141 N619AA       542            540      923            850\n##  4 B6         725 N804JB       544            545     1004           1022\n##  5 DL         461 N668DN       554            600      812            837\n##  6 UA        1696 N39463       554            558      740            728\n##  7 B6         507 N516JB       555            600      913            854\n##  8 EV        5708 N829AS       557            600      709            723\n##  9 B6          79 N593JB       557            600      838            846\n## 10 AA         301 N3ALAA       558            600      753            745\n## # ℹ 336,766 more rows\n## # ℹ 2 more variables: air_time <dbl>, time_hour <dttm>\n\nvarlist <- c(\"carrier\", \"flight\", \"tailnum\",\n             \"dep_time\", \"sched_dep_time\", \"arr_time\", \"sched_arr_time\",\n             \"air_time\")\n\nflights %>%\n  select(all_of(varlist))\n## # A tibble: 336,776 × 8\n##    carrier flight tailnum dep_time sched_dep_time arr_time sched_arr_time\n##    <chr>    <int> <chr>      <int>          <int>    <int>          <int>\n##  1 UA        1545 N14228       517            515      830            819\n##  2 UA        1714 N24211       533            529      850            830\n##  3 AA        1141 N619AA       542            540      923            850\n##  4 B6         725 N804JB       544            545     1004           1022\n##  5 DL         461 N668DN       554            600      812            837\n##  6 UA        1696 N39463       554            558      740            728\n##  7 B6         507 N516JB       555            600      913            854\n##  8 EV        5708 N829AS       557            600      709            723\n##  9 B6          79 N593JB       557            600      838            846\n## 10 AA         301 N3ALAA       558            600      753            745\n## # ℹ 336,766 more rows\n## # ℹ 1 more variable: air_time <dbl>\n\nvarlist <- c(varlist, \"whoops\")\n\nflights %>%\n  select(all_of(varlist)) # this errors out b/c whoops doesn't exist\n## Error in `select()` at magrittr/R/pipe.R:136:3:\n## ℹ In argument: `all_of(varlist)`.\n## Caused by error in `all_of()` at rlang/R/eval-tidy.R:121:3:\n## ! Can't subset elements that don't exist.\n## ✖ Element `whoops` doesn't exist.\n\nflights %>%\nselect(any_of(varlist)) # this runs just fine\n## # A tibble: 336,776 × 8\n##    carrier flight tailnum dep_time sched_dep_time arr_time sched_arr_time\n##    <chr>    <int> <chr>      <int>          <int>    <int>          <int>\n##  1 UA        1545 N14228       517            515      830            819\n##  2 UA        1714 N24211       533            529      850            830\n##  3 AA        1141 N619AA       542            540      923            850\n##  4 B6         725 N804JB       544            545     1004           1022\n##  5 DL         461 N668DN       554            600      812            837\n##  6 UA        1696 N39463       554            558      740            728\n##  7 B6         507 N516JB       555            600      913            854\n##  8 EV        5708 N829AS       557            600      709            723\n##  9 B6          79 N593JB       557            600      838            846\n## 10 AA         301 N3ALAA       558            600      753            745\n## # ℹ 336,766 more rows\n## # ℹ 1 more variable: air_time <dbl>\n```\n:::\n\n\n\n\n\nSo for now, at least in R, you know how to cut your data down to size rowwise (with `filter`) and column-wise (with `select`).\n\n\n\n### Python {-}\n\nFirst, let's install the nycflights13 package[@chowNycflights13DataPackage2020] in python by typing the following into your **system terminal**.\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install nycflights13\n## Requirement already satisfied: nycflights13 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (0.0.3)\n## Requirement already satisfied: pandas>=0.24.0 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (from nycflights13) (2.3.1)\n## Requirement already satisfied: numpy>=1.23.2 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (from pandas>=0.24.0->nycflights13) (2.3.2)\n## Requirement already satisfied: python-dateutil>=2.8.2 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (from pandas>=0.24.0->nycflights13) (2.9.0.post0)\n## Requirement already satisfied: pytz>=2020.1 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (from pandas>=0.24.0->nycflights13) (2025.2)\n## Requirement already satisfied: tzdata>=2022.7 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (from pandas>=0.24.0->nycflights13) (2025.2)\n## Requirement already satisfied: six>=1.5 in /home/susan/.virtualenvs/book/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas>=0.24.0->nycflights13) (1.17.0)\n```\n:::\n\n\n\n\nThen, we can load the `flights` data from the `nycflights13` package.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom nycflights13 import flights\n```\n:::\n\n\n\n\nSelect operations are not as easy in python as they are when using `dplyr::select()` with helpers, but of course you can accomplish the same tasks.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncols = flights.columns\n\n# Rearrange column order by manual indexing\nx = cols[9:13].append(cols[0:9])\nx = x.append(cols[13:19])\n\n# Then use the index to rearrange the columns\nflights.loc[:,x]\n##        carrier  flight tailnum  ... hour  minute             time_hour\n## 0           UA    1545  N14228  ...    5      15  2013-01-01T10:00:00Z\n## 1           UA    1714  N24211  ...    5      29  2013-01-01T10:00:00Z\n## 2           AA    1141  N619AA  ...    5      40  2013-01-01T10:00:00Z\n## 3           B6     725  N804JB  ...    5      45  2013-01-01T10:00:00Z\n## 4           DL     461  N668DN  ...    6       0  2013-01-01T11:00:00Z\n## ...        ...     ...     ...  ...  ...     ...                   ...\n## 336771      9E    3393     NaN  ...   14      55  2013-09-30T18:00:00Z\n## 336772      9E    3525     NaN  ...   22       0  2013-10-01T02:00:00Z\n## 336773      MQ    3461  N535MQ  ...   12      10  2013-09-30T16:00:00Z\n## 336774      MQ    3572  N511MQ  ...   11      59  2013-09-30T15:00:00Z\n## 336775      MQ    3531  N839MQ  ...    8      40  2013-09-30T12:00:00Z\n## \n## [336776 rows x 19 columns]\n```\n:::\n\n\n\n\n#### List Comprehensions {-}\n\nIn Python, there are certain shorthands called \"list comprehensions\" [@pythonfoundationDataStructures2022] that can perform similar functions to e.g. the `matches()` function in dplyr. \n\nSuppose we want to get all columns containing the word 'time'. \nWe could iterate through the list of columns (`flights.columns`) and add the column name any time we detect the word 'time' within. \nThat is essentially what the following code does: \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# This gets all columns that contain time\ntimecols = [col for col in flights.columns if 'time' in col]\ntimecols\n## ['dep_time', 'sched_dep_time', 'arr_time', 'sched_arr_time', 'air_time', 'time_hour']\n```\n:::\n\n\n\n\nExplaining the code:\n\n- `for col in flights.columns` iterates through the list of columns, storing each column name in the variable `col`\n- `if 'time' in col` detects the presence of the word 'time' in the column name stored in `col`\n- the `col` out front adds the column name in the variable `col` to the array of columns to keep\n\n#### Selecting columns in Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# This gets all columns that contain time\ntimecols = [col for col in flights.columns if 'time' in col]\n# Other columns\nselcols = [\"carrier\", \"flight\", \"tailnum\"]\n# Combine the two lists\nselcols.extend(timecols)\n\n# Subset the data frame\nflights.loc[:,selcols]\n##        carrier  flight tailnum  ...  sched_arr_time  air_time             time_hour\n## 0           UA    1545  N14228  ...             819     227.0  2013-01-01T10:00:00Z\n## 1           UA    1714  N24211  ...             830     227.0  2013-01-01T10:00:00Z\n## 2           AA    1141  N619AA  ...             850     160.0  2013-01-01T10:00:00Z\n## 3           B6     725  N804JB  ...            1022     183.0  2013-01-01T10:00:00Z\n## 4           DL     461  N668DN  ...             837     116.0  2013-01-01T11:00:00Z\n## ...        ...     ...     ...  ...             ...       ...                   ...\n## 336771      9E    3393     NaN  ...            1634       NaN  2013-09-30T18:00:00Z\n## 336772      9E    3525     NaN  ...            2312       NaN  2013-10-01T02:00:00Z\n## 336773      MQ    3461  N535MQ  ...            1330       NaN  2013-09-30T16:00:00Z\n## 336774      MQ    3572  N511MQ  ...            1344       NaN  2013-09-30T15:00:00Z\n## 336775      MQ    3531  N839MQ  ...            1020       NaN  2013-09-30T12:00:00Z\n## \n## [336776 rows x 9 columns]\n\nselcols.extend([\"whoops\"])\nselcols\n## ['carrier', 'flight', 'tailnum', 'dep_time', 'sched_dep_time', 'arr_time', 'sched_arr_time', 'air_time', 'time_hour', 'whoops']\n\n# Subset the data frame\nflights.loc[:,selcols]\n## KeyError: \"['whoops'] not in index\"\n\n# Error-tolerance - use list comprehension to check if \n# variable names are in the data frame\nselcols_fixed = [x for x in selcols if x in flights.columns]\nflights.loc[:,selcols_fixed]\n##        carrier  flight tailnum  ...  sched_arr_time  air_time             time_hour\n## 0           UA    1545  N14228  ...             819     227.0  2013-01-01T10:00:00Z\n## 1           UA    1714  N24211  ...             830     227.0  2013-01-01T10:00:00Z\n## 2           AA    1141  N619AA  ...             850     160.0  2013-01-01T10:00:00Z\n## 3           B6     725  N804JB  ...            1022     183.0  2013-01-01T10:00:00Z\n## 4           DL     461  N668DN  ...             837     116.0  2013-01-01T11:00:00Z\n## ...        ...     ...     ...  ...             ...       ...                   ...\n## 336771      9E    3393     NaN  ...            1634       NaN  2013-09-30T18:00:00Z\n## 336772      9E    3525     NaN  ...            2312       NaN  2013-10-01T02:00:00Z\n## 336773      MQ    3461  N535MQ  ...            1330       NaN  2013-09-30T16:00:00Z\n## 336774      MQ    3572  N511MQ  ...            1344       NaN  2013-09-30T15:00:00Z\n## 336775      MQ    3531  N839MQ  ...            1020       NaN  2013-09-30T12:00:00Z\n## \n## [336776 rows x 9 columns]\n```\n:::\n\n\n\n\n### Base R {-}\n\nIn base R, we typically select columns by name or index directly. \nThis is nowhere near as convenient, of course, but there are little shorthand ways to replicate the functionality of e.g. `matches` in `dplyr`.\n\n`grepl` is a shorthand function for `grep`, which searches for a pattern in a vector of strings.\n`grepl` returns a logical vector indicating whether the pattern (`\"dep\"`, in this case) was found in the vector (`names(flights)`, in this case). \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndepcols <- names(flights)[grepl(\"dep\", names(flights))]\ncollist <- c(\"flight\", \"year\", \"month\", \"day\", \"tailnum\", \"origin\", depcols)\n\nflights[,collist]\n## # A tibble: 336,776 × 9\n##    flight  year month   day tailnum origin dep_time sched_dep_time dep_delay\n##     <int> <int> <int> <int> <chr>   <chr>     <int>          <int>     <dbl>\n##  1   1545  2013     1     1 N14228  EWR         517            515         2\n##  2   1714  2013     1     1 N24211  LGA         533            529         4\n##  3   1141  2013     1     1 N619AA  JFK         542            540         2\n##  4    725  2013     1     1 N804JB  JFK         544            545        -1\n##  5    461  2013     1     1 N668DN  LGA         554            600        -6\n##  6   1696  2013     1     1 N39463  EWR         554            558        -4\n##  7    507  2013     1     1 N516JB  EWR         555            600        -5\n##  8   5708  2013     1     1 N829AS  LGA         557            600        -3\n##  9     79  2013     1     1 N593JB  JFK         557            600        -3\n## 10    301  2013     1     1 N3ALAA  LGA         558            600        -2\n## # ℹ 336,766 more rows\n```\n:::\n\n\n\n\nPerhaps we want the plane and flight ID information to be the first columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_order <- names(flights)\nnew_order <- new_order[c(10:14, 1:9, 15:19)]\n\nflights[,new_order]\n## # A tibble: 336,776 × 19\n##    carrier flight tailnum origin dest   year month   day dep_time sched_dep_time\n##    <chr>    <int> <chr>   <chr>  <chr> <int> <int> <int>    <int>          <int>\n##  1 UA        1545 N14228  EWR    IAH    2013     1     1      517            515\n##  2 UA        1714 N24211  LGA    IAH    2013     1     1      533            529\n##  3 AA        1141 N619AA  JFK    MIA    2013     1     1      542            540\n##  4 B6         725 N804JB  JFK    BQN    2013     1     1      544            545\n##  5 DL         461 N668DN  LGA    ATL    2013     1     1      554            600\n##  6 UA        1696 N39463  EWR    ORD    2013     1     1      554            558\n##  7 B6         507 N516JB  EWR    FLL    2013     1     1      555            600\n##  8 EV        5708 N829AS  LGA    IAD    2013     1     1      557            600\n##  9 B6          79 N593JB  JFK    MCO    2013     1     1      557            600\n## 10 AA         301 N3ALAA  LGA    ORD    2013     1     1      558            600\n## # ℹ 336,766 more rows\n## # ℹ 9 more variables: dep_delay <dbl>, arr_time <int>, sched_arr_time <int>,\n## #   arr_delay <dbl>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n## #   time_hour <dttm>\n```\n:::\n\n\n\n\nThis is less convenient than `dplyr::everything` in part because it depends on us to get the column indexes right. \n\n:::\n\n<!-- End Select-pick-columns tabset -->\n\n::: {.callout-demo collapse=\"true\"}\n\n### Rearranging Columns\n\n::: panel-tabset\n\n#### `dplyr::relocate`\n\nAnother handy `dplyr` function is `relocate`; while you definitely can do this operation in many, many different ways, it may be simpler to do it using relocate. \nBut, I'm covering relocate here mostly because it also comes with this amazing cartoon illustration.\n\n![relocate lets you rearrange columns (by Allison Horst)](../images/wrangling/dplyr_relocate.png){fig-alt=\"Cartoon of fuzzy monsters moving columns around in fork lifts, while one supervises. Stylized text reads “dplyr::relocate() - move columns around! Default: move to FRONT , or move to .before or .after a specified column.\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Move flight specific info to the front\ndata(flights, package = \"nycflights13\")\nrelocate(flights, carrier:dest, everything())\n## # A tibble: 336,776 × 19\n##    carrier flight tailnum origin dest   year month   day dep_time sched_dep_time\n##    <chr>    <int> <chr>   <chr>  <chr> <int> <int> <int>    <int>          <int>\n##  1 UA        1545 N14228  EWR    IAH    2013     1     1      517            515\n##  2 UA        1714 N24211  LGA    IAH    2013     1     1      533            529\n##  3 AA        1141 N619AA  JFK    MIA    2013     1     1      542            540\n##  4 B6         725 N804JB  JFK    BQN    2013     1     1      544            545\n##  5 DL         461 N668DN  LGA    ATL    2013     1     1      554            600\n##  6 UA        1696 N39463  EWR    ORD    2013     1     1      554            558\n##  7 B6         507 N516JB  EWR    FLL    2013     1     1      555            600\n##  8 EV        5708 N829AS  LGA    IAD    2013     1     1      557            600\n##  9 B6          79 N593JB  JFK    MCO    2013     1     1      557            600\n## 10 AA         301 N3ALAA  LGA    ORD    2013     1     1      558            600\n## # ℹ 336,766 more rows\n## # ℹ 9 more variables: dep_delay <dbl>, arr_time <int>, sched_arr_time <int>,\n## #   arr_delay <dbl>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n## #   time_hour <dttm>\n\n# move numeric variables to the front\nflights %>% relocate(where(is.numeric))\n## # A tibble: 336,776 × 19\n##     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n##    <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n##  1  2013     1     1      517            515         2      830            819\n##  2  2013     1     1      533            529         4      850            830\n##  3  2013     1     1      542            540         2      923            850\n##  4  2013     1     1      544            545        -1     1004           1022\n##  5  2013     1     1      554            600        -6      812            837\n##  6  2013     1     1      554            558        -4      740            728\n##  7  2013     1     1      555            600        -5      913            854\n##  8  2013     1     1      557            600        -3      709            723\n##  9  2013     1     1      557            600        -3      838            846\n## 10  2013     1     1      558            600        -2      753            745\n## # ℹ 336,766 more rows\n## # ℹ 11 more variables: arr_delay <dbl>, flight <int>, air_time <dbl>,\n## #   distance <dbl>, hour <dbl>, minute <dbl>, carrier <chr>, tailnum <chr>,\n## #   origin <chr>, dest <chr>, time_hour <dttm>\n```\n:::\n\n\n\n\n#### Python\n\nThere are similar ways to rearrange columns in pandas, but they are a bit harder to work with - you have to specify the column names (in some way) and then perform the operation yourself.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\ncols = list(flights.columns.values) # get column names\n\n# Move flight specific info to the front\nflightcols = ['carrier', 'flight', 'tailnum', 'origin', 'dest']\nflights[flightcols + list(flights.drop(flightcols, axis = 1))]\n##        carrier  flight tailnum  ... hour minute             time_hour\n## 0           UA    1545  N14228  ...    5     15  2013-01-01T10:00:00Z\n## 1           UA    1714  N24211  ...    5     29  2013-01-01T10:00:00Z\n## 2           AA    1141  N619AA  ...    5     40  2013-01-01T10:00:00Z\n## 3           B6     725  N804JB  ...    5     45  2013-01-01T10:00:00Z\n## 4           DL     461  N668DN  ...    6      0  2013-01-01T11:00:00Z\n## ...        ...     ...     ...  ...  ...    ...                   ...\n## 336771      9E    3393     NaN  ...   14     55  2013-09-30T18:00:00Z\n## 336772      9E    3525     NaN  ...   22      0  2013-10-01T02:00:00Z\n## 336773      MQ    3461  N535MQ  ...   12     10  2013-09-30T16:00:00Z\n## 336774      MQ    3572  N511MQ  ...   11     59  2013-09-30T15:00:00Z\n## 336775      MQ    3531  N839MQ  ...    8     40  2013-09-30T12:00:00Z\n## \n## [336776 rows x 19 columns]\n\n# move numeric variables to the front\nnumcols = list(flights.select_dtypes(include = np.number).columns.values)\nflights[numcols + list(flights.drop(numcols, axis = 1))]\n##         year  month  day  dep_time  ...  tailnum  origin  dest             time_hour\n## 0       2013      1    1     517.0  ...   N14228     EWR   IAH  2013-01-01T10:00:00Z\n## 1       2013      1    1     533.0  ...   N24211     LGA   IAH  2013-01-01T10:00:00Z\n## 2       2013      1    1     542.0  ...   N619AA     JFK   MIA  2013-01-01T10:00:00Z\n## 3       2013      1    1     544.0  ...   N804JB     JFK   BQN  2013-01-01T10:00:00Z\n## 4       2013      1    1     554.0  ...   N668DN     LGA   ATL  2013-01-01T11:00:00Z\n## ...      ...    ...  ...       ...  ...      ...     ...   ...                   ...\n## 336771  2013      9   30       NaN  ...      NaN     JFK   DCA  2013-09-30T18:00:00Z\n## 336772  2013      9   30       NaN  ...      NaN     LGA   SYR  2013-10-01T02:00:00Z\n## 336773  2013      9   30       NaN  ...   N535MQ     LGA   BNA  2013-09-30T16:00:00Z\n## 336774  2013      9   30       NaN  ...   N511MQ     LGA   CLE  2013-09-30T15:00:00Z\n## 336775  2013      9   30       NaN  ...   N839MQ     LGA   RDU  2013-09-30T12:00:00Z\n## \n## [336776 rows x 19 columns]\n```\n:::\n\n\n\n\n:::\n\n:::\n\n## Mutate: Add and transform variables\n\nUp to this point, we've been primarily focusing on how to decrease the dimensionality of our dataset in various ways. \nBut frequently, we also need to add columns for derived measures (e.g. BMI from weight and height information), change units, and replace missing or erroneous observations. \nThe tidyverse verb for this is `mutate`, but in base R and python, we'll simply use assignment to add columns to our data frames.\n\n::: aside\n\n![Mutate (by Allison Horst)](../images/wrangling/dplyr_mutate.png){fig-alt=\"Cartoon of cute fuzzy monsters dressed up as different X-men characters, working together to add a new column to an existing data frame. Stylized title text reads “dplyr::mutate - add columns, keep existing.”\"}\n\n:::\n\nWe'll use the Pokemon data to demonstrate. \nSome Pokemon have a single \"type\", which is usually elemental, such as Water, Ice, Fire, etc., but others have two. \nLet's add a column that indicates how many types a pokemon has.\n\n::: panel-tabset\n\n### Base R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\n# This splits type_1,type_2 into two separate variables. \n# Don't worry about the string processing (gsub) just now\n# Focus on how variables are defined.\npoke$type_1 <- gsub(\",.*$\", \"\", poke$type) # Replace anything after comma with ''\npoke$type_2 <- gsub(\"^.*,\", \"\", poke$type) # Use the 2nd type\npoke$type_2[poke$type_1 == poke$type_2] <- NA # Type 2 only exists if not same as Type 1\n\npoke$no_types <- 1 # set a default value\npoke$no_types[grepl(\",\", poke$type)] <- 2 # set the value if there's not a comma in type\n\n# This is a bit faster\npoke$no_types <- ifelse(grepl(\",\", poke$type), 2, 1)\n\n# Sanity check\n# This checks number of types vs. value of type_2\n# If type 2 is NA, then number of types should be 1\nt(table(poke$type_2, poke$no_types, useNA = 'ifany'))\n##    \n##     Bug Dark Dragon Electric Fairy Fighting Fire Flying Ghost Grass Ground Ice\n##   1   0    0      0        0     0        0    0      0     0     0      0   0\n##   2   9   40     49       17    47       47   31    157    57    50     57  36\n##    \n##     Normal Poison Psychic Rock Steel Water <NA>\n##   1      0      0       0    0     0     0  673\n##   2     24     51      61   23    55    42    0\n```\n:::\n\n\n\n\nNotice that we had to type the name of the dataset at least 3 times to perform the operation we were looking for.\nI could reduce that to 2x with the `ifelse` function, but it's still a lot of typing.\n\n### R: `dplyr` {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\npoke <- poke %>%\n  # This splits type into type_1,type_2 : two separate variables. \n  # Don't worry about the string processing (str_extract) just now\n  # Focus on how variables are defined: \n  #   we use a function on the type column\n  #   within the mutate statement.\n  mutate(type_1 = str_extract(type, \"^(.*),\", group = 1),\n         type_2 = str_extract(type, \"(.*),(.*)\", group = 2)) %>%\n  mutate(no_types = if_else(is.na(type_2), 1, 2))\n## Error in `mutate()` at dplyr/R/mutate.R:146:3:\n## ℹ In argument: `type_1 = str_extract(type, \"^(.*),\", group = 1)`.\n## Caused by error in `str_extract()`:\n## ! could not find function \"str_extract\"\n\nselect(poke, type_2, no_types) %>% table(useNA = 'ifany') %>% t()\n## Error in `select()`:\n## ! Can't select columns that don't exist.\n## ✖ Column `type_2` doesn't exist.\n```\n:::\n\n\n\nThe last 2 rows are just to organize the output - we keep only the two variables we're working with, and get a crosstab.\n\n\n### Python {-}\n\nIn python, this type of variable operation (replacing one value with another) can be most easily done with the replace function, which takes arguments (thing_to_replace, value_to_replace_with). \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\npoke = pd.read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\n# This splits type into two columns, type_1 and type_2, based on \",\"\npoke[[\"type_1\", \"type_2\"]] = poke[\"type\"].apply(lambda x: pd.Series(str(x).split(\",\")))\n\n# This defines number of types\npoke[\"no_types\"] = 1 # default value\npoke.loc[~poke.type_2.isna(), \"no_types\"] = 2 # change those with a defined type 2\n\n\npoke.groupby([\"no_types\", \"type_2\"], dropna=False).size()\n## no_types  type_2  \n## 1         NaN         673\n## 2         Bug           9\n##           Dark         40\n##           Dragon       49\n##           Electric     17\n##           Fairy        47\n##           Fighting     47\n##           Fire         31\n##           Flying      157\n##           Ghost        57\n##           Grass        50\n##           Ground       57\n##           Ice          36\n##           Normal       24\n##           Poison       51\n##           Psychic      61\n##           Rock         23\n##           Steel        55\n##           Water        42\n## dtype: int64\n# When type_2 is NaN, no_types is 1\n# When type_2 is defined, no_types is 2\n```\n:::\n\n\n\n\nAnother function that may be useful is the `assign` function, which can be used to create new variables if you don't want to use the `[\"new_col\"]` notation. \nIn some circumstances, `.assign(var = ...)` is a bit easier to work with because Python distinguishes between modifications to data and making a copy of the entire data frame (which is something I'd like to [not get into right now](https://stackoverflow.com/questions/23296282/what-rules-does-pandas-use-to-generate-a-view-vs-a-copy) for simplicity's sake). \n\n:::\n\nThe learning curve here isn't actually knowing how to assign new variables (though that's important). \nThe challenge comes when you want to do something *new* and have to figure out how to e.g. use find and replace in a string, or work with dates and times, or recode variables. \n\n\n:::{.callout-note collapse=true}\n\n### Mutate and new challenges\n\nI'm not going to be able to teach you how to handle every mutate statement task you'll come across (people invent new ways to screw up data all the time!) but my goal is instead to teach you how to _read documentation_, _google things intelligently_, and to _understand what you're reading_ enough to actually implement it. \nThis is something that comes with practice (and lots of googling, stack overflow searches, etc.).\n\nGoogle and StackOverflow are very common and important programming skills!\n\n![[Source](https://twitter.com/madsbrodt/status/1339127984670773251)](../images/wrangling/twitter-google-stackoverflow.png){fig-alt=\"A screenshot of a tweet from \\@madsbrodt. Tweet text: Googling and StackOverflow'ing is a natural part of programming. Don't think of it as cheating. Knowing what to search for, and which results will fit your given situation is an important skill (flame emoji).\"}\n\n![[Source](https://twitter.com/cszhu/status/1230954186520461312)](../images/wrangling/twitter-happy-debugging.png){fig-alt=\"A screenshot of a tweet from \\@cszhu. Tweet text: if you're not happy single, you won't be happy in a relationship. true happiness comes from closing 100 chrome tabs after solving an obscure programming bug, not from someone else.\"}\n\n\nIn this textbook, the examples will expose you to solutions to common problems (or require that you do some basic reading yourself); unfortunately, there are too many common problems for us to work through line-by-line. \n\nPart of the goal of this textbook is to help you **learn how to read through a package description and evaluate whether the package will do what you want**. \nWe're going to try to build some of those skills starting now. \nIt would be relatively easy to teach you how to do a set list of tasks, but you'll be better statisticians and programmers if you learn the skills to solve niche problems on your own.\n\n![Apologies for the noninclusive language, but the sentiment is real. [Source](https://twitter.com/abt_programming/status/459414524303785984)](../images/wrangling/twitter-teach-program.png){fig-alt=\"A screenshot of a tweet from \\@abt_programming. Tweet text: Give a man a program, frustrate him for a day. Teach a man to program, frustrate him for a lifetime - Muhammad Waseem.\"}\n\n:::\n\n\n\n::: callout-note\n\nHere is a quick table of places to look in R and python to solve some of the more common problems. \n\nProblem | R | Python\n--- | ----- | -----\nDates and Times | `lubridate` package (esp. `ymd_hms()` and variants, `decimal_date()`, and other convenience functions) | `pandas` has some date time support by default; see the [`datetime` module](https://docs.python.org/3/library/datetime.html) for more functionality. |\nString manipulation | `stringr` package | Quick Tips [@chinguyenTipsStringManipulation2021], Whirlwind Tour of Python chapter [@jacobvanderplasStringManipulationRegular2016]\n\n:::\n\n## Summarize\n\nThe next verb is one that we've already implicitly seen in action: `summarize` takes a data frame with potentially many rows of data and reduces it down to one row of data using some function. \nYou have used it to get single-row summaries of vectorized data in R, and we've used e.g. `group_by` + `count` in Python to perform certain tasks as well. \n\nHere (in a trivial example), I compute the overall average HP of a Pokemon in each generation, as well as the average number of characters in their name. \nAdmittedly, that last computation is a bit silly, but it's mostly for demonstration purposes.\n\n::: panel-tabset\n\n### R: `dplyr`{-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\npoke %>%\n  mutate(name_chr = nchar(name)) %>%\n  summarize(n = max(pokedex_no), hp = mean(hp), name_chr = mean(name_chr))\n## # A tibble: 1 × 3\n##       n    hp name_chr\n##   <dbl> <dbl>    <dbl>\n## 1  1008  71.2     7.55\n```\n:::\n\n\n\n\n### Python {-}\n\nIn python, instead of a summarize function, there are a number of shorthand functions that we often use to summarize things, such as `mean`. \nYou can also build custom summary functions [@whortonApplyingCustomFunctions2021], or use the `agg()` function to define multiple summary variables.\n`agg()` will even let you use different summary functions for each variable, just like `summarize`.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\npoke = pd.read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\npoke = poke.assign(name_length = poke.name.str.len())\npoke[['hp', 'name_length']].mean()\n## hp             71.178244\n## name_length     7.545216\n## dtype: float64\npoke[['hp', 'name_length']].agg(['mean', 'min'])\n##              hp  name_length\n## mean  71.178244     7.545216\n## min    1.000000     3.000000\npoke[['pokedex_no', 'hp', 'name_length']].agg({'pokedex_no':'nunique', 'hp':'mean', 'name_length':'mean'})\n## pokedex_no     1008.000000\n## hp               71.178244\n## name_length       7.545216\n## dtype: float64\n```\n:::\n\n\n\n\n:::\n\nThe real power of summarize, though, is in combination with Group By. \nWe'll see more summarize examples, but it's easier to make good examples when you have all the tools - it's hard to demonstrate how to use a hammer if you don't also have a nail. \n\n## Group By + (?) = Power!\n\nFrequently, we have data that is more specific than the data we need - for instance, I may have observations of the temperature at 15-minute intervals, but I might want to record the daily high and low value. To do this, I need to\n\n1. split my dataset into smaller datasets - one for each day\n2. compute summary values for each smaller dataset\n3. put my summarized data back together into a single dataset\n\nThis is known as the `split-apply-combine` [@wickhamSplitapplycombineStrategyData2011,@GroupSplitapplycombine2022] or sometimes, `map-reduce` [@deanMapReduceSimplifiedData2008] strategy (though map-reduce is usually on specifically large datasets and performed in parallel). \n\nIn tidy parlance, `group_by` is the verb that accomplishes the first task. `summarize` accomplishes the second task and implicitly accomplishes the third as well.\n\n::: aside\n\n![The ungroup() command is just as important as the group_by() command! (by Allison Horst)](../images/wrangling/ungroup_blank.png){fig-alt=\"Two fuzzy monsters in the foreground in birthday party hats celebrate together because one has opened a gift with group_by() inside. Text above those two reads “Other really important parts sold separately!” In the background, a very hopeful little monster stands along holding a package labeled “ungroup”, waiting to be invited.\"}\n\n:::\n\n::: panel-tabset\n\n### R: `dplyr`{-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke <- read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\npoke %>%\n  mutate(name_chr = nchar(name)) %>%\n  group_by(gen) %>%\n  summarize(n = length(unique(pokedex_no)), hp = mean(hp), name_chr = mean(name_chr))\n## # A tibble: 9 × 4\n##     gen     n    hp name_chr\n##   <dbl> <int> <dbl>    <dbl>\n## 1     1   151  65.3     7.23\n## 2     2   100  71.0     7.36\n## 3     3   135  65.8     7.16\n## 4     4   107  69.4     6.85\n## 5     5   156  75.8     7.77\n## 6     6    72  72.9     7.47\n## 7     7    88  73.2     8.04\n## 8     8    96  77.9     8.01\n## 9     9   103  75.8     8.66\n```\n:::\n\n\n\n\n### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\npoke = pd.read_csv(\"https://github.com/srvanderplas/datasets/raw/main/clean/pokemon_gen_1-9.csv\")\n\npoke = poke.assign(name_length = poke.name.str.len())\npoke.groupby('gen')[['hp', 'name_length']].mean()\n##             hp  name_length\n## gen                        \n## 1    65.333333     7.231579\n## 2    71.024194     7.362903\n## 3    65.777202     7.160622\n## 4    69.382022     6.853933\n## 5    75.827004     7.767932\n## 6    72.882353     7.470588\n## 7    73.233083     8.037594\n## 8    77.940299     8.014925\n## 9    75.756098     8.658537\npoke.groupby('gen')[['hp', 'name_length']].agg(['mean', 'min'])\n##             hp     name_length    \n##           mean min        mean min\n## gen                               \n## 1    65.333333  10    7.231579   3\n## 2    71.024194  20    7.362903   4\n## 3    65.777202   1    7.160622   4\n## 4    69.382022  20    6.853933   4\n## 5    75.827004  30    7.767932   4\n## 6    72.882353  38    7.470588   5\n## 7    73.233083  25    8.037594   6\n## 8    77.940299  25    8.014925   4\n## 9    75.756098  10    8.658537   5\npoke.groupby('gen')[['pokedex_no', 'hp', 'name_length']].agg({'pokedex_no':'nunique', 'hp':'mean', 'name_length':'mean'})\n##      pokedex_no         hp  name_length\n## gen                                    \n## 1           151  65.333333     7.231579\n## 2           100  71.024194     7.362903\n## 3           135  65.777202     7.160622\n## 4           107  69.382022     6.853933\n## 5           156  75.827004     7.767932\n## 6            72  72.882353     7.470588\n## 7            88  73.233083     8.037594\n## 8            96  77.940299     8.014925\n## 9           103  75.756098     8.658537\n```\n:::\n\n\n\n\n:::\n\n\nWhen you `group_by` a variable, your result carries this grouping with it. In R, `summarize` will remove one layer of grouping (by default), but if you ever want to return to a completely ungrouped data set, you should use the `ungroup()` command. In Python, you should consider using `reset_index` or `grouped_thing.obj()` to access the original information[@danchoAnswerThereUngroup2021].\n\n\n::: callout-caution\n\n### Storms Example \n\nLet's try a non-trivial example, using the `storms` dataset that is part of the `dplyr` package.\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(lubridate) # for the make_datetime() function\ndata(storms)\nstorms\n## # A tibble: 19,537 × 13\n##    name   year month   day  hour   lat  long status      category  wind pressure\n##    <chr> <dbl> <dbl> <int> <dbl> <dbl> <dbl> <fct>          <dbl> <int>    <int>\n##  1 Amy    1975     6    27     0  27.5 -79   tropical d…       NA    25     1013\n##  2 Amy    1975     6    27     6  28.5 -79   tropical d…       NA    25     1013\n##  3 Amy    1975     6    27    12  29.5 -79   tropical d…       NA    25     1013\n##  4 Amy    1975     6    27    18  30.5 -79   tropical d…       NA    25     1013\n##  5 Amy    1975     6    28     0  31.5 -78.8 tropical d…       NA    25     1012\n##  6 Amy    1975     6    28     6  32.4 -78.7 tropical d…       NA    25     1012\n##  7 Amy    1975     6    28    12  33.3 -78   tropical d…       NA    25     1011\n##  8 Amy    1975     6    28    18  34   -77   tropical d…       NA    30     1006\n##  9 Amy    1975     6    29     0  34.4 -75.8 tropical s…       NA    35     1004\n## 10 Amy    1975     6    29     6  34   -74.8 tropical s…       NA    40     1002\n## # ℹ 19,527 more rows\n## # ℹ 2 more variables: tropicalstorm_force_diameter <int>,\n## #   hurricane_force_diameter <int>\n\nstorms <- storms %>%\n  # Construct a time variable that behaves like a number but is formatted as a date\n  mutate(time = make_datetime(year, month, day, hour))\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nstorms = pd.read_csv(\"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/storms.csv\", on_bad_lines='skip')\n\n# Construct a time variable that behaves like a number but is formatted as a date\nstorms = storms.assign(time = pd.to_datetime(storms[[\"year\", \"month\", \"day\", \"hour\"]]))\n\n# Remove month/day/hour \n# (keep year for ID purposes, names are reused)\nstorms = storms.drop([\"month\", \"day\", \"hour\"], axis = 1)\n```\n:::\n\n\n\n\n:::\n\nWe have named storms, observation time, storm location, status, wind, pressure, and diameter (for tropical storms and hurricanes). \n\nOne thing we might want to know is at what point each storm was the strongest. Let's define strongest in the following way: \n\n1. The points where the storm is at its lowest atmospheric pressure (generally, the lower the atmospheric pressure, the more trouble a tropical disturbance will cause). \n2. If there's a tie, we might want to know when the maximum wind speed occurred. \n3. If that still doesn't get us a single row for each observation, lets just pick out the status and category (these are determined by wind speed, so they should be the same if maximum wind speed is the same) and compute the average time where this occurred. \n\nLet's start by translating these criteria into basic operations. I'll use dplyr function names here, but I'll also specify what I mean when there's a conflict (e.g. filter in dplyr means something different than filter in python). \n\nInitial attempt:\n\n1. **For each storm** (`group_by`), \n2. we need the point where the storm has lowest atmospheric pressure. (`filter` - pick the row with the lowest pressure). \n\nThen we read the next part: \"If there is a tie, pick the maximum wind speed.\"\n\n1. `group_by`\n2. `arrange` by ascending pressure and descending wind speed\n3. `filter` - pick the row(s) which have the lowest pressure and highest wind speed\n\nThen, we read the final condition: if there is still a tie, pick the status and category and compute the average time.\n\n1. `group_by`\n2. `arrange` by ascending pressure and descending wind speed (this is optional if we write our filter in a particular way)\n3. `filter` - pick the row(s) which have the lowest pressure and highest wind speed\n4. `summarize` - compute the average time and category (if there are multiple rows)\n\nLet's write the code, now that we have the order of operations straight!\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_power_storm <- storms %>%\n  # Storm names can be reused, so we need to have year to be sure it's the same instance\n  group_by(name, year) %>%\n  filter(pressure == min(pressure, na.rm = T)) %>%\n  filter(wind == max(wind, na.rm = T)) %>%\n  summarize(pressure = mean(pressure), \n            wind = mean(wind), \n            category = unique(category), \n            status = unique(status), \n            time = mean(time)) %>%\n  arrange(time) %>%\n  ungroup()\nmax_power_storm\n## # A tibble: 665 × 7\n##    name      year pressure  wind category status         time               \n##    <chr>    <dbl>    <dbl> <dbl>    <dbl> <fct>          <dttm>             \n##  1 Amy       1975      981    60       NA tropical storm 1975-07-02 12:00:00\n##  2 Blanche   1975      980    75        1 hurricane      1975-07-28 00:00:00\n##  3 Caroline  1975      963   100        3 hurricane      1975-08-31 06:00:00\n##  4 Doris     1975      965    95        2 hurricane      1975-09-02 21:00:00\n##  5 Eloise    1975      955   110        3 hurricane      1975-09-23 12:00:00\n##  6 Faye      1975      977    75        1 hurricane      1975-09-28 18:00:00\n##  7 Gladys    1975      939   120        4 hurricane      1975-10-02 15:00:00\n##  8 Hallie    1975     1002    45       NA tropical storm 1975-10-27 03:00:00\n##  9 Belle     1976      957   105        3 hurricane      1976-08-09 00:00:00\n## 10 Dottie    1976      996    45       NA tropical storm 1976-08-20 06:00:00\n## # ℹ 655 more rows\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngrouped_storms = storms.groupby([\"name\", \"year\"])\n\ngrouped_storm_sum = grouped_storms.agg({\n  \"pressure\": lambda x: x.min()\n}).reindex()\n\n# This gets all the information from storms\n# corresponding to name/year/max pressure\nmax_power_storm = grouped_storm_sum.merge(storms, on = [\"name\", \"year\", \"pressure\"])\n\nmax_power_storm = max_power_storm.groupby([\"name\", \"year\"]).agg({\n  \"pressure\": \"min\",\n  \"wind\": \"max\",\n  \"category\": \"mean\",\n  \"status\": \"unique\",\n  \"time\": \"mean\"\n})\n```\n:::\n\n\n\n\n:::\n\n\nIf we want to see a visual summary, we could plot a histogram of the minimum pressure of each storm. \n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(max_power_storm, aes(x = pressure)) + geom_histogram()\n```\n\n::: {.cell-output-display}\n![](03-data-cleaning_files/figure-html/ggplot-storms-1.png){width=2100}\n:::\n:::\n\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import *\n\nggplot(max_power_storm, aes(x = \"pressure\")) + geom_histogram(bins=30)\n## <plotnine.ggplot.ggplot object at 0x7fb3eae75b10>\n```\n:::\n\n\n\n:::\n\nWe could also look to see whether there has been any change over time in pressure.\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(max_power_storm, aes(x = time, y = pressure)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](03-data-cleaning_files/figure-html/ggplot-power-pressure-r-1.png){width=2100}\n:::\n:::\n\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nggplot(max_power_storm, aes(x = \"time\", y = \"pressure\")) + geom_point()\n## <plotnine.ggplot.ggplot object at 0x7fb3ea855810>\n```\n:::\n\n\n\n\n:::\n\nIt seems to me that there are fewer high-pressure storms before 1990 or so, which may be due to the fact that some weak storms may not have been observed or recorded prior to widespread radar coverage in the Atlantic.\n\n::: column-margin\n![Radar coverage map from 1995, from @massPacificNorthwestHas2006](../images/wrangling/coastal_radar_1995.png)\n:::\n\nAnother interesting way to look at this data would be to examine the duration of time a storm existed, as a function of its maximum category. Do stronger storms exist for a longer period of time?\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorm_strength_duration <- storms %>%\n  group_by(name, year) %>%\n  summarize(duration = difftime(max(time), min(time), units = \"days\"), \n            max_strength = max(category)) %>%\n  ungroup() %>%\n  arrange(desc(max_strength))\n\nstorm_strength_duration %>%\n  ggplot(aes(x = max_strength, y = duration)) + geom_boxplot()\n## Error in `geom_boxplot()`:\n## ! Problem while computing stat.\n## ℹ Error occurred in the 1st layer.\n## Caused by error in `if (...) NULL`:\n## ! missing value where TRUE/FALSE needed\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstorm_strength_duration = storms.groupby([\"name\", \"year\"]).agg(duration = (\"time\", lambda x: max(x) - min(x)),max_strength = (\"category\", \"max\"))\n\nggplot(aes(x = \"factor(max_strength)\", y = \"duration\"), data = storm_strength_duration) + geom_boxplot()\n## TypeError: ggplot.__init__() got multiple values for argument 'data'\n```\n:::\n\n\n\n\n:::\n\nYou don't need to know how to create these plots yet, but I find it much easier to look at the chart and answer the question I started out with. \n\nWe could also look to see how a storm's diameter evolves over time, from when the storm is first identified (group_by + mutate) \n\nDiameter measurements don't exist for all storms, and they appear to measure the diameter of the wind field - that is, the region where the winds are hurricane or tropical storm force. (`?storms` documents the dataset and its variables). \n\n\n::: panel-tabset\n\n#### R {-}\n\nNote the use of `as.numeric(as.character(max(category)))` to get the maximum (ordinal categorical) strength and convert that into something numeric that can be plotted. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorm_evolution <- storms %>%\n  filter(!is.na(hurricane_force_diameter)) %>%\n  group_by(name, year) %>%\n  mutate(time_since_start = difftime(time, min(time), units = \"days\")) %>%\n  ungroup()\n\nggplot(storm_evolution, \n       aes(x = time_since_start, y = hurricane_force_diameter, \n           group = name)) + geom_line(alpha = .2) + \n  facet_wrap(~year, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](03-data-cleaning_files/figure-html/storm-evo-1.png){width=2100}\n:::\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstorm_evolution = storms.loc[storms.hurricane_force_diameter.notnull(),:]\n\nstorm_evolution = storm_evolution.assign(age = storm_evolution.groupby([\"name\", \"year\"], group_keys = False).apply(lambda x: x.time - x.time.min()))\n\n(ggplot(storm_evolution, \n       aes(x = \"age\", y = \"hurricane_force_diameter\", \n           group = \"name\")) + geom_line(alpha = .2) + \n  facet_wrap(\"year\", scales = \"free_y\"))\n## <plotnine.ggplot.ggplot object at 0x7fb3eb316350>\n```\n:::\n\n\n\n\n:::\n\n\nFor this plot, I've added `facet_wrap(~year)` to produce sub-plots for each year. This helps us to be able to see some individuality, because otherwise there are far too many storms. \n\nIt seems that the vast majority of storms have a single bout of hurricane force winds (which either decreases or just terminates near the peak, presumably when the storm hits land and rapidly disintegrates). However, there are a few interesting exceptions - my favorite is in 2008 - the longest-lasting storm seems to have several local peaks in wind field diameter. If we want, we can examine that further by plotting it separately.\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorm_evolution %>%\n  filter(year == 2008) %>%\n  arrange(desc(time_since_start))\n## # A tibble: 548 × 15\n##    name    year month   day  hour   lat  long status     category  wind pressure\n##    <chr>  <dbl> <dbl> <int> <dbl> <dbl> <dbl> <fct>         <dbl> <int>    <int>\n##  1 Bertha  2008     7    21     6  58.5 -27   extratrop…       NA    45      990\n##  2 Bertha  2008     7    21     0  55.1 -31   extratrop…       NA    50      990\n##  3 Bertha  2008     7    20    18  53   -34   extratrop…       NA    55      990\n##  4 Bertha  2008     7    20    12  50   -37   extratrop…       NA    60      985\n##  5 Bertha  2008     7    20     6  47.6 -40   tropical …       NA    60      985\n##  6 Bertha  2008     7    20     0  45.3 -42.4 tropical …       NA    60      990\n##  7 Bertha  2008     7    19    18  43.7 -44.3 hurricane         1    65      989\n##  8 Bertha  2008     7    19    12  42.1 -46.3 hurricane         1    65      989\n##  9 Bertha  2008     7    19     6  40.4 -48   hurricane         1    65      989\n## 10 Bertha  2008     7    19     0  38.6 -49.7 hurricane         1    65      989\n## # ℹ 538 more rows\n## # ℹ 4 more variables: tropicalstorm_force_diameter <int>,\n## #   hurricane_force_diameter <int>, time <dttm>, time_since_start <drtn>\n\nstorm_evolution %>% filter(name == \"Ike\") %>%\n  ggplot(aes(x = time, y = hurricane_force_diameter, color = category)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](03-data-cleaning_files/figure-html/storm-evo-year-1.png){width=2100}\n:::\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstorm_evolution.query(\"year==2008\").sort_values(['age'], ascending = False).head()\n##      name  year  ...                time              age\n## 8000  Ike  2008  ... 2008-09-14 06:00:00 13 days 00:00:00\n## 7999  Ike  2008  ... 2008-09-14 00:00:00 12 days 18:00:00\n## 7998  Ike  2008  ... 2008-09-13 18:00:00 12 days 12:00:00\n## 7997  Ike  2008  ... 2008-09-13 12:00:00 12 days 06:00:00\n## 7996  Ike  2008  ... 2008-09-13 07:00:00 12 days 01:00:00\n## \n## [5 rows x 12 columns]\n\n(ggplot(\n  storm_evolution.query(\"year==2008 & name=='Ike'\"),\n  aes(x = \"time\", y = \"hurricane_force_diameter\", color = \"category\")) +\n  geom_point())\n## <plotnine.ggplot.ggplot object at 0x7fb3ea6dfb10>\n```\n:::\n\n\n\n\n:::\n\n:::\n\n\n\n## Summarizing Across Multiple Variables\n\nSuppose we want to summarize the numerical columns of any storm which was a hurricane (over the entire period it was a hurricane). \nWe don't want to write out all of the summarize statements individually, so we use `across()` instead (in `dplyr`). \n\n::: panel-tabset\n#### R {-}\n\nThe dplyr package is filled with other handy functions for accomplishing common data-wrangling tasks. `across()` is particularly useful - it allows you to make a modification to several columns at the same time.\n\n![dplyr's across() function lets you apply a mutate or summarize statement to many columns (by Allison Horst)](../images/wrangling/dplyr_across.png)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate) # for the make_datetime() function\ndata(storms)\n\nstorms <- storms %>%\n  # Construct a time variable that behaves like a number but is formatted as a date\n  mutate(time = make_datetime(year, month, day, hour))\n\n# Use across to get average of all numeric variables\navg_hurricane_intensity <- storms %>%\n  filter(status == \"hurricane\") %>%\n  group_by(name) %>%\n  summarize(across(where(is.numeric), mean, na.rm = T), .groups = \"drop\") \n\navg_hurricane_intensity %>%\n  select(name, year, month, wind, pressure, tropicalstorm_force_diameter, hurricane_force_diameter) %>%\n  arrange(desc(wind)) %>% \n  # get top 10\n  filter(row_number() <= 10) %>%\n  knitr::kable() # Make into a pretty table\n```\n\n::: {.cell-output-display}\n\n\n|name    | year|     month|     wind| pressure| tropicalstorm_force_diameter| hurricane_force_diameter|\n|:-------|----:|---------:|--------:|--------:|----------------------------:|------------------------:|\n|Allen   | 1980|  8.000000| 122.9688| 941.0312|                          NaN|                      NaN|\n|Irma    | 2017|  8.942308| 118.8462| 941.6154|                     249.4231|                 75.96154|\n|Andrew  | 1992|  8.000000| 118.2609| 946.6522|                          NaN|                      NaN|\n|Mitch   | 1998| 10.000000| 115.9091| 945.3182|                          NaN|                      NaN|\n|Rita    | 2005|  9.000000| 114.7368| 931.6316|                     265.2941|                 97.05882|\n|Isabel  | 2003|  9.000000| 112.1875| 946.5417|                          NaN|                      NaN|\n|Gilbert | 1988|  9.000000| 110.8929| 945.4286|                          NaN|                      NaN|\n|Luis    | 1995|  8.928571| 110.5952| 948.6190|                          NaN|                      NaN|\n|Wilma   | 2005| 10.000000| 110.3030| 939.4242|                     349.8333|                118.33333|\n|Matthew | 2016|  9.880952| 109.5238| 952.1190|                     263.5714|                 62.02381|\n\n\n:::\n:::\n\n\n\n\n#### Python {-}\n\n[Stackoverflow reference](https://stackoverflow.com/questions/63200530/python-pandas-equivalent-to-dplyr-1-0-0-summarizeacross)\n\nWe can use python's list comprehensions in combination with `.agg` to accomplish the same task as `dplyr`'s `across` function.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nstorms = pd.read_csv(\"https://raw.githubusercontent.com/srvanderplas/datasets/main/clean/storms.csv\")\n\n# Construct a time variable that behaves like a number but is formatted as a date\nstorms = storms.assign(time = pd.to_datetime(storms[[\"year\", \"month\", \"day\", \"hour\"]]))\n\n# Remove year/month/day/hour\nstorms = storms.drop([\"year\", \"month\", \"day\", \"hour\"], axis = 1)\n\n# Remove non-hurricane points\nstorms = storms.query(\"status == 'hurricane'\")\n\n# Get list of all remaining numeric variables\ncols = storms.select_dtypes(include =[np.number]).columns.values\n(storms.\nset_index(\"name\").\nfilter(cols).\ngroupby('name').\nagg({col: 'mean' for col in cols}))\n##                 lat  ...  hurricane_force_diameter\n## name                 ...                          \n## AL121991  38.850000  ...                       NaN\n## Alberto   30.836735  ...                       NaN\n## Alex      32.880769  ...                 48.461538\n## Alicia    28.400000  ...                       NaN\n## Allison   26.166667  ...                       NaN\n## ...             ...  ...                       ...\n## Teddy     25.793103  ...                103.448276\n## Tomas     17.346154  ...                 24.230769\n## Vince     34.100000  ...                 30.000000\n## Wilma     22.327273  ...                118.333333\n## Zeta      23.227273  ...                 29.545455\n## \n## [137 rows x 7 columns]\n```\n:::\n\n\n\n\nBy default, pandas skips NaN values. \nIf we want to be more clear, or want to pass another argument into the function, we can use what is called a **lambda function** - basically, a \"dummy\" function that has some arguments but not all of the arguments. \nHere, our lambda function is a function of `x`, and we calculate `x.mean(skipna=True)` for each x passed in (so, for each column). \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Get list of all remaining numeric variables\ncols = storms.select_dtypes(include =[np.number]).columns.values\n(storms.\nset_index(\"name\").\nfilter(cols).\ngroupby('name').\nagg({col: lambda x: x.mean(skipna=True) for col in cols}))\n##                 lat  ...  hurricane_force_diameter\n## name                 ...                          \n## AL121991  38.850000  ...                       NaN\n## Alberto   30.836735  ...                       NaN\n## Alex      32.880769  ...                 48.461538\n## Alicia    28.400000  ...                       NaN\n## Allison   26.166667  ...                       NaN\n## ...             ...  ...                       ...\n## Teddy     25.793103  ...                103.448276\n## Tomas     17.346154  ...                 24.230769\n## Vince     34.100000  ...                 30.000000\n## Wilma     22.327273  ...                118.333333\n## Zeta      23.227273  ...                 29.545455\n## \n## [137 rows x 7 columns]\n```\n:::\n\n\n\n:::\n\n\n\n## Try it out - Data Cleaning\n\nYou can [read about the gapminder project here](https://www.gapminder.org/data/documentation/). \n\nThe gapminder data used for this set of problems contains data from 142 countries on 5 continents. \nThe filtered data in `gapminder` (in R) contain data about every 5 year period between 1952 and 2007, the country's life expectancy at birth, population, and per capita GDP (in US \\$, inflation adjusted). \nIn the `gapminder_unfiltered` table, however, things are a bit different. \nSome countries have yearly data, observations are missing, and some countries don't have complete data. \nThe `gapminder` package in python (install with `pip install gapminder`) is a port of the R package, but doesn't contain the unfiltered data, so we'll instead use a [CSV export](https://raw.githubusercontent.com/srvanderplas/datasets/main/raw/gapminder_unfiltered.csv). \n\n\n::: {.callout-tip collapse=\"true\"}\n### Read in the Data\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"gapminder\" %in% installed.packages()) install.packages(\"gapminder\")\nlibrary(gapminder)\ngapminder_unfiltered\n## # A tibble: 3,313 × 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ℹ 3,303 more rows\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\ngapminder_unfiltered = pd.read_csv(\"https://raw.githubusercontent.com/srvanderplas/datasets/main/raw/gapminder_unfiltered.csv\")\n```\n:::\n\n\n\n:::\n\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Task 1: How Bad is It?\n\n::: panel-tabset\n\n#### Problem {-}\nUsing your EDA skills, determine *how bad* the unfiltered data are. You may want to look for missing values, number of records, etc. Use query or filter to show any countries which have incomplete data. Describe, in words, what operations were necessary to get this information. \n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_unfiltered %>% \n  group_by(country) %>% \n  summarize(n = n(), missinglifeExp = sum(is.na(lifeExp)), \n            missingpop = sum(is.na(pop)),\n            missingGDP = sum(is.na(gdpPercap))) %>%\n  filter(n != length(seq(1952, 2007, by = 5)))\n## # A tibble: 83 × 5\n##    country        n missinglifeExp missingpop missingGDP\n##    <fct>      <int>          <int>      <int>      <int>\n##  1 Armenia        4              0          0          0\n##  2 Aruba          8              0          0          0\n##  3 Australia     56              0          0          0\n##  4 Austria       57              0          0          0\n##  5 Azerbaijan     4              0          0          0\n##  6 Bahamas       10              0          0          0\n##  7 Barbados      10              0          0          0\n##  8 Belarus       18              0          0          0\n##  9 Belgium       57              0          0          0\n## 10 Belize        11              0          0          0\n## # ℹ 73 more rows\n```\n:::\n\n\n\n\nIn order to determine what gaps were present in the gapminder dataset, I determined how many years of data were available for each country by grouping the dataset and counting the rows. There should be 12 years worth of data between 1952 and 2007; as a result, I displayed the countries which did not have exactly 12 years of data. \n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n  gapminder_unfiltered.\n  set_index(\"country\").\n  filter([\"lifeExp\", \"pop\", \"gdpPercap\"]).\n  groupby(\"country\").\n  agg(lambda x: x.notnull().sum()).\n  query(\"lifeExp != 12 | pop != 12 | gdpPercap != 12\")\n  )\n##                       lifeExp  pop  gdpPercap\n## country                                      \n## Armenia                     4    4          4\n## Aruba                       8    8          8\n## Australia                  56   56         56\n## Austria                    57   57         57\n## Azerbaijan                  4    4          4\n## ...                       ...  ...        ...\n## United Arab Emirates        8    8          8\n## United Kingdom             13   13         13\n## United States              57   57         57\n## Uzbekistan                  4    4          4\n## Vanuatu                     7    7          7\n## \n## [83 rows x 3 columns]\n```\n:::\n\n\n\n\nIn order to determine what gaps were present in the gapminder dataset, I determined how many years of data were available for each country by grouping the dataset and counting the rows. There should be 12 years worth of data between 1952 and 2007; as a result, I displayed the countries which did not have exactly 12 years of data. \n\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Task 2: Exclude any data which isn't at 5-year increments\nStart in 1952 (so 1952, 1957, 1962, ..., 2007). \n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_unfiltered %>%\n  filter(year %in% seq(1952, 2007, by = 5))\n## # A tibble: 2,013 × 6\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ℹ 2,003 more rows\n```\n:::\n\n\n\n\n#### Python {-}\n\n[Reminder about python list comprehensions](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)\n\n[Explanation of the query @ statement](https://stackoverflow.com/questions/62914335/python-pandas-query-for-values-in-list)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nyears_to_keep = [i for i in range(1952, 2008, 5)]\ngapminder_unfiltered.query(\"year in @years_to_keep\")\n##           country continent  year  lifeExp       pop   gdpPercap\n## 0     Afghanistan      Asia  1952   28.801   8425333  779.445314\n## 1     Afghanistan      Asia  1957   30.332   9240934  820.853030\n## 2     Afghanistan      Asia  1962   31.997  10267083  853.100710\n## 3     Afghanistan      Asia  1967   34.020  11537966  836.197138\n## 4     Afghanistan      Asia  1972   36.088  13079460  739.981106\n## ...           ...       ...   ...      ...       ...         ...\n## 3308     Zimbabwe    Africa  1987   62.351   9216418  706.157306\n## 3309     Zimbabwe    Africa  1992   60.377  10704340  693.420786\n## 3310     Zimbabwe    Africa  1997   46.809  11404948  792.449960\n## 3311     Zimbabwe    Africa  2002   39.989  11926563  672.038623\n## 3312     Zimbabwe    Africa  2007   43.487  12311143  469.709298\n## \n## [2013 rows x 6 columns]\n```\n:::\n\n\n\n\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Task 3: Exclude any countries that don't have a full set of observations\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_unfiltered %>%\n  filter(year %in% seq(1952, 2007, by = 5)) %>%\n  group_by(country) %>%\n  mutate(nobs = n()) %>% # Use mutate instead of summarize so that all rows stay\n  filter(nobs == 12) %>%\n  select(-nobs)\n## # A tibble: 1,704 × 6\n## # Groups:   country [142]\n##    country     continent  year lifeExp      pop gdpPercap\n##    <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n##  1 Afghanistan Asia       1952    28.8  8425333      779.\n##  2 Afghanistan Asia       1957    30.3  9240934      821.\n##  3 Afghanistan Asia       1962    32.0 10267083      853.\n##  4 Afghanistan Asia       1967    34.0 11537966      836.\n##  5 Afghanistan Asia       1972    36.1 13079460      740.\n##  6 Afghanistan Asia       1977    38.4 14880372      786.\n##  7 Afghanistan Asia       1982    39.9 12881816      978.\n##  8 Afghanistan Asia       1987    40.8 13867957      852.\n##  9 Afghanistan Asia       1992    41.7 16317921      649.\n## 10 Afghanistan Asia       1997    41.8 22227415      635.\n## # ℹ 1,694 more rows\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nyears_to_keep = [i for i in range(1952, 2008, 5)]\n\n(\n  gapminder_unfiltered.\n  # Remove extra years\n  query(\"year in @years_to_keep\").\n  groupby(\"country\").\n  # Calculate number of observations (should be exactly 12)\n  # This is the equivalent of mutate on a grouped data set\n  apply(lambda grp: grp.assign(nobs = grp['lifeExp'].notnull().sum())).\n  # Keep rows with 12 observations\n  query(\"nobs == 12\").\n  # remove nobs column\n  drop(\"nobs\", axis = 1)\n  )\n##                       country continent  year  lifeExp       pop   gdpPercap\n## country                                                                     \n## Afghanistan 0     Afghanistan      Asia  1952   28.801   8425333  779.445314\n##             1     Afghanistan      Asia  1957   30.332   9240934  820.853030\n##             2     Afghanistan      Asia  1962   31.997  10267083  853.100710\n##             3     Afghanistan      Asia  1967   34.020  11537966  836.197138\n##             4     Afghanistan      Asia  1972   36.088  13079460  739.981106\n## ...                       ...       ...   ...      ...       ...         ...\n## Zimbabwe    3308     Zimbabwe    Africa  1987   62.351   9216418  706.157306\n##             3309     Zimbabwe    Africa  1992   60.377  10704340  693.420786\n##             3310     Zimbabwe    Africa  1997   46.809  11404948  792.449960\n##             3311     Zimbabwe    Africa  2002   39.989  11926563  672.038623\n##             3312     Zimbabwe    Africa  2007   43.487  12311143  469.709298\n## \n## [1704 rows x 6 columns]\n```\n:::\n\n\n\n\n\n:::\n:::\n\n::: {.callout-learnmore collapse=\"true\"}\n\n## Additional Resources \n- [Introduction to dplyr](https://stat545.com/dplyr-intro.html) and [Single Table dplyr functions](https://stat545.com/dplyr-single.html)\n\n- R for Data Science: [Data Transformations](https://r4ds.had.co.nz/transform.html)\n\n- Additional practice exercises: [Intro to the tidyverse](https://stat579-at-isu.github.io/materials/03_tidyverse/01_dplyr.html#19), [group_by + summarize examples](https://stat579-at-isu.github.io/materials//03_tidyverse/02_dplyr-examples.html), [group_by + mutate examples](https://stat579-at-isu.github.io/materials//03_tidyverse/03_dplyr-examples.html#1) (from a similar class at Iowa State)\n\n- [Base R data manipulation](https://vknight.org/SAS-R/Content/R-Chapter-03/)\n\n- [Videos of analysis of new data from Tidy Tuesday](https://www.youtube.com/playlist?list=PL19ev-r1GBwkuyiwnxoHTRC8TTqP8OEi8) - may include use of other packages, but almost definitely includes use of dplyr as well. \n  - [TidyTuesday Python github repo](https://github.com/waiyanps/TidyTuesday-Python) - replicating Tidy Tuesday analyses in Python with Pandas\n\n:::\n\n## References\n\n",
    "supporting": [
      "03-data-cleaning_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}