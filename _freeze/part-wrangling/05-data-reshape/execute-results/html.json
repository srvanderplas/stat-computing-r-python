{
  "hash": "ac3dba3b9c15067692d53f0ea290d266",
  "result": {
    "engine": "knitr",
    "markdown": "# Reshaping Data {#sec-data-reshape}\n\n## Objectives {-}\n\nBroadly, your objective while reading this chapter is to be able to identify datasets which have \"messy\" formats and determine a sequence of operations to transition the data into \"tidy\" format. To do this, you should be master the following concepts:\n\n-   Determine what data format is necessary to generate a desired plot or statistical model\n-   Understand the differences between \"wide\" and \"long\" format data and how to transition between the two structures\n\n## Tidy and Messy Data\n\n### Motivating Example\n\nConsider the spreadsheet screenshot in @fig-human-readable.\n\n![Spreadsheet intended for human consumption, from @mccallumBadDataHandbook2013 (Chapter 3)](../images/wrangling/Data-human-consumption.png){#fig-human-readable}\n\nThis spreadsheet shows New Zealand High School certificate achievement levels for a boys-only school. \nTypically, students would get level 1 in year 11, level 2 in year 12, and level 3 in year 13, but it is possible for students to gain multiple levels in a single year. \nThis data is organized to show the number of students gaining each type of certification (broken out by gender) across each of the 3 years. \nThere are many blank cells that provide ample space to see the data, and all of the necessary variables are represented: there are essentially three 2x3 tables showing the number of students attaining each NCEA level in each year of school. \nIf all of the information is present in this table, is there really a problem? \nPerhaps not if the goal is just to display the data, but analyzing this data effectively, or plotting it in a way that is useful, requires some restructuring.\n@fig-machine-readable shows a restructured version of this data in a more compact rectangular format.\n\n![Spreadsheet reorganized for data analysis](../images/wrangling/Data-machine-consumption.png){#fig-machine-readable}\n\nIn @fig-machine-readable, each column contains one variable: Year, gender, level, and total number of students. Each row contains one observation. \nWe still have 18 data points, but this format is optimized for statistical analysis, rather than to display for (human) visual consumption. \nWe will refer to this restructured data as \"tidy\" data: it has a single column for each variable and a single row for each observation.\n\n### Defining Tidy data\n\nThe illustrations below are lifted from an [excellent blog post](https://www.openscapes.org/blog/2020/10/12/tidy-data/) [@lowndesTidyDataEfficiency2020] about tidy data; they're reproduced here because\n\n1.  they're beautiful and licensed as CCA-4.0-by, and\n2.  they might be more memorable than the equivalent paragraphs of text without illustration.\n\nMost of the time, data does not come in a format suitable for analysis. \nSpreadsheets are generally optimized for data entry or viewing, rather than for statistical analysis:\n\n-   Tables may be laid out for easy data entry, so that there are multiple observations in a single row\n-   It may be visually preferable to arrange columns of data to show multiple times or categories on the same row for easy comparison\n\nWhen we analyze data, however, we care much more about the fundamental structure of observations: discrete units of data collection. \nEach observation may have several corresponding variables that may be measured simultaneously, but fundamentally each discrete data point is what we are interested in analyzing.\n\nThe structure of **tidy data** reflects this preference for keeping the data in a fundamental form: each observation is in its own row, any observed variables are in single columns. \nThis format is inherently rectangular, which is also important for statistical analysis - our methods are typically designed to work with matrices of data.\n\n![Tidy data format, illustrated.](../images/wrangling/tidydata_1.jpg){#fig-tidy-data-definition fig-alt=\"Stylized text providing an overview of Tidy Data. The top reads “Tidy data is a standard way of mapping the meaning of a dataset to its structure. - Hadley Wickham.” On the left reads “In tidy data: each variable forms a column; each observation forms a row; each cell is a single measurement.” There is an example table on the lower right with columns ‘id’, ‘name’ and ‘color’ with observations for different cats, illustrating tidy data structure.\"}\n\n![An illustration of the principle that every messy dataset is messy in its own way.](../images/wrangling/tidydata_2.jpg){fig-alt=\"There are two sets of anthropomorphized data tables. The top group of three tables are all rectangular and smiling, with a shared speech bubble reading “our columns are variables and our rows are observations!”. Text to the left of that group reads “The standard structure of tidy data means that “tidy datasets are all alike…” The lower group of four tables are all different shapes, look ragged and concerned, and have different speech bubbles reading (from left to right) “my column are values and my rows are variables”, “I have variables in columns AND in rows”, “I have multiple variables in a single column”, and “I don’t even KNOW what my deal is.” Next to the frazzled data tables is text “...but every messy dataset is messy in its own way. -Hadley Wickham.”\"}\n\nThe preference for tidy data has several practical implications: it is easier to reuse code on tidy data, allowing for analysis using a standardized set of tools (rather than having to build a custom tool for each data analysis job).\n\n![Tidy data is easier to manage because the same tools and approaches apply to multiple datasets.](../images/wrangling/tidydata_3.jpg){fig-alt=\"On the left is a happy cute fuzzy monster holding a rectangular data frame with a tool that fits the data frame shape. On the workbench behind the monster are other data frames of similar rectangular shape, and neatly arranged tools that also look like they would fit those data frames. The workbench looks uncluttered and tidy. The text above the tidy workbench reads “When working with tidy data, we can use the same tools in similar ways for different datasets…” On the right is a cute monster looking very frustrated, using duct tape and other tools to haphazardly tie data tables together, each in a different way. The monster is in front of a messy, cluttered workbench. The text above the frustrated monster reads “...but working with untidy data often means reinventing the wheel with one-time approaches that are hard to iterate or reuse.”\"}\n\nIn addition, standardized tools for data analysis means that it is easier to collaborate with others: if everyone starts with the same set of assumptions about the data set, you can borrow methods and tools from a collaborator's analysis and easily apply them to your own data set.\n\n::: {#fig-tidy-data-advantages layout-ncol=\"2\"}\n![Collaboration with tidy data.](../images/wrangling/tidydata_4.jpg){fig-alt=\"Two happy looking round fuzzy monsters, each holding a similarly shaped wrench with the word “wrangle” on it. Between their tools is held up a rectangular data table labeled “TIDY.”\"}\n\n![Tidy data enables standardized workflows.](../images/wrangling/tidydata_5.jpg){fig-alt=\"Cute fuzzy monsters putting rectangular data tables onto a conveyor belt. Along the conveyor belt line are different automated “stations” that update the data, reading “WRANGLE”, “VISUALIZE”, and “MODEL”. A monster at the end of the conveyor belt is carrying away a table that reads “Complete analysis.”\"}\n\nTidy data makes it easier to collaborate with others and analyze new data using standardized workflows.\n:::\n\n::: callout-demo\n### Examples: Messy Data {.unnumbered}\n\n\n\n\n\n\n\n\n\nThese datasets all display the same data: TB cases documented by the WHO in Afghanistan, Brazil, and China, between 1999 and 2000. There are 4 variables: country, year, cases, and population, but each table has a different layout.\n\n::: panel-tabset\n#### Table 1 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 1\n\n|country     | year|  cases| population|\n|:-----------|----:|------:|----------:|\n|Afghanistan | 1999|    745|   19987071|\n|Afghanistan | 2000|   2666|   20595360|\n|Brazil      | 1999|  37737|  172006362|\n|Brazil      | 2000|  80488|  174504898|\n|China       | 1999| 212258| 1272915272|\n|China       | 2000| 213766| 1280428583|\n\n\n:::\n:::\n\n\n\n\nHere, each observation is a single row, each variable is a column, and everything is nicely arranged for e.g. regression or statistical analysis. We can easily compute another measure, such as cases per 100,000 population, by taking cases/population \\* 100000 (this would define a new column).\n\n#### 2 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 2\n\n|country     | year|type       |      count|\n|:-----------|----:|:----------|----------:|\n|Afghanistan | 1999|cases      |        745|\n|Afghanistan | 1999|population |   19987071|\n|Afghanistan | 2000|cases      |       2666|\n|Afghanistan | 2000|population |   20595360|\n|Brazil      | 1999|cases      |      37737|\n|Brazil      | 1999|population |  172006362|\n|Brazil      | 2000|cases      |      80488|\n|Brazil      | 2000|population |  174504898|\n|China       | 1999|cases      |     212258|\n|China       | 1999|population | 1272915272|\n|China       | 2000|cases      |     213766|\n|China       | 2000|population | 1280428583|\n\n\n:::\n:::\n\n\n\n\nHere, we have 4 columns again, but we now have 12 rows: one of the columns is an indicator of which of two numerical observations is recorded in that row; a second column stores the value. This form of the data is more easily plotted in e.g. ggplot2, if we want to show lines for both cases and population, but computing per capita cases would be much more difficult in this form than in the arrangement in table 1.\n\n#### 3 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 3\n\n|country     | year|rate              |\n|:-----------|----:|:-----------------|\n|Afghanistan | 1999|745/19987071      |\n|Afghanistan | 2000|2666/20595360     |\n|Brazil      | 1999|37737/172006362   |\n|Brazil      | 2000|80488/174504898   |\n|China       | 1999|212258/1272915272 |\n|China       | 2000|213766/1280428583 |\n\n\n:::\n:::\n\n\n\n\nThis form has only 3 columns, because the rate variable (which is a character) stores both the case count and the population. We can't do *anything* with this format as it stands, because we can't do math on data stored as characters. However, this form might be easier to read and record for a human being.\n\n#### 4 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 4a\n\n|country     |   1999|   2000|\n|:-----------|------:|------:|\n|Afghanistan |    745|   2666|\n|Brazil      |  37737|  80488|\n|China       | 212258| 213766|\n\n\n:::\n\n::: {.cell-output-display}\n\n\nTable: Table 4b\n\n|country     |       1999|       2000|\n|:-----------|----------:|----------:|\n|Afghanistan |   19987071|   20595360|\n|Brazil      |  172006362|  174504898|\n|China       | 1272915272| 1280428583|\n\n\n:::\n:::\n\n\n\n\nIn this form, we have two tables - one for population, and one for cases. Each year's observations are in a separate column. This format is often found in separate sheets of an excel workbook. To work with this data, we'll need to transform each table so that there is a column indicating which year an observation is from, and then merge the two tables together by country and year.\n\n#### 5 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 5\n\n|country     |century |year |rate              |\n|:-----------|:-------|:----|:-----------------|\n|Afghanistan |19      |99   |745/19987071      |\n|Afghanistan |20      |00   |2666/20595360     |\n|Brazil      |19      |99   |37737/172006362   |\n|Brazil      |20      |00   |80488/174504898   |\n|China       |19      |99   |212258/1272915272 |\n|China       |20      |00   |213766/1280428583 |\n\n\n:::\n:::\n\n\n\n\nTable 5 is very similar to table 3, but the year has been separated into two columns - century, and year. This is more common with year, month, and day in separate columns (or date and time in separate columns), often to deal with the fact that spreadsheets don't always handle dates the way you'd hope they would.\n:::\n:::\n\n::: callout-tip\n### Try it out: Classifying Messy Data\n\n::: panel-tabset\n#### Problem\n\nFor each of the datasets in the previous example, determine whether each table is tidy. If it is not, identify which rule or rules it violates.\n\nWhat would you have to do in order to compute a standardized TB infection rate per 100,000 people?\n\n#### Table 1 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 1\n\n|country     | year|  cases| population|\n|:-----------|----:|------:|----------:|\n|Afghanistan | 1999|    745|   19987071|\n|Afghanistan | 2000|   2666|   20595360|\n|Brazil      | 1999|  37737|  172006362|\n|Brazil      | 2000|  80488|  174504898|\n|China       | 1999| 212258| 1272915272|\n|China       | 2000| 213766| 1280428583|\n\n\n:::\n:::\n\n\n\n\nThis is tidy data. \nComputing a standardized infection rate is as simple as creating the variable rate = cases/population\\*100,000.\n\n#### 2 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 2\n\n|country     | year|type       |      count|\n|:-----------|----:|:----------|----------:|\n|Afghanistan | 1999|cases      |        745|\n|Afghanistan | 1999|population |   19987071|\n|Afghanistan | 2000|cases      |       2666|\n|Afghanistan | 2000|population |   20595360|\n|Brazil      | 1999|cases      |      37737|\n|Brazil      | 1999|population |  172006362|\n|Brazil      | 2000|cases      |      80488|\n|Brazil      | 2000|population |  174504898|\n|China       | 1999|cases      |     212258|\n|China       | 1999|population | 1272915272|\n|China       | 2000|cases      |     213766|\n|China       | 2000|population | 1280428583|\n\n\n:::\n:::\n\n\n\n\nEach variable does not have its own column (so a single year's observation of one country actually has 2 rows). \nComputing a standardized infection rate requires moving cases and population so that each variable has its own column, and then you can proceed using the process in 1.\n\n#### 3 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 3\n\n|country     | year|rate              |\n|:-----------|----:|:-----------------|\n|Afghanistan | 1999|745/19987071      |\n|Afghanistan | 2000|2666/20595360     |\n|Brazil      | 1999|37737/172006362   |\n|Brazil      | 2000|80488/174504898   |\n|China       | 1999|212258/1272915272 |\n|China       | 2000|213766/1280428583 |\n\n\n:::\n:::\n\n\n\n\nEach value does not have its own cell (and each variable does not have its own column).\nIn Table 3, you'd have to separate the numerator and denominator of each cell, convert each to a numeric variable, and then you could proceed as in 1.\n\n#### 4 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 4a\n\n|country     |   1999|   2000|\n|:-----------|------:|------:|\n|Afghanistan |    745|   2666|\n|Brazil      |  37737|  80488|\n|China       | 212258| 213766|\n\n\n:::\n\n::: {.cell-output-display}\n\n\nTable: Table 4b\n\n|country     |       1999|       2000|\n|:-----------|----------:|----------:|\n|Afghanistan |   19987071|   20595360|\n|Brazil      |  172006362|  174504898|\n|China       | 1272915272| 1280428583|\n\n\n:::\n:::\n\n\n\n\nThere are multiple observations in each row because there is not a column for year. \nTo compute the rate, you'd need to \"stack\" the two columns in each table into a single column, add a year column that is 1999, 1999, 1999, 2000, 2000, 2000, and then merge the two tables.\nThen you could proceed as in 1.\n\n#### 5 {.unnumbered}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Table 5\n\n|country     |century |year |rate              |\n|:-----------|:-------|:----|:-----------------|\n|Afghanistan |19      |99   |745/19987071      |\n|Afghanistan |20      |00   |2666/20595360     |\n|Brazil      |19      |99   |37737/172006362   |\n|Brazil      |20      |00   |80488/174504898   |\n|China       |19      |99   |212258/1272915272 |\n|China       |20      |00   |213766/1280428583 |\n\n\n:::\n:::\n\n\n\n\nEach variable does not have its own column (there are two columns for year, in addition to the issues noted in table3). \nComputing the rate would be similar to table 3; the year issues aren't actually a huge deal unless you plot them, at which point 99 will seem to be bigger than 00 (so you'd need to combine the two year columns together first).\n:::\n:::\n\nIt is actually impossible to have a table that violates only one of the rules of tidy data - you have to violate at least two. \nSo a simpler way to state the rules might be:\n\n1.  Each data set goes into its own table (or tibble, if you are using R)\n2.  Each variable gets its own column\n\n::: callout-learnmore\n## Additional reading\n\n@internationalbusinessmachinesRisksUsingSpreadsheets2018 - IBM SPSS ad that talks about the perils of spreadsheets\n\n@obeirneHorrorStories2020 - assembled news stories involving spreadsheet mishaps\n:::\n\nYou have learned some of the skills to tidy data in @sec-strings, and you'll learn more in @sec-data-join, but by the end of this chapter you will have many of the skills needed to wrangle the most common \"messy\" data sets into \"tidy\" form.\n\n## Pivot operations {#sec-pivot-operations}\n\nIt's fairly common for data to come in forms which are convenient for either human viewing or data entry. \nUnfortunately, these forms aren't necessarily the most friendly for analysis.\n\n![Wide and Long format data. [Source](https://github.com/gadenbuie/tidyexplain/raw/main/images/static/png/original-dfs-tidy.png)](../images/wrangling/original-dfs-tidy.png)\n\nThe two operations we'll learn here are wide -\\> long and long -\\> wide.\n\n![Pivoting from wide to long (and back) [Source](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/tidyr-pivoting.gif)](../images/wrangling/tidyr-pivoting.gif)\n\nThis animation uses the R functions `pivot_wider()` and `pivot_longer()` [Animation source](https://github.com/kelseygonzalez/tidyexplain/tree/wider_longer), but the concept is the same in both R and python.\n\n### Longer\n\nIn many cases, the data come in what we might call \"wide\" form - some of the column names are not names of variables, but instead, are themselves values of another variable.\n\n::: panel-tabset\n#### Picture the Operation\n\nTables 4a and 4b are good examples of data which is in \"wide\" form and should be in long(er) form: the years, which are variables, are column names, and the values are cases and population respectively.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a\n## # A tibble: 3 × 3\n##   country     `1999` `2000`\n##   <chr>        <dbl>  <dbl>\n## 1 Afghanistan    745   2666\n## 2 Brazil       37737  80488\n## 3 China       212258 213766\ntable4b\n## # A tibble: 3 × 3\n##   country         `1999`     `2000`\n##   <chr>            <dbl>      <dbl>\n## 1 Afghanistan   19987071   20595360\n## 2 Brazil       172006362  174504898\n## 3 China       1272915272 1280428583\n```\n:::\n\n\n\n\nThe solution to this is to rearrange the data into \"long form\": to take the columns which contain values and \"stack\" them, adding a variable to indicate which column each value came from. \nTo do this, we have to duplicate the values in any column which isn't being stacked (e.g. country, in both the example above and the image below).\n\n![A visual representation of what the pivot_longer operation looks like in practice.](../images/wrangling/tidyr_pivot_longer.png){fig-alt=\"A wide-to-long transformation operation, where the values of the id variables are repeated for each column which is used as a key; the values in each column are moved into a value column. There is a row of data in the transformed data frame for each combination of id variables and key variables.\"}\n\nOnce our data are in long form, we can (if necessary) separate values that once served as column labels into actual variables, and we'll have tidy(er) data.\n\n#### R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntba <- table4a %>% \n  pivot_longer(-country, names_to = \"year\", values_to = \"cases\")\ntbb <- table4b %>% \n  pivot_longer(-country, names_to = \"year\", values_to = \"population\")\n\n# To get the tidy data, we join the two together (see Table joins below)\nleft_join(tba, tbb, by = c(\"country\", \"year\")) %>%\n  # make year numeric b/c it's dumb not to\n  mutate(year = as.numeric(year))\n## # A tibble: 6 × 4\n##   country      year  cases population\n##   <chr>       <dbl>  <dbl>      <dbl>\n## 1 Afghanistan  1999    745   19987071\n## 2 Afghanistan  2000   2666   20595360\n## 3 Brazil       1999  37737  172006362\n## 4 Brazil       2000  80488  174504898\n## 5 China        1999 212258 1272915272\n## 6 China        2000 213766 1280428583\n```\n:::\n\n\n\n\nThe columns are moved to a variable with the name passed to the argument \"names_to\" (hopefully, that is easy to remember), and the values are moved to a variable with the name passed to the argument \"values_to\" (again, hopefully easy to remember).\n\nWe identify ID variables (variables which we don't want to pivot) by not including them in the pivot statement. \nWe can do this in one of two ways:\n\n-   select only variables we want to pivot: `pivot_longer(table4a, cols =`1999`:`2000`, names_to = \"year\", values_to = \"cases\")`\n-   select variables we don't want to pivot, using `-` to remove them. (see above, where `-country` excludes country from the pivot operation)\n\nWhich option is easier depends how many things you're pivoting (and how the columns are structured).\n\nIf we wanted to avoid the table join, we could do this process another way: first, we would add a column to each tibble called id with values \"cases\" and \"population\" respectively. \nThen, we could bind the two tables together by row (so stack them on top of each other).\nWe could then do a wide-to-long pivot, followed by a long-to-wide pivot to get our data into tidy form.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create ID columns\ntable4a.x <- table4a %>% mutate(id = \"cases\")\ntable4b.x <- table4b %>% mutate(id = \"population\")\n# Create one table\ntable4 <- bind_rows(table4a.x, table4b.x)\n\ntable4_long <- table4 %>%\n  # rearrange columns\n  select(country, id, `1999`, `2000`) %>%\n  # Don't pivot country or id\n  pivot_longer(-c(country:id), names_to = \"year\", values_to = \"count\")\n\n# Intermediate fully-long form\ntable4_long\n## # A tibble: 12 × 4\n##    country     id         year       count\n##    <chr>       <chr>      <chr>      <dbl>\n##  1 Afghanistan cases      1999         745\n##  2 Afghanistan cases      2000        2666\n##  3 Brazil      cases      1999       37737\n##  4 Brazil      cases      2000       80488\n##  5 China       cases      1999      212258\n##  6 China       cases      2000      213766\n##  7 Afghanistan population 1999    19987071\n##  8 Afghanistan population 2000    20595360\n##  9 Brazil      population 1999   172006362\n## 10 Brazil      population 2000   174504898\n## 11 China       population 1999  1272915272\n## 12 China       population 2000  1280428583\n\n# make wider, with case and population columns\ntable4_tidy <- table4_long %>%\n  pivot_wider(names_from = id, values_from = count)\n\ntable4_tidy\n## # A tibble: 6 × 4\n##   country     year   cases population\n##   <chr>       <chr>  <dbl>      <dbl>\n## 1 Afghanistan 1999     745   19987071\n## 2 Afghanistan 2000    2666   20595360\n## 3 Brazil      1999   37737  172006362\n## 4 Brazil      2000   80488  174504898\n## 5 China       1999  212258 1272915272\n## 6 China       2000  213766 1280428583\n```\n:::\n\n\n\n\n#### Python\n\nIn Pandas, `pandas.melt(...)` takes `id_vars`, `value_vars`, `var_name`, and `value_name`. \nOtherwise, it functions nearly exactly the same as `pivot_longer`; the biggest difference is that column selection works differently in python than it does in the tidyverse.\n\nAs in R, we can choose to either do a melt/pivot_longer operation on each table and then join the tables together, or we can concatenate the rows and do a melt/pivot_longer operation followed by a pivot/pivot_wider operation.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\n# Get tables from R\ntable4a = r.table4a\ntable4b = r.table4b\n\ntba = pd.melt(table4a, id_vars = ['country'], value_vars = ['1999', '2000'], var_name = 'year', value_name = 'cases')\ntbb = pd.melt(table4b, id_vars = ['country'], value_vars = ['1999', '2000'], var_name = 'year', value_name = 'population')\n\n# To get the tidy data, we join the two together (see Table joins below)\ntable4_tidy = pd.merge(tba, tbb, on = [\"country\", \"year\"], how = 'left')\n```\n:::\n\n\n\n\nHere's the melt/pivot_longer + pivot/pivot_wider version:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\n\n# Get tables from R\ntable4a = r.table4a\ntable4b = r.table4b\n\ntable4a['id'] = \"cases\"\ntable4b['id'] = \"population\"\n\ntable4 = pd.concat([table4a, table4b])\n\n# Fully long form\ntable4_long = pd.melt(table4, id_vars = ['country', 'id'], value_vars = ['1999', '2000'], var_name = 'year', value_name = 'count')\n\n# Tidy form - case and population columns\ntable4_tidy2 = pd.pivot(table4_long, index = ['country', 'year'], columns = ['id'], values = 'count')\n# reset_index() gets rid of the grouped index\ntable4_tidy2.reset_index()\n## id      country  year     cases    population\n## 0   Afghanistan  1999     745.0  1.998707e+07\n## 1   Afghanistan  2000    2666.0  2.059536e+07\n## 2        Brazil  1999   37737.0  1.720064e+08\n## 3        Brazil  2000   80488.0  1.745049e+08\n## 4         China  1999  212258.0  1.272915e+09\n## 5         China  2000  213766.0  1.280429e+09\n```\n:::\n\n\n\n:::\n\n### Wider\n\nWhile it's very common to need to transform data into a longer format, it's not that uncommon to need to do the reverse operation. \nWhen an observation is scattered across multiple rows, your data is too long and needs to be made wider again.\n\n::: panel-tabset\n#### Picture the Operation\n\nTable 2 is an example of a table that is in long format but needs to be converted to a wider layout to be \"tidy\" - there are separate rows for cases and population, which means that a single observation (one year, one country) has two rows.\n\n![A visual representation of what the pivot_wider operation looks like in practice.](../images/wrangling/tidyr_pivot_wider.png){fig-alt=\"An illustration of the transition from long data to wide data. In the long data frame, there are alternating rows of cases and populations, with corresponding counts. In the wide data frame, for each combination of id variables country and year, there are two columns: cases, and pop, each with corresponding values. That is, the key variables (cases, pop) in the long data frame become columns in the wide data frame.\"}\n\n#### R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2 %>%\n  pivot_wider(names_from = type, values_from = count)\n## # A tibble: 6 × 4\n##   country      year  cases population\n##   <chr>       <dbl>  <dbl>      <dbl>\n## 1 Afghanistan  1999    745   19987071\n## 2 Afghanistan  2000   2666   20595360\n## 3 Brazil       1999  37737  172006362\n## 4 Brazil       2000  80488  174504898\n## 5 China        1999 212258 1272915272\n## 6 China        2000 213766 1280428583\n```\n:::\n\n\n\n\n#### Python\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntable2 = r.table2\n\npd.pivot(table2, index = ['country', 'year'], columns = ['type'], values = 'count').reset_index()\n## type      country    year     cases    population\n## 0     Afghanistan  1999.0     745.0  1.998707e+07\n## 1     Afghanistan  2000.0    2666.0  2.059536e+07\n## 2          Brazil  1999.0   37737.0  1.720064e+08\n## 3          Brazil  2000.0   80488.0  1.745049e+08\n## 4           China  1999.0  212258.0  1.272915e+09\n## 5           China  2000.0  213766.0  1.280429e+09\n```\n:::\n\n\n\n:::\n\n::: callout-tip\n### Try it Out!\n\nIn the next section, we'll be using the WHO surveillance of disease incidence data ([link](https://immunizationdata.who.int/)). \nI originally wrote this using data from 2020, but the WHO has since migrated to a new system and now provides their data in a much tidier long form ([link](https://immunizationdata.who.int/global?topic=Reported-cases-and-incidence&location=)). \nFor demonstration purposes, I'll continue using the messier 2020 data, but the link is no longer available on the WHO's site.\n\nIt will require some preprocessing before it's suitable for a demonstration. \nI'll do some of it, but in this section, you're going to do the rest.\n\n::: panel-tabset\n#### Preprocessing\n\nYou don't have to understand what this code is doing just yet.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(purrr) # This uses the map() function as a replacement for for loops. \n# It's pretty sweet\nlibrary(tibble)\nlibrary(dplyr)\n\ndownload.file(\"https://github.com/srvanderplas/datasets/raw/main/raw/2020_WHO_incidence_series.xls\", \"../data/2020_WHO_incidence_series.xls\")\nsheets <- excel_sheets(\"../data/2020_WHO_incidence_series.xls\")\nsheets <- sheets[-c(1, length(sheets))] # get rid of 1st and last sheet name\n\n# This command says \"for each sheet, read in the excel file with that sheet name\"\n# map_df means paste them all together into a single data frame\ndisease_incidence <- map_df(sheets, ~read_xls(path =\"../data/2020_WHO_incidence_series.xls\", sheet = .))\n\n# Alternately, we could write a loop:\ndisease_incidence2 <- tibble() # Blank data frame\nfor (i in 1:length(sheets)) {\n  disease_incidence2 <- bind_rows(\n    disease_incidence2, \n    read_xls(path = \"../data/2020_WHO_incidence_series.xls\", sheet = sheets[i])\n  )\n}\n\n# export for Python (and R, if you want)\nreadr::write_csv(disease_incidence, file = \"../data/2020_who_disease_incidence.csv\")\n```\n:::\n\n\n\n\n#### Problem\n\nDownload the exported data [here](../data/2020_who_disease_incidence.csv) and import it into Python and R. Transform it into long format, so that there is a year column. You should end up with a table that has dimensions of approximately 6 columns and 83,000 rows (or something close to that).\n\nCan you make a line plot of cases of measles in Bangladesh over time?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(disease_incidence)\n## # A tibble: 6 × 43\n##   WHO_REGION ISO_code Cname    Disease `2018` `2017` `2016` `2015` `2014` `2013`\n##   <chr>      <chr>    <chr>    <chr>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n## 1 EMR        AFG      Afghani… CRS         NA     NA     NA      0      0      0\n## 2 EUR        ALB      Albania  CRS          0      0     NA     NA     NA      0\n## 3 AFR        DZA      Algeria  CRS         NA     NA      0      0     NA     NA\n## 4 EUR        AND      Andorra  CRS          0      0      0     NA     NA      0\n## 5 AFR        AGO      Angola   CRS         NA     NA     NA     NA     NA     NA\n## 6 AMR        ATG      Antigua… CRS          0      0      0      0      0      0\n## # ℹ 33 more variables: `2012` <dbl>, `2011` <dbl>, `2010` <dbl>, `2009` <dbl>,\n## #   `2008` <dbl>, `2007` <dbl>, `2006` <dbl>, `2005` <dbl>, `2004` <dbl>,\n## #   `2003` <dbl>, `2002` <dbl>, `2001` <dbl>, `2000` <dbl>, `1999` <dbl>,\n## #   `1998` <dbl>, `1997` <dbl>, `1996` <dbl>, `1995` <dbl>, `1994` <dbl>,\n## #   `1993` <dbl>, `1992` <dbl>, `1991` <dbl>, `1990` <dbl>, `1989` <dbl>,\n## #   `1988` <dbl>, `1987` <dbl>, `1986` <dbl>, `1985` <dbl>, `1984` <dbl>,\n## #   `1983` <dbl>, `1982` <dbl>, `1981` <dbl>, `1980` <dbl>\n```\n:::\n\n\n\n\n#### R solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(stringr)\nwho_disease <- read_csv(\"../data/2020_who_disease_incidence.csv\", na = \".\")\n\nwho_disease_long <- who_disease %>%\n  pivot_longer(matches(\"\\\\d{4}\"), names_to = \"year\", values_to = \"cases\") %>%\n  rename(Country = Cname) %>%\n  mutate(Disease = str_replace(Disease, \"CRS\", \"Congenital Rubella\"),\n         year = as.numeric(year),\n         cases = as.numeric(cases))\n\nfilter(who_disease_long, Country == \"Bangladesh\", Disease == \"measles\") %>%\n  ggplot(aes(x = year, y = cases)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](05-data-reshape_files/figure-html/tryitout-surveillance-cleaning-1.png){width=2100}\n:::\n:::\n\n\n\n\n#### Python solution\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom plotnine import *\n\nwho_disease = pd.read_csv(\"../data/2020_who_disease_incidence.csv\", na_values = ['NA', 'NaN'])\nwho_disease_long = pd.melt(who_disease, id_vars = ['WHO_REGION', 'ISO_code', 'Cname', 'Disease'], var_name = 'year', value_name = 'cases')\n# Rename cname to country\nwho_disease_long = who_disease_long.rename(columns={\"Cname\": \"Country\"})\nwho_disease_long.replace(\"CRS\", \"Congenital Rubella\")\nwho_disease_long['year'] = pd.to_numeric(who_disease_long['year'])\n\ntmp = who_disease_long.query(\"Country=='Bangladesh' & Disease == 'measles'\")\nggplot(tmp, aes(x = \"year\", y = \"cases\")) + geom_line()\n```\n:::\n\n\n\n:::\n:::\n\n\n## Example: Gas Prices Data {#sec-gas-price-ex}\n\nThe US Energy Information Administration tracks gasoline prices, with data available on a weekly level since late 1994. \nYou can go to [this site](https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w) to see a nice graph of gas prices, along with a corresponding table. <!-- (or you can look at the screenshot below, as I don't really trust that the site design will stay the same...) -->\n\n![Gas prices at US EIA site](../images/wrangling/06_gas_prices_screenshot.png)\n\nThe data in the table is structured in a fairly easy to read form: each row is a month; each week in the month is a set of two columns: one for the date, one for the average gas price. \nWhile this data is definitely not tidy, it is readable.\n\nBut looking at the chart at the top of the page, it's not clear how we might get that chart from the data in the format it's presented here: to get a chart like that, we would need a table where each row was a single date, and there were columns for date and price. \nThat would be tidy form data, and so we have to get from the wide, human-readable form into the long, tidier form that we can graph.\n\n::: callout-demo\n### Setup: Gas Price Data Cleaning\n\nFor the next example, we'll read the data in from the HTML table online and work to make it something we could e.g. plot. \nBefore we can start cleaning, we have to read in the data:\n\n::: panel-tabset\n#### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest) # scrape data from the web\nlibrary(xml2) # parse xml data\nurl <- \"https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w\"\n\nhtmldoc <- read_html(url)\ngas_prices_html <- html_table(htmldoc, fill = T, trim = T)[[5]][,1:11]\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: First 6 rows of gas prices data as read into R\n\n|Year-Month |Week 1   |Week 1 |Week 2   |Week 2 |Week 3   |Week 3 |Week 4   |Week 4 |Week 5   |Week 5 |\n|:----------|:--------|:------|:--------|:------|:--------|:------|:--------|:------|:--------|:------|\n|Year-Month |End Date |Value  |End Date |Value  |End Date |Value  |End Date |Value  |End Date |Value  |\n|1994-Nov   |         |       |         |       |         |       |11/28    |1.175  |         |       |\n|1994-Dec   |12/05    |1.143  |12/12    |1.118  |12/19    |1.099  |12/26    |1.088  |         |       |\n|           |         |       |         |       |         |       |         |       |         |       |\n|1995-Jan   |01/02    |1.104  |01/09    |1.111  |01/16    |1.102  |01/23    |1.110  |01/30    |1.109  |\n|1995-Feb   |02/06    |1.103  |02/13    |1.099  |02/20    |1.093  |02/27    |1.101  |         |       |\n\n\n:::\n:::\n\n\n\n\n#### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\ngas_prices_html = pd.read_html(\"https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w\")[4]\n```\n:::\n\n    ('Year-Month', 'Year-Month')    ('Week 1', 'End Date')      ('Week 1', 'Value')  ('Week 2', 'End Date')      ('Week 2', 'Value')  ('Week 3', 'End Date')      ('Week 3', 'Value')  ('Week 4', 'End Date')      ('Week 4', 'Value')  ('Week 5', 'End Date')      ('Week 5', 'Value')    ('Unnamed: 11_level_0', 'Unnamed: 11_level_1')    ('Unnamed: 12_level_0', 'Unnamed: 12_level_1')\n--  ------------------------------  ------------------------  ---------------------  ------------------------  ---------------------  ------------------------  ---------------------  ------------------------  ---------------------  ------------------------  ---------------------  ------------------------------------------------  ------------------------------------------------\n 0  1994-Nov                        nan                                     nan      nan                                     nan      nan                                     nan      11/28                                     1.175  nan                                     nan                                                   nan                                               nan\n 1  1994-Dec                        12/05                                     1.143  12/12                                     1.118  12/19                                     1.099  12/26                                     1.088  nan                                     nan                                                   nan                                               nan\n 2  nan                             nan                                     nan      nan                                     nan      nan                                     nan      nan                                     nan      nan                                     nan                                                   nan                                               nan\n 3  1995-Jan                        01/02                                     1.104  01/09                                     1.111  01/16                                     1.102  01/23                                     1.11   01/30                                     1.109                                               nan                                               nan\n 4  1995-Feb                        02/06                                     1.103  02/13                                     1.099  02/20                                     1.093  02/27                                     1.101  nan                                     nan                                                   nan                                               nan\n\n\n\n\n:::\n:::\n\n::: callout-tip\n### Try it out: Manual Formatting in Excel\n\n::: panel-tabset\n#### Problem\n\nAn excel spreadsheet of the data as downloaded in January 2023 is available [here](https://github.com/srvanderplas/datasets/raw/main/raw/gas_prices_updated.xlsx). \nCan you manually format the data (or even just the first year or two of data) into a long, skinny format?\n\nWhat steps are involved?\n\n#### Solution\n\n1.  Copy the year-month column, creating one vertical copy for every set of columns\n\n2.  Move each block of two columns down to the corresponding vertical copy\n\n3.  Delete empty rows\n\n4.  Format dates\n\n5.  Delete empty columns\n\n#### Video\n\n::: {#fig-excel-demo-video}\n<iframe class='youtube-video-container' width=\"736\" height=\"414\" src=\"https://www.youtube.com/embed/n70eAKJmzRo\" title=\"06 Tidying Gas Price Data (in Excel)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n\n</iframe>\n\nHere is a video of me doing most of the cleaning steps - I skipped out on cleaning up the dates because Excel is miserable for working with dates.\n:::\n:::\n:::\n\n\n::: callout-tip\n### Try it out: Formatting with Pivot Operations\n\n::: panel-tabset\n#### Problem\n\nCan you format the data in a long-skinny format for plotting using pivot operations without any database merges?\n\nWrite out a list of steps, and for each step, sketch out what the data frame should look like.\n\nHow do your steps compare to the steps you used for the manual approach?\n\n#### Sketch\n\n![Steps to work through the gas prices data cleaning process](../images/wrangling/gas-prices-steps.png){fig-alt=\"Step 1: set row names to be more descriptive and remove header row. Step 2: Remove empty columns and pivot to long form, with dates and values in the same column and a description column that indicates what type of data is in the value column. Step 3: separate the week and variable information into different columns, discarding the week label. Step 4: pivot wider, so that date and value information are each in a single column. Step 5: remove rows with no values and create a yyyy-mm-dd format date. Step 6: Convert date and value into appropriate types (date, numeric).\"}\n\n#### R solution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(magrittr) # pipe friendly operations\n\n# Function to clean up column names\n# Written as an extra function because it makes the code a lot cleaner\nfix_gas_names <- function(x) {\n  # Add extra header row information\n  paste(x, c(\"\", rep(c(\"Date\", \"Value\"), times = 5))) %>%\n    # trim leading/trailing spaces\n    str_trim() %>%\n    # replace characters in names that aren't ok for variables in R\n    make.names()\n}\n\n# Clean up the table a bit\ngas_prices_raw <- gas_prices_html %>%\n  set_names(fix_gas_names(names(.))) %>%\n  # remove first row that is really an extra header row\n  filter(Year.Month != \"Year-Month\") %>%\n  # get rid of empty rows\n  filter(Year.Month != \"\")\n\nhead(gas_prices_raw)\n## # A tibble: 6 × 11\n##   Year.Month Week.1.Date Week.1.Value Week.2.Date Week.2.Value Week.3.Date\n##   <chr>      <chr>       <chr>        <chr>       <chr>        <chr>      \n## 1 1994-Nov   \"\"          \"\"           \"\"          \"\"           \"\"         \n## 2 1994-Dec   \"12/05\"     \"1.143\"      \"12/12\"     \"1.118\"      \"12/19\"    \n## 3 1995-Jan   \"01/02\"     \"1.104\"      \"01/09\"     \"1.111\"      \"01/16\"    \n## 4 1995-Feb   \"02/06\"     \"1.103\"      \"02/13\"     \"1.099\"      \"02/20\"    \n## 5 1995-Mar   \"03/06\"     \"1.103\"      \"03/13\"     \"1.096\"      \"03/20\"    \n## 6 1995-Apr   \"04/03\"     \"1.116\"      \"04/10\"     \"1.134\"      \"04/17\"    \n## # ℹ 5 more variables: Week.3.Value <chr>, Week.4.Date <chr>,\n## #   Week.4.Value <chr>, Week.5.Date <chr>, Week.5.Value <chr>\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# gas_prices_raw <- select(gas_prices_raw, -c(X, Date))\ngas_prices_long <- pivot_longer(gas_prices_raw, -Year.Month,\n                                names_to = \"variable\", values_to = \"value\")\n\nhead(gas_prices_long)\n## # A tibble: 6 × 3\n##   Year.Month variable     value\n##   <chr>      <chr>        <chr>\n## 1 1994-Nov   Week.1.Date  \"\"   \n## 2 1994-Nov   Week.1.Value \"\"   \n## 3 1994-Nov   Week.2.Date  \"\"   \n## 4 1994-Nov   Week.2.Value \"\"   \n## 5 1994-Nov   Week.3.Date  \"\"   \n## 6 1994-Nov   Week.3.Value \"\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngas_prices_sep <- separate(gas_prices_long, variable, into = c(\"extra\", \"week\", \"variable\"), sep = \"\\\\.\") %>%\n  select(-extra)\nhead(gas_prices_sep)\n## # A tibble: 6 × 4\n##   Year.Month week  variable value\n##   <chr>      <chr> <chr>    <chr>\n## 1 1994-Nov   1     Date     \"\"   \n## 2 1994-Nov   1     Value    \"\"   \n## 3 1994-Nov   2     Date     \"\"   \n## 4 1994-Nov   2     Value    \"\"   \n## 5 1994-Nov   3     Date     \"\"   \n## 6 1994-Nov   3     Value    \"\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngas_prices_wide <- pivot_wider(gas_prices_sep, id_cols = c(\"Year.Month\", \"week\"), names_from = variable, values_from = value)\nhead(gas_prices_wide)\n## # A tibble: 6 × 4\n##   Year.Month week  Date    Value  \n##   <chr>      <chr> <chr>   <chr>  \n## 1 1994-Nov   1     \"\"      \"\"     \n## 2 1994-Nov   2     \"\"      \"\"     \n## 3 1994-Nov   3     \"\"      \"\"     \n## 4 1994-Nov   4     \"11/28\" \"1.175\"\n## 5 1994-Nov   5     \"\"      \"\"     \n## 6 1994-Dec   1     \"12/05\" \"1.143\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngas_prices_date <- gas_prices_wide %>%\n  filter(nchar(Value) > 0) %>%\n  separate(Year.Month, into = c(\"Year\", \"Month\"), sep = \"-\") %>%\n  mutate(Date = paste(Year, Date, sep = \"/\")) %>%\n  select(-c(1:3))\n  \nhead(gas_prices_date)\n## # A tibble: 6 × 2\n##   Date       Value\n##   <chr>      <chr>\n## 1 1994/11/28 1.175\n## 2 1994/12/05 1.143\n## 3 1994/12/12 1.118\n## 4 1994/12/19 1.099\n## 5 1994/12/26 1.088\n## 6 1995/01/02 1.104\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\ngas_prices <- gas_prices_date %>%\n  mutate(Date = ymd(Date),\n         Price.per.gallon = as.numeric(Value)) %>%\n  select(-Value)\n  \nhead(gas_prices)\n## # A tibble: 6 × 2\n##   Date       Price.per.gallon\n##   <date>                <dbl>\n## 1 1994-11-28             1.18\n## 2 1994-12-05             1.14\n## 3 1994-12-12             1.12\n## 4 1994-12-19             1.10\n## 5 1994-12-26             1.09\n## 6 1995-01-02             1.10\n```\n:::\n\n\n\n\n#### Python solution\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\ndef fix_gas_names(x):\n  xx = pd.Series(x)\n  # add extra stuff to x\n  y = [\"Date\", \"Value\"]*5\n  y = [\"\", *y, \"\", \"\"]\n  names = xx + ' ' + y\n  names = names.str.strip()\n  names = names.str.replace(\" \", \".\")\n  return list(names)\n\n\ngas_prices_raw = gas_prices_html.copy()\n\n# What do column names look like?\ngas_prices_raw.columns # Multi-Index \n## MultiIndex([(         'Year-Month',          'Year-Month'),\n##             (             'Week 1',            'End Date'),\n##             (             'Week 1',               'Value'),\n##             (             'Week 2',            'End Date'),\n##             (             'Week 2',               'Value'),\n##             (             'Week 3',            'End Date'),\n##             (             'Week 3',               'Value'),\n##             (             'Week 4',            'End Date'),\n##             (             'Week 4',               'Value'),\n##             (             'Week 5',            'End Date'),\n##             (             'Week 5',               'Value'),\n##             ('Unnamed: 11_level_0', 'Unnamed: 11_level_1'),\n##             ('Unnamed: 12_level_0', 'Unnamed: 12_level_1')],\n##            )\n# (https://stackoverflow.com/questions/25189575/pandas-dataframe-select-columns-in-multiindex)\n\ncolnames = fix_gas_names(gas_prices_raw.columns.get_level_values(0))\ncolnames\n## ['Year-Month', 'Week.1.Date', 'Week.1.Value', 'Week.2.Date', 'Week.2.Value', 'Week.3.Date', 'Week.3.Value', 'Week.4.Date', 'Week.4.Value', 'Week.5.Date', 'Week.5.Value', 'Unnamed:.11_level_0', 'Unnamed:.12_level_0']\n\n# Set new column names\ngas_prices_raw.columns = colnames\n\n# Drop any rows with NaN in Year-Month\ngas_prices_raw = gas_prices_raw.dropna(axis = 0, subset = ['Year-Month'])\n\n# Drop extra columns on the end\ngas_prices_raw = gas_prices_raw.iloc[:,0:11]\ngas_prices_raw.head()\n##   Year-Month Week.1.Date  Week.1.Value  ... Week.4.Value  Week.5.Date Week.5.Value\n## 0   1994-Nov         NaN           NaN  ...        1.175          NaN          NaN\n## 1   1994-Dec       12/05         1.143  ...        1.088          NaN          NaN\n## 3   1995-Jan       01/02         1.104  ...        1.110        01/30        1.109\n## 4   1995-Feb       02/06         1.103  ...        1.101          NaN          NaN\n## 5   1995-Mar       03/06         1.103  ...        1.102          NaN          NaN\n## \n## [5 rows x 11 columns]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngas_prices_long = pd.melt(gas_prices_raw, id_vars = 'Year-Month', var_name = 'variable')\ngas_prices_long.head()\n##   Year-Month     variable  value\n## 0   1994-Nov  Week.1.Date    NaN\n## 1   1994-Dec  Week.1.Date  12/05\n## 2   1995-Jan  Week.1.Date  01/02\n## 3   1995-Feb  Week.1.Date  02/06\n## 4   1995-Mar  Week.1.Date  03/06\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngas_prices_sep = gas_prices_long\ngas_prices_sep[[\"extra\", \"week\", \"variable\"]] = gas_prices_sep.variable.str.split(r'\\.', expand = True)\ngas_prices_sep = gas_prices_sep.drop('extra', axis = 1)\ngas_prices_sep.head()\n##   Year-Month variable  value week\n## 0   1994-Nov     Date    NaN    1\n## 1   1994-Dec     Date  12/05    1\n## 2   1995-Jan     Date  01/02    1\n## 3   1995-Feb     Date  02/06    1\n## 4   1995-Mar     Date  03/06    1\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngas_prices_wide = pd.pivot(gas_prices_sep, index=['Year-Month', 'week'], columns = 'variable', values = 'value')\ngas_prices_wide.head()\n## variable          Date  Value\n## Year-Month week              \n## 1994-Dec   1     12/05  1.143\n##            2     12/12  1.118\n##            3     12/19  1.099\n##            4     12/26  1.088\n##            5       NaN    NaN\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngas_prices_date = gas_prices_wide.dropna(axis = 0, subset = ['Date', 'Value']).reset_index()\ngas_prices_date[['Year', 'Month']] = gas_prices_date['Year-Month'].str.split(r'-', expand = True)\ngas_prices_date['Date'] = gas_prices_date.Year + '/' + gas_prices_date.Date\ngas_prices_date['Date'] = pd.to_datetime(gas_prices_date.Date)\n\ngas_prices_date.head()\n## variable Year-Month week       Date  Value  Year Month\n## 0          1994-Dec    1 1994-12-05  1.143  1994   Dec\n## 1          1994-Dec    2 1994-12-12  1.118  1994   Dec\n## 2          1994-Dec    3 1994-12-19  1.099  1994   Dec\n## 3          1994-Dec    4 1994-12-26  1.088  1994   Dec\n## 4          1994-Nov    4 1994-11-28  1.175  1994   Nov\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngas_prices = gas_prices_date.drop([\"Year-Month\", \"Year\", \"Month\", \"week\"], axis = 1)\ngas_prices['Price_per_gallon'] = gas_prices.Value\ngas_prices = gas_prices.drop(\"Value\", axis = 1)\ngas_prices.head()\n## variable       Date Price_per_gallon\n## 0        1994-12-05            1.143\n## 1        1994-12-12            1.118\n## 2        1994-12-19            1.099\n## 3        1994-12-26            1.088\n## 4        1994-11-28            1.175\n```\n:::\n\n\n\n:::\n:::\n\nWe'll return to this example in @sec-gas-price-ex2 to demonstrate how you can use pivot operations and database merges together to complete this operation in a slightly different way.\n\n::: callout-learnmore\n## Other resources\n\n@doughertyCleanMessyData2021 - very nice task-oriented chapter that's below the level addressed in this course but still useful\n:::\n\n## References\n",
    "supporting": [
      "05-data-reshape_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}