# Databases {#sec-databases}

Coming soon!

There are many different database formats. Some of the most common databases are SQL* related formats and (for older datasets) Microsoft Access files. 

[This excellent GitHub repo contains code to connect to multiple types of databases in R, python, PHP, Java, SAS, and VBA](https://github.com/ParfaitG/DATABASE_CONNECTIONS)


## Microsoft Access

To get access to MS Access databases, you will need to become familiar with how to install ODBC drivers. These drivers tell your operating system how to connect to each type of database (so you need a different driver to get to MS Access databases than to get to SQL databases). 

::: {.callout-note collapse="true"}

### Install ODBC Drivers on your machine {-}

<i class="fa-brands fa-windows"></i> and <i class="fa-brands fa-apple"></i> [This set of instructions](https://exploratory.io/note/exploratory/How-to-import-Data-from-Microsoft-Access-Database-with-ODBC-zIJ2bjs2) appears to contain all of the right steps for Windows and Mac and has been updated recently (Feb 2022) [@teamexploratoryHowImportData2022]. 

<i class="fa-brands fa-linux"></i> I installed `mdbtools` on Ubuntu and have the following entry in my `/etc/odbcinst.ini` file:

```
[MDBTools]
Description=MDBTools Driver
Driver=libmdbodbc.so
Setup=libmdbodbc.so
FileUsage=1
UsageCount=1
```

Adding this entry to the file may be part of the `mdbtools` installation - I certainly have no memory of doing it myself, but this may help if you're troubleshooting, so I've included it.

:::

::: demo

### Database IO: Scottish Witchcraft

For this demo, we'll be using the [Scottish Witchcraft Database](http://witches.shca.ed.ac.uk/index.cfm?fuseaction=home.register)[@juliangoodareSurveyScottishWitchcraft2003], which you can download from their website, or acquire from the [course data folder](https://github.com/srvanderplas/unl-stat850/raw/main/data/Witchcraftsurvey_download.mdb) if you don't want to register with the authors. 
A description of the dataset is also [available](https://github.com/srvanderplas/unl-stat850/raw/main/data/Witchcraftsurvey_download.doc). 

::: panel-tabset

#### R {-}

In R, we can read in MS Access files using the `Hmisc` package, as long as the mdbtools library is available on your computer^[A currently maintained version of the library is [here](https://github.com/cyberemissary/mdbtools) and should work for UNIX platforms. It may be possible to install the library on Windows using the UNIX subsystem, per [this thread](https://github.com/brianb/mdbtools/issues/107)]. 


```{r}
#| label: msaccess-data
if (!"Hmisc" %in% installed.packages()) install.packages("Hmisc")
library(Hmisc)
db_loc <- "../data/Witchcraftsurvey_download.mdb"

mdb.get(db_loc, tables = TRUE) # get table list
mdb.get(db_loc, tables = "WDB_Trial")[1:6,1:10] # get table of trials, print first 6 rows and 10 cols
```
Many databases have multiple tables with **keys** that connect information in each table. We'll spend more time on databases later in the semester - for now, it's enough to be able to get data out of one. 
#### Python {-}

There are several tutorials out there to access MS Access databases using packages like `pyodbc` [e.g. @datatofishHowConnectPython2021]. I couldn't quite get these working on Linux, but it is possible you may have better luck on another OS. With that said, the solution using [pandas_access](https://pypi.org/project/pandas_access/) seems to be much simpler and require less OS configuration, so it's what I'll show here.

First, we have to install `pandas_access` using `pip install pandas_access`. 

```{python}
#| label: msaccess-data-py
import pandas_access as mdb
db_filename = '../data/Witchcraftsurvey_download.mdb'

# List tables
for tbl in mdb.list_tables(db_filename):
  print(tbl)

# Read a small table.
trials = mdb.read_table(db_filename, "WDB_Trial_Person")
```

This isn't perfectly stable - I tried to read `WDB_Trial` and got errors about NA values in an integer field - but it does at least work.



:::

:::

My hope is that you never actually need to get at data in an MS Access database - the format seems to be largely dying out.

### SQLite

SQLite databases are contained in single files with the extension .SQLite. These files can still contain many different tables, though. They function as databases but are more portable than SQL databases that require a server instance to run and connecting over a network (or running a server on your machine locally). As a result, they provide an opportunity to demonstrate most of the skills required for working with databases without all of the configuration overhead. 

::: demo
::: panel-tabset
#### R {-}

Let's try working with a sqlite file that has only one table in R: 

```{r}
#| label: sqlite-data
if (!"RSQLite" %in% installed.packages()) install.packages("RSQLite")
if (!"DBI" %in% installed.packages()) install.packages("DBI")
library(RSQLite)
library(DBI)

# Download the baby names file:
download.file("http://2016.padjo.org/files/data/starterpack/ssa-babynames/ssa-babynames-for-2015.sqlite", destfile = "../data/ssa-babynames-2015.sqlite")

con <- dbConnect(RSQLite::SQLite(), "../data/ssa-babynames-2015.sqlite")
dbListTables(con) # List all the tables
babyname <- dbReadTable(con, "babynames")
head(babyname, 10) # show the first 10 obs
```


You can of course write formal queries using the DBI package, but for many databases, it's easier to do the querying in R. We'll cover both options later - the R version will be in the next module.

#### Python {-}

This example was created using @datacarpentryAccessingSQLiteDatabases2019 as a primary reference.

If you haven't already downloaded the database file, you can do that automatically in python using this code:

```{python}
#| label: sqlite-data-dl-py
#| eval: !expr F
import urllib.request
urllib.request.urlretrieve("http://2016.padjo.org/files/data/starterpack/ssa-babynames/ssa-babynames-for-2015.sqlite", "../data/babynames-2015.sqlite")
```

You don't have to install the `sqlite3` module in python using pip because it's been included in base python since Python 2.5.

```{python}
#| label: sqlite-data-py
import pandas as pd
import sqlite3

con = sqlite3.connect('../data/babynames-2015.sqlite')

babyname = pd.read_sql_query("SELECT * from babynames", con)
babyname

con.close() # You must close any connection you open!
```

:::
:::

## References