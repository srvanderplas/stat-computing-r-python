# Introduction to Programming {#sec-intro-prog}

## Objectives {.nonumber}

- Define programming and provide examples of programming
- Identify reserved words in R and python
- Know how to get help when using R and python

## What is Programming?

> Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to produce bigger and better idiots. So far, the universe is winning. - Rick Cook

Programming is the art of solving a problem by developing a sequence of steps that make up a solution, and then very carefully communicating those steps to the computer.
To program, you need to know how to

- break a problem down into smaller, easily solvable problems
- solve the small problems
- communicate the solution to a computer using a programming language

In this book, we'll be using both R and Python, and we'll be using these languages to solve problems that are related to working with data.
At first, we'll start with smaller, simpler problems that don't involve data, but by the end, you will hopefully be able to solve some statistical problems using one or both languages.

It will be hard at first - you have to learn the vocabulary in both languages in order to be able to put commands into logical "sentences".
The problem solving skills are the same for all programming languages, though, and while those are harder to learn, they'll last you a lifetime.

Just as you wouldn't expect to learn French or Mandarin fluently after taking a single class, you cannot expect to be fluent in R or python once you've worked through this book.
Fluency takes years of work and practice, and lots of mistakes along the way.
You *cannot* learn a language (programming or otherwise) if you're worried about making mistakes.
Take a minute and put those concerns away somewhere, take a deep breath, and remember the Magic School Bus Motto:

![For those who don't know, the Magic School Bus is a PBS series that aired in the 1990s and was brought back by Netflix in 2017. It taught kids about different principles of science and the natural world.](../images/gen-prog/ms-frizzle.png){fig-alt="A picture of Ms. Frizzle, a teacher with red curly hair and a lizard around her neck, saying 'Take chances, make mistakes, get messy'" width="50%"}

## Programming Vocabulary: Hello World

I particularly like the way that Python for Everybody [@py4e] explains vocabulary (my changes in parentheses):

> Unlike human languages, the (R and) Python vocabulary is actually pretty small. We call this "vocabulary" the "reserved words". These are words that have very special meaning to (R and) Python. When (R) Python sees these words in a (R) Python program, they have one and only one meaning to (R) Python. Later as you write programs you will make up your own words that have meaning to you called variables. You will have great latitude in choosing your names for your variables, but you cannot use any of (R or) Python's reserved words as a name for a variable.

> When we train a dog, we use special words like "sit", "stay", and "fetch". When you talk to a dog and don't use any of the reserved words, they just look at you with a quizzical look on their face until you say a reserved word. For example, if you say, "I wish more people would walk to improve their overall health", what most dogs likely hear is, "blah blah blah walk blah blah blah blah." That is because "walk" is a reserved word in dog language. Many might suggest that the language between humans and cats has no reserved words.

::: panel-tabset

### Python

> The reserved words in the language where humans talk to Python include the following:

    and       del       global      not       with
    as        elif      if          or        yield
    assert    else      import      pass
    break     except    in          raise
    class     finally   is          return
    continue  for       lambda      try
    def       from      nonlocal    while

### R

> The reserved words in the language where humans talk to R include the following:

    if          else     repeat      while
    for         in       next        break
    TRUE        FALSE    NULL        Inf
    NA_integer_ NA_real_ NA_complex_ NA_character_
    NaN         NA       function    ...

:::


> That is it, and unlike a dog, (R) Python is already completely trained. When you say 'try', (R) Python will try every time you say it without fail.

> We will learn these reserved words and how they are used in good time, but for now we will focus on the (R) Python equivalent of "speak" (in human-to-dog language). The nice thing about telling (R and) Python to speak is that we can even tell it what to say by giving it a message in quotes:

::: panel-tabset
### Python

```{python}
print('Hello world!')
```

### R

```{r}
print('Hello world!')
```

:::

The "Hello World" program looks exactly the same in R as it does in python!

> And we have even written our first syntactically correct (R and) Python sentence. Our sentence starts with the function print followed by a string of text of our choosing enclosed in single quotes. The strings in the print statements are enclosed in quotes. Single quotes and double quotes do the same thing; most people use single quotes except in cases like this where a single quote (which is also an apostrophe) appears in the string.


In many situations, R and python will be similar because both languages are based on C. 
R has a more complicated history [@ihakaFutureHistory1998], because it is also similar to Lisp, but both languages are still very similar to C and often run C or C++ code in the background.


## Getting help

In both R and python, you can access help with a `?` - the order is just slightly different.

Suppose we want to get help on a `for` loop in either language.

In R, we can run this line of code to get help on `for` loops.

```{r}
#| eval: !expr F
?`for`
```

Because `for` is a reserved word in R, we have to use backticks (the key above the `TAB` key) to surround the word `for` so that R knows we're talking about the function itself. Most other function help can be accessed using `?function_name`. The backtick trick also works for functions that don't start with letters, like `+`.

In python, we use `for?` to access the same information.

```{python}
#| eval: !expr F
for? # help printed in the terminal
?for # help printed in the help pane
```

(You will have to run this in interactive mode for it to work in either language)

w3schools has an excellent python [help page](https://www.w3schools.com/python/python_for_loops.asp) that may be useful as well.
Searching for help using google also works well, particularly if you know what sites are likely to be helpful, like w3schools and stackoverflow.
A similar set of pages exists for [R help on basic functions](https://www.w3schools.com/r/r_for_loop.asp)

::: callout-note
## Learn More

[A nice explanation of the difference between an interpreter and a compiler](https://www.py4e.com/html3/01-intro#terminology-interpreter-and-compiler). Both Python and R are interpreted languages that are *compiled* from lower-level languages like C.
:::

## References {#sec-gen-prog-refs}
