# Matrix Calculations {#sec-matrix-calcs}

::: callout-advanced
This entire section is only appropriate if you've already had linear algebra.
:::

## Objectives {-}

-   Understand how to do matrix algebra in relevant programming languages

While R and Python are extremely powerful statistical programming languages, the core of most programming languages is the ability to do basic calculations and matrix arithmetic.
As almost every dataset is stored as a matrix-like structure (data sets and data frames both allow for multiple types, which isn't quite compatible with more canonical matrices), it is useful to know how to do matrix-level calculations in whatever language you are planning to use to work with data.

In this section, we will essentially be using our programming language as overgrown calculators.

## Matrix Operations

| Operation                    | R          | Python              |
|:-----------------------------|:-----------|:--------------------|
| Addition                     | \+         | \+                  |
| Subtraction                  | \-         | \-                  |
| Elementwise Multiplication   | \*         | \*                  |
| Division                     | /          | /                   |
| Modulo (Remainder)           | %%         | \%                  |
| Integer Division             | %/%        | //                  |
| Elementwise Exponentiation   | \^         | `**`                |
| Matrix/Vector Multiplication | %\*%       | `np.dot()`          |
| Matrix Exponentiation        | \^         | `np.exp()`          |
| Matrix Transpose             | `t(A)`     | `np.transpose(A)`   |
| Matrix Determinant           | `det(A)`   | `np.linalg.det(A)`  |
| Matrix Diagonal              | `diag(A)`  | `np.linalg.diag(A)` |
| Matrix Inverse               | `solve(A)` | `np.linalg.inv(A)`  |

: Table of common mathematical and matrix operations in R and Python [@PythonProgramming]. {#tbl-math-ops}

::: callout-demo
### Basic Mathematical Operators

::: panel-tabset
#### R {.unnumbered}

```{r}
#| label: math-operators-r
x <- 1:10
y <- seq(3, 30, by = 3)

x + y
x - y
x * y
x / y
x^2
t(x) %*% y
```

#### Python {.unnumbered}

```{python}
#| label: math-operators-py
import numpy as np

x = np.array(range(1, 11))
y = np.array(range(3, 33, 3)) # python indexes are not inclusive

x + y
x - y
x * y
x / y
x ** 2
np.dot(x.T, y)
```
:::
:::

::: callout-demo
### Matrix Operations

Other matrix operations, such as determinants and extraction of the matrix diagonal, are similarly easy:

::: panel-tabset
#### R {.unnumbered}

```{r}
#| label: matrix-operations-r
mat <- matrix(c(1, 2, 3, 6, 4, 5, 7, 8, 9), nrow = 3, byrow = T)
mat
t(mat) # transpose
det(mat) # get the determinant
diag(mat) # get the diagonal
diag(diag(mat)) # get a square matrix with off-diag 0s
diag(1:3) # diag() also will create a diagonal matrix if given a vector
```

#### Python {.unnumbered}

```{python}
#| label: matrix-operations-py
import numpy as np
mat = np.array([[1, 2, 3],[6, 4, 5],[7, 8, 9]], dtype = int, order ='C')

mat
mat.T
np.linalg.det(mat) # numerical precision...
np.diag(mat)
np.diag(np.diag(mat))
np.diag(range(1, 4))
```
:::
:::

::: callout-demo
### Matrix Inverse

The other important matrix-related function is the inverse.
In R, `A^-1` will get you the elementwise reciprocal of the matrix.
Not exactly what we'd like to see...
Instead, we use the `solve()` function.
The inverse is defined as the matrix B such that `AB = I` where `I` is the identity matrix (1's on diagonal, 0's off-diagonal).
So if we `solve(A)` (in R) or `solve(A, diag(n))` in SAS (where n is a vector of 1s the size of A), we will get the inverse matrix.
In Python, we use the `np.linalg.inv()` function to invert a matrix, which may be a bit more linguistically familiar.

::: panel-tabset
#### R {.unnumbered}

```{r}
#| label: invert-matrix-example-r
mat <- matrix(c(1, 2, 3, 6, 4, 5, 7, 8, 9), nrow = 3, byrow = T)

minv <- solve(mat) # get the inverse

minv
mat %*% minv 
```

#### Python {.unnumbered}

```{python}
#| label: invert-matrix-example-py
import numpy as np
mat = np.array([[1, 2, 3],[6, 4, 5],[7, 8, 9]], dtype = int, order ='C')

minv = np.linalg.inv(mat)
minv
np.dot(mat, minv)
np.round(np.dot(mat, minv), 2)
```
:::
:::

## References
