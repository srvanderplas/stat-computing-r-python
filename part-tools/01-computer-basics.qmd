# Computer Basics {#sec-computer-basics}

## Objectives {-}

- Know the meaning of computer hardware and operating system terms such as hard drive, memory, CPU, OS/operating system, file system, directory, and system paths

- Understand the basics of how the above concepts relate to each other and contribute to how a computer works

- Understand the file system mental model for computers

## Hardware


Here is a short 3-minute video on the basic hardware that makes up your computer. It is focused on desktops, but the same components (with the exception of the optical drive) are commonly found in cell phones, smart watches, and laptops.

::: youtube-video-container
<iframe width="100%" height="auto" src="https://www.youtube.com/embed/Rdm8E59L8Og" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>
:::

When programming, it is usually helpful to understand the distinction between RAM and disk storage (hard drives). We also need to know at least a little bit about processors (so that we know when we've asked our processor to do too much). Most of the other details aren't necessary (for now).

::: learn-more
-   [Chapter 1 of Python for Everybody](https://www.py4e.com/html3/01-intro) - Computer hardware architecture
:::


## Operating Systems

Operating systems, such as Windows, MacOS, or Linux, are a sophisticated program that allows CPUs to keep track of multiple programs and tasks and execute them at the same time.

::: youtube-video-container
<iframe width="100%" height="auto" src="https://www.youtube.com/embed/RhHMgkUdhdk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>
:::

## File Systems

::: warning
For this class, it will probably be important to distinguish between local file storage (C:/ drive <i class="fa-brands fa-windows"></i>, /user/your-name/ <i class="fa-brands fa-apple"></i>, or  /home/your-name/ <i class="fa-brands fa-linux"></i>) and network/virtual file systems, such as OneDrive and iCloud. Over time, it has become harder to ensure that you are working on a local machine, but working "in the cloud" can cause odd errors when programming and in particular when working with version control systems^[To disable onedrive sync for certain windows folders, use [this guide](https://support.microsoft.com/en-us/office/files-save-to-onedrive-by-default-in-windows-10-33da0077-770c-4bda-b61e-8c8e8ca70ac7)].

You want to save your files in this class to your **physical hard drive**. This will save you a lot of troubleshooting time.
:::


Evidently, there has been a bit of generational shift as computers have evolved: the "file system" metaphor itself is outdated because no one uses physical files anymore. [This article](https://futurism.com/the-byte/gen-z-kids-file-systems) [@robitzskiGenKidsApparently2021] is an interesting discussion of the problem: it makes the argument that with modern search capabilities, most people use their computers as a laundry hamper instead of as a nice, organized filing cabinet.

::: youtube-video-container
<iframe width="1280" height="720" src="https://www.youtube.com/embed/KN8YgJnShPM" title="Files &amp; File Systems: Crash Course Computer Science #20" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
:::

Regardless of how you tend to organize your personal files, it is probably helpful to understand the basics of what is meant by a computer **file system** -- a way to organize data stored on a hard drive. Since data is always stored as 0's and 1's, it's important to have some way to figure out what type of data is stored in a specific location, and how to interpret it.

::: youtube-video-container
<iframe width="1280" height="720" src="https://www.youtube.com/embed/BV0-EPUYuQc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
:::

That's not enough, though - we also need to know how computers remember the location of what is stored where. Specifically, we need to understand **file paths**.

::: youtube-video-container
<iframe width="560" height="315" src="https://www.youtube.com/embed/BMT3JUWmqYY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>

</iframe>
:::

When you write a program, you may have to reference external files - data stored in a .csv file, for instance, or a picture. Best practice is to create a file structure that contains everything you need to run your entire project in a single file folder (you can, and sometimes should, have sub-folders).

For now, it is enough to know how to find files using file paths, and how to refer to a file using a relative file path from your base folder. In this situation, your "base folder" is known as your **working directory** - the place your program thinks of as home.


## System Paths

When you install software, it is saved in a specific location on your computer, like C:/Program Files/ on {{< fa brands windows >}}, /Applications/ on {{< fa brands apple >}}, or /usr/local/bin/ on {{< fa brands linux >}}. For the most part, you don't need to keep track of where programs are installed, because the install process (usually) automatically creates icons on your desktop or in your start menu, and you find your programs there.

Unfortunately, that isn't sufficient when you're programming, because you may need to know where a program is in order to reference that program -- for instance, if you need to pop open a browser window as part of your program, you're (most likely) going to have to tell your computer where that browser executable file lives.

To simplify this process, operating systems have what's known as a "system path" or "user path" - a list of folders containing important places to look for executable and other important files. You may, at some point, have to edit your system path to add a new folder to it, making the executable files within that folder more easily available.

::: callout-warning

#### Error Messages That Indicate Path Problems

If you run across an error like this:

- could not locate xxx.exe
- The system cannot find the path specified
- Command Not Found

You might start thinking about whether your system path is set correctly for what you're trying to do.

:::

:::: demo

#### Demonstration: Path Errors

Let's see what path errors look like using different tools you might encounter.

::: panel-tabset

##### R

```{r}
#| error: true
tmp <- read.csv("lego_sets.csv") # Wrong Path

tmp <- read.csv("../data/lego_sets.csv") # Right Path
```

##### Python

```{python}
#| error: !expr T
import pandas as pd

tmp = pd.read_csv("lego_sets.csv") # Wrong Path

tmp = pd.read_csv("../data/lego_sets.csv") # Right Path
```

##### Bash

```{bash}
head -n5 lego_sets.csv
```

:::

::::

If you want to locate where an executable is found (in this example, we'll use `git`), you can run `where git` on windows, or `which git` on OSX/Linux.

Some programs, like RStudio, have places where you can set the locations of common dependencies. If you go to Tools > Global Options > Git/SVN, you can set the path to git.


### How To Modify System Paths {-}

[How to set system paths (general)](https://superuser.com/a/284361/391106)

Operating-system specific instructions cobbled together from a variety of different sources:

- {{< fa brands windows >}} [On Windows](https://miktex.org/howto/modify-path)
- {{< fa brands apple >}} [On Mac](https://osxdaily.com/2014/08/14/add-new-path-to-path-command-line/)
- {{< fa brands linux >}} [On Linux](https://linuxize.com/post/how-to-add-directory-to-path-in-linux/)


<!-- ## Working Directories -->

<!-- When you launch a program, that program starts up with a specific directory as its "location" - the place where it will look for files. Most of the time, we don't think too much about this when using graphical programs, but it's much more important to get this right when programming things ourselves. -->

<!-- In RStudio, you can set your working directory in several ways: -->

<!-- 1. Work in an RStudio Project (File > New Project), which will make it easy to access your project folder, and will set your working directory to the right folder automatically. I've created a project in `/home/susan/Projects/Class/unl-stat850/test-project`     -->
<!-- ![Setup window for RStudio projects](../images/tools/test-project-setup.png) -->

<!-- 2. Use `setwd()` to set your working directory. If I'm not working in the RStudio project described above, I can set my working directory to that folder using: -->
<!-- `setwd("/home/susan/Projects/Class/unl-stat850/test-project")` -->

<!-- 3. Use the files tab (bottom right) to navigate to your preferred folder. Then, click More > Set As Working Directory. -->


<!-- In this class, we're going to focus on **reproducibility** - making sure your code runs on any other computer with the right project setup. So with that in mind: -->

<!-- 1. Work in (RStudio) projects^[None of the good practices here are dependent on RStudio, but RStudio projects do make it easier for you to e.g. keep track of where files are living and what your current working directory is. You can do the same thing in a purely python project if you want to, but think of RStudio here as training wheels for those in the class who are not familiar with file paths and reproducibility.] -->

<!-- 2. Store the data for the project in your project folder -->

<!-- 3. Use local paths - if you're in your project folder and trying to reference "data.xls", then you would just use "data.xls" as the path. If your data is in a "code" folder, you would use "code/data.xls" as the path. -->

<!-- This will ensure that your code should work on any other machine, as long as your data is in your project folder and your code uses local file paths. -->



## References {#part-tools-01-refs}
