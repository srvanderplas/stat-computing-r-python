# RStudio's Interface

Here, I'll provide a set of annotated screenshots highlighting many of the features of RStudio's IDE (Integrated Development Environment) which will be useful as you work through this textbook. You shouldn't expect to remember all of this right now, but I'm providing it in the hopes that you'll be able to come back to it when future instructions like "Click the render button at the top of the text editor window" don't make sense or match what you're seeing.

## Objectives {-}

- Locate different panes of RStudio
- Use cues such as buttons and icons to identify what type of file is open and what language is being interpreted


## Overview

![Important locations and buttons in RStudio.](../images/tools/Rstudio-important-buttons.png){#fig-rstudio-important fig-alt="A screenshot of an RStudio window highlighting buttons for creating new files (top left), opening an RStudio project (top right). The main portion of the window shows the four panes in a default RStudio interface. The editor pane (top left), contains text files that may contain R or python code. The terminal/console pane (bottom left), contains the R console, system terminal, and a tab for background jobs. The top right pane contains the environment, history, connections, and tutorial tabs by default, and may also contain tabs labeled build and git, depending on your project setup. The environment tab shows you what objects are currently in your programming environment - that is, what things are defined. The bottom right pane contains the files, plots, packages, help, viewer, and presentation tabs. By default, the files tab will show you your current working directory; if you are not working in a project, then it will show your home directory, which is the default working directory."} An RStudio window is by default divided into 4 panes, each of which may contain several tabs. You can reconfigure the locations of these tabs based on your preferences by selecting the toolbar button with 4 squares (just left of the Addins dropdown menu).

In the default configuration, - The top left is the editor pane, where you will write code and other content. - The bottom left is the console pane, which contains your R/python interactive consoles as well as a system terminal and location for checking the status of background jobs. - The top right contains the environment and history tabs (among others) - The top left contains the files and help tabs (among others)

You do not need to know what all of these tabs do right now. For the moment, it's enough to get a sense of the basics - where to write code (top left), where to look for results (bottom left), where to get help (bottom right), and where to monitor what R/python are doing (top right).

## The Editor/File Pane (Top Left)

The buttons and layout within this pane change based on the type of file you have open.

::: panel-tabset
### R script

![The logo on the script file indicates the file type. When an R file is open, there are Run and Source buttons on the top which allow you to run selected lines of code (Run) or source (run) the entire file. Code line numbers are provided on the left (this is a handy way to see where in the code the errors occur), and you can see line:character numbers at the bottom left. At the bottom right, there is another indicator of what type of file Rstudio thinks this is.](../images/tools/Rstudio-editor-pane-buttons.png){fig-alt="Screenshot of the RStudio editor window in R script mode. Lines are numbered along the left side. Editor style can be toggled between source and visual mode. There is a run button at the top to run the current or selected line(s), and an additional shortcut to source the script. An indicator in the bottom right tells you what kind of file you are looking at. In the bottom left, you can see the line:character that is being edited."}

### Python script

![The logo on the script file indicates the file type. When a python file is open, there are Run and Source buttons on the top which allow you to run selected lines of code (Run) or source (run) the entire file. Code line numbers are provided on the left (this is a handy way to see where in the code the errors occur), and you can see line:character numbers at the bottom left. At the bottom right, there is another indicator of what type of file Rstudio thinks this is.](../images/tools/Rstudio-editor-pane-buttons-py.png){fig-alt="Screenshot of the RStudio editor window in python mode. Lines are numbered along the left side. Editor style can be toggled between source and visual mode. There is a run button at the top to run the current or selected line(s), and an additional shortcut to source the script. An indicator in the bottom right tells you what kind of file you are looking at. In the bottom left, you can see the line:character that is being edited."}

### Quarto markdown

![The logo on the script file indicates the file type. When a quarto markdown file is open, there is a render button at the top which allows you to compile the file to see its "pretty", non-markup form. In the same toolbar, there are buttons to add a code chunk as well as to run a selcted line of code or chunk of code. You can toggle between source (shown) and visual mode to see a more word-like rendering of the quarto markdown file. Code line numbers are provided on the left (this is a handy way to see where in the code the errors occur), and you can see line:character numbers at the bottom left. At the bottom right, there is another indicator of what type of file Rstudio thinks this is.](../images/tools/Rstudio-editor-pane-buttons-quarto.png){fig-alt="Screenshot of the RStudio editor window in quarto markdown mode. Lines are numbered along the left side. Editor style can be toggled between source and visual mode. There is a render button at the top to run the whole document, and additional shortcuts to add code chunks and run the selected code chunk. An indicator in the bottom right tells you what kind of file you are looking at. In the bottom left, you can see the line:character that is being edited."}

### Text file

![The logo on the text file indicates the file type. When a text file (or other unknown file extension) is open, there are very few buttons in the editor window. Code line numbers are provided on the left (this is a handy way to see where in the code the errors occur), and you can see line:character numbers at the bottom left. At the bottom right, there is another indicator of what type of file Rstudio thinks this is.](../images/tools/Rstudio-editor-pane-buttons-text.png){fig-alt="Screenshot of the RStudio editor window in text mode. Lines are numbered along the left side. Editor style can be toggled between source and visual mode. An indicator in the bottom right tells you what kind of file you are looking at. In the bottom left, you can see the line:character that is being edited."}
:::

## The Console Pane (Bottom Left)

Let's compare what the console pane looks like when we run a line of R code compared to a line of python code.
The differences will help you figure out whether you need to exit out of Python to run R code and may help you debug some errors.

::: panel-tabset
### Python

![When running python code from a script file, the console will show you that you are running in python by the logo at the top of the console pane. You will initially see lines indicating that you're running R, and then you'll see the lines highlighted in red which show R running the code in python -- this is what converts the console from R to python. The command you ran will appear after `>>>`, and the results will appear immediately below. A `>>>` waits for a new command - to get back to R, you will need to type exit (as instructed by the red text). In the environment pane, you can see another indicator that you're viewing the python environment, with an object named 'r' that will allow you to move data back and forth between the two languages if you want to do so.](../images/tools/Rstudio-terminal-python.png){fig-alt="Screenshot of the RStudio console. Notice that there is an icon indicating what language the console is currently running."}

### R

![When running R code from a script file, the console will show you that you are running in R by the logo at the top of the console pane. You will initially see lines indicating that you're running R (they're missing here because this isn't the first command I ran in this session). The command you ran will appear after `>`, and the results will appear immediately below, with boxed numbers in front of each sequential line. A `>` waits for a new command . In the environment pane, you may see a new value pop up named `.Last.value` - this is part of user settings and you can stop it from appearing if you want to.](../images/tools/Rstudio-terminal-R.png){fig-alt="Screenshot of the RStudio console. Notice that there is an icon indicating what language the console is currently running."}
:::


## The Top Right Pane

This pane contains a set of tabs that change based on your project and what you have enabled. 
If you're using git with an Rstudio project, then this tab will show your git repository. 
If you're working with an Rstudio project that has multiple files, such as a book or a website, then the pane will also have a Build tab that will build all of your project files.

For now, though, let's assume you're not in an Rstudio project and you just want to know what the heck an Environment pane (or any of the other tabs in here by default) is. 
We're going to focus on two of the tabs that are the most relevant to you right now: Environment, and History.

### Environment tab
The Environment tab shows you any objects which are defined in memory in whatever language you're currently using (as long as it's R or python). 
You'll see headers like "Data", "Values", and "Functions" within this table, and two columns - the name of the thing, and the value of the thing (if it's a complicated object, you'll see what type of object it is and possibly how long it is). 

![The environment tab shows you all of the objects in memory that the language you're working in knows about.](../images/tools/Rstudio-env-pane.png){fig-alt="Screenshot of the environment pane. Notice that there is an indicator of which language's environment is shown, a way to clear the environment, and pairs of variable names and values."}

If you're working in both R and python, you can toggle which language's environment you're looking at using the language drop down button on the far left side.

### History tab
Another useful tab in this pane is the History tab, which shows you a running list of every command you've ever run. 
While I strongly encourage you to write your code in a text file in the editor pane, sometimes you deleted a line of code accidentally and want to get it back... and the history tab has you covered (unless you've cleared the history out).

![The history tab shows you a list of all commands you've run and allows you to send them to the console or to source (the text editor).](../images/tools/Rstudio-history-pane.png){fig-alt="RStudio history pane. This pane preserves all commands that have been run from the console or from evaluating code cells or scripts."}

## The Bottom Right Pane

This pane also contains a mishmash of tabs that have various uses. 
Here, we'll focus on 3: Files, Packages, and Help. 
But first, to quickly summarize the remaining tabs, the Plots tab shows any plots you've generated (which we haven't done yet), and the Viewer/Presentation tabs show you compiled documents (markdown), interactive graphics, and presentations.

### Files tab

![The files tab shows you the files in your current working directory (by default), though you can navigate through it and find other files as necessary. If you want to return to your working directory, there's a button for that in the "More" menu. One of the most important pieces of information in this pane is your path - you can construct the file path by using ~/ for home, and then for each folder, adding a slash between. The path to the folder we're looking at here is thus `~/Projects/Class/stat-computing-r-python/`.](../images/tools/Rstudio-file-tab.png){fig-alt="Screenshot of RStudio file tab, showing files, size, and last modified date. The folder path is shown just below the icon row and can be useful if you don't know where your files are located."}

### Packages tab

The packages tab isn't quite relevant *yet*, but it will be soon. R and python both work off of packages - extensions to the default language that make it easier to accomplish certain tasks, like reading data from Excel files or drawing pretty charts. 
This tab shows all of the R packages you have installed on your machine, and which ones are currently loaded.

![You can get important information from the packages tab, like what packages are loaded, easy access to documentation for each package, and what version of the package is installed.](../images/tools/Rstudio-packages-tab.png){fig-alt="Packages tab of RStudio. Checkboxes in the far left column show whether packages are loaded. Links to the package name can be clicked to access package documentation. The 3rd column is the package version, which should be verified and updated if you're having issues with the package's functions."}

Unfortunately, the packages tab doesn't cover python packages yet.

### Help tab

The help tab is a wonderful way to get help with how to use an R or python function.

![The help tab makes it easy to get access to function documentation within Rstudio, so you don't have to switch windows.](../images/tools/Rstudio-help-tab.png){fig-alt="Screenshot of RStudio help tab. Search bar is highlighted and annotated with 'search for function name here', and then the main window is annotated with 'Documentation appears here'."}

By default, you can search for an R function name in the search window, and documentation for matching functions will appear in the main part of the pane. 
To get help with python functions, you need to (in the python console) use `?<function name`, so I would type in at the `>>>` prompt `?print` to get the equivalent python help file. 
