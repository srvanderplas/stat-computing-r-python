# Data Visualization Basics {#sec-basic-data-vis}

This section is intended as a very light overview of how you might create charts in R and python. @sec-data-vis will be much more in depth.

## Objectives {-}

- Use ggplot2/seaborn to create a chart
- Begin to identify issues with data formatting

## Package Installation 

You will need the `seaborn` (python) and `ggplot2` (R) packages for this section. 

```{r}
#| eval: false
install.packages("ggplot2")
```

To install seaborn, pick one of the following methods (you can read more about them and decide which is appropriate for you in @sec-py-pkg-install)

::: panel-tabset

### System Terminal

```{bash}
#| eval: false
pip3 install seaborn matplotlib
```

### R Terminal

This package installation method requires that you have a virtual environment set up (that is, if you are on Windows, don't try to install packages this way).

```{r}
#| eval: false
reticulate::py_install(c("seaborn", "matplotlib"))
```

### Python Terminal

In a python chunk (or the python terminal), you can run the following command. This depends on something called "IPython magic" commands, so if it doesn't work for you, try the System Terminal method instead.

```{python}
#| eval: false
%pip install seaborn matplotlib
```

Once you have run this command, please comment it out so that you don't reinstall the same packages every time.

:::

## First Steps

Now that you can read data in to R and python and define new variables, you can create plots! 
Data visualization is a skill that takes a lifetime to learn, but for now, let's start out easy:  let's talk about how to make (basic) plots in R (with `ggplot2`) and in python (with `seaborn`, which has similar).

### Graphing HBCU Enrollment

Let's work with Historically Black College and University enrollment. 

::: callout-demo

#### Loading Libraries

::: panel-tabset

#### R

```{r}
#| label: plotting-data-r
hbcu_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-02/hbcu_all.csv')

library(ggplot2)
```

#### Python

```{python}
#| label: plotting-data-python
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

hbcu_all = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-02/hbcu_all.csv')

```

:::

:::

### Making a Line Chart

ggplot2 and seaborn work with data frames. 

If you pass a data frame in as the data argument, you can refer to columns in that data with "bare" column names (you don't have to reference the full data object using `df$name` or `df.name`; you can instead use `name` or `"name"`).

::: callout-demo

::: panel-tabset

#### R

```{r}
#| label: line-graph-r

ggplot(hbcu_all, aes(x = Year, y = `4-year`)) + geom_line() +
  ggtitle("4-year HBCU College Enrollment")

```

#### Python

```{python}
#| label: line-graph-python-p9
#| eval: false
#| include: false

ggplot(hbcu_all, aes(x = "Year", y = "4-year")) + geom_line() + \
 ggtitle("4-year HBCU College Enrollment")

```

```{python}
#| label: line-graph-python-seaborn

plot = sns.lineplot(hbcu_all, x = "Year", y = "4-year")
plot.set_title("4-year HBCU College Enrollment")
plt.show()
```

:::

:::

### Data Formatting

If your data is in the right format, ggplot2 is very easy to use; if your data aren't formatted neatly, it can be a real pain. 
If you want to plot multiple lines, you need to either list each variable you want to plot, one by one, or (more likely) you want to get your data into "long form". 
We'll learn more about how to do this type of data transition when we talk about [reshaping data](05-data-reshape.qmd).

::: callout-demo

You don't need to know exactly how this works, but it is helpful to see the difference in the two datasets:

::: panel-tabset

#### R
```{r}
#| label: pivot-operation-r
library(tidyr)
hbcu_long <- pivot_longer(hbcu_all, -Year, names_to = "type", values_to = "value")
```

#### Python
```{python}
#| label: pivot-operation-python
hbcu_long = pd.melt(hbcu_all, id_vars = ['Year'], value_vars = hbcu_all.columns[1:11])
```

#### Original Data
```{r}
#| label: pivot-operation-data
#| echo: false
knitr::kable(head(hbcu_all))
```

#### Long Data
```{r}
#| label: pivot-operation-data-2
#| echo: false

knitr::kable(head(hbcu_long))
```

In the long form of the data, we have a row for each data point (year x measurement type), not for each year.

:::

:::

### Making a (Better) Line Chart

If we had wanted to show all of the available data before, we would have needed to add a separate line for each column, coloring each one manually, and then we would have wanted to create a legend manually (which is a pain). 
Converting the data to long form means we can use ggplot2/seaborn to do all of this for us with only a single plot statement (`geom_line` or `sns.lineplot`).
Having the data in the right form to plot is very important if you want to get the plot you're imagining with relatively little effort.


::: callout-demo

::: panel-tabset

#### R
```{r}
#| label: long-form-demo-r

ggplot(hbcu_long, aes(x = Year, y = value, color = type)) + geom_line() +
  ggtitle("HBCU College Enrollment")
```

#### Python
```{python}
#| label: long-form-demo-python-p9
#| eval: false
#| include: false

ggplot(hbcu_long, aes(x = "Year", y = "value", color = "variable")) + geom_line() + \
  ggtitle("HBCU College Enrollment") + \
  theme(subplots_adjust={'right':0.75}) # This moves the key so it takes up 25% of the area
```

```{python}
#| label: long-form-demo-python-seaborn
plot = sns.lineplot(hbcu_long, x = "Year", y = "value", hue = "variable")
plot.set_title("4-year HBCU College Enrollment")
plt.show()
```

:::

:::

## References {#sec-graphics-intro-refs}
