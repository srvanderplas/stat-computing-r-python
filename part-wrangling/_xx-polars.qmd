# Polars {#sec-data-polars}

Polars is a library available in R and Python which has a few advantages over tidyverse and pandas:

- It is multicore by default
- It is written in Rust, which means that (in theory) it has no runtime overhead
- It can work with datasets that are bigger than the RAM available on your machine due to its' reliance on the Arrow library for data storage


## {{< fa bullseye >}} Objectives 

- Understand the differences between Polars and other data wrangling libraries

- Use polars syntax to complete data transformations in R and python


## Installation

::: callout-demo

::: panel-tabset

### R

To install polars in R, you need to know whether your system has an x86 based processor (e.g. it is made by Intel or AMD) or an arm-based processor (M1 macs, mobile versions of Linux, etc.). If you're on Windows, you have an x86 based processor, at least in 2023. 

Note: I've not been able to test this code on every machine out there. If you encounter an error, let me know and hopefully I can update it appropriately. 

```{r}
#| eval: !expr F
library(dplyr)
library(stringr)

os <- .Platform$OS.type
# Mac can be tricky to detect as it's unix but not linux
if(grepl("^darwin", R.version$os)) os <- "mac"

arch <- R.version$arch

baseurl <- "https://github.com/pola-rs/r-polars/releases/latest/download/"


if(!arch == "x86_64" && !str_detect(arch, "arm")) {
  warning("System architecture is not arm or x86_64. Will attempt x86 installation, but chances of success are not high.")
}

if (str_detect(arch, "arm")) {
  url <- case_when(
    os == "unix" ~ paste0(baseurl, "polars_cross_aarch64-unknown-linux-gnu.tar.gz"),
    os == "mac" ~ paste0(baseurl, "polars_cross_aarch64-apple-darwin.tar.gz"),
    .default = paste0(baseurl, "polars.zip")
  )
} else {
  # x86 installation by default
  url <- case_when(
    os == "unix" ~ paste0(baseurl, "polars__x86_64-pc-linux-gnu.gz"),
    os == "mac" ~ paste0(baseurl, "polars__x86_64-apple-darwin20.tgz"),
    .default = paste0(baseurl, "polars.zip")
  )
}

install.packages(url, repos = NULL)
```

### Python

In quarto chunks or the RStudio python command line, you can run the installation command as:

```{python}
#| eval: !expr F
!pip install polars[all]
```

Alternately, you can use bash:
```{bash}
#| eval: !expr F
pip3 install polars[all]
```


The [all] flag at the end of the pip install command installs functions for working with pandas, numpy, pyarrow (arrow file format), fsspec (remote file systems), connectorx (SQL database support), xlsx2csv (Excel support), deltalake, and timezone (for Python < 3.9 and Windows only). If you have limited space on your machine, you may want to only include specific flags, as described in [the documentation](https://pola-rs.github.io/polars/user-guide/installation/#feature-flags), but for most users, that isn't a concern and it's better just to install the full set of functions.

:::

:::

## Getting Started

### Philosophy

`polars` is a python package at heart. Because of this, and because there are only so many variations on `data.frame`, `data_frame`, `DataFrame`, etc., even in R, `polars` uses a special **namespace** setup: when you call `polars` functions, you will call them with a `pl$xxx` prefix. This is very similar to the way that we use python functions: we import the package with `import polars as pl` and then call functions using `pl.xxx()` [@wellingPolarsPackage2023]. 


### Loading Polars


::: callout-demo

::: panel-tabset

#### R
```{r}
library(polars)
```


#### Python
```{python}
import polars as pl
```

:::

:::


### Acquiring some (big) data

In order to best demonstrate polars' data wrangling skills, we need a sufficiently big dataset. Seattle's library system provides a lovely dataset showing how many times each book in the system was checked out each month from April 2005 to October 2022. (Hat tip to R4DS, which uses this data to demonstrate arrow). 

This data is 9GB, so download at your own risk. I am setting the book up to work off of a subset of this data file so that it will be able to compile on GitHub (they don't want you downloading files this big on their servers every time the book is compiled); however, all of the code should also work on the full dataset. 

The subset I'll choose is books written by Andrea Beaty, who wrote a lovely series of children's books called the Questioneers that are fun to read and very inspirational at the same time. 

I'm not going to try to write the code to *get* the data bilingually. 

::: {.callout-demo collapse=true}
#### Data Management

```{r}
#| eval: !expr F
library(polars)

if (!file.exists("../data/seattle-library-checkouts.csv")) {
  curl::multi_download(
    "https://r4ds.s3.us-west-2.amazonaws.com/seattle-library-checkouts.csv",
    "../data/seattle-library-checkouts.csv",
    resume = TRUE
  )
}

# Create a smaller subset (<400 MB)
if (!file.exists("../data/seattle-library-checkouts-beaty.csv")) {
  checkouts <- pl$scan_csv("../data/seattle-library-checkouts.csv", 
                           overwrite_dtype = list(
                             UsageClass = "character", 
                             CheckoutType = "character", 
                             MaterialType = "character", 
                             CheckoutYear = "integer", 
                             CheckoutMonth = "integer", 
                             Checkouts = "integer", 
                             Title = "character", 
                             ISBN = "character", 
                             Creator = "character", 
                             Subjects = "character", 
                             Publisher = "character", 
                             PublicationYear = "character"))$collect()
  checkouts_sub <- checkouts$filter(
    pl$col("Creator")$str$contains("Beaty") & 
      pl$col("Creator")$str$contains("Andrea"))
  dim(checkouts_sub)
  
  # checkouts_sub$write_csv("..") should work but doesn't at the moment.
  res = checkouts_sub$as_data_frame()
  readr::write_csv(res, "../data/seattle-library-checkouts-beaty.csv")
}

rm(checkouts, checkouts_sub, res)
```

The following code is just here to select the appropriate data file. 

```{r}
# Work with the bigger data set if it's present, 
# otherwise work with the smaller data set
library_data_loc <- ifelse(file.exists("../data/seattle-library-checkouts.csv"), 
                           "../data/seattle-library-checkouts.csv", 
                           "../data/seattle-library-checkouts-beaty.csv")
```


::: callout-demo

You should edit the destination file in these examples to be a location on your machine where you can find the data.

::: panel-tabset

#### R

```{r}
library(polars)

lib = pl$read_csv(path = library_data_loc)
lib$head(n = 1)
```



#### Python

```{python}
import polars as pl

lib = pl.read_csv(r.library_data_loc)

lib.head(1)
```

:::

:::

## Methods and Pipelines

Normally, we would use base R or pandas/numpy functions to operate on data we've read in; however, that is *generally* not how `polars` works. Instead, `polars` contains **methods** used to access and manipulate data. This is a necessary adaptation because polars can use data that isn't physically loaded into memory - it's an optimization and design choice that may be useful, but may also be irritating (which is why I don't expect to get rid of `pandas` or `dplyr` any time soon). 


::: callout-demo

### Base/Default Methods

Some base R/python functions do work on polars DataFrames, though this is implemented inconsistently and only for some commonly used functions. 

::: panel-tabset

#### R

```{r}
library(polars)

# DataFrames
dat = pl$DataFrame(mtcars)

head(dat)
max(dat[,1])
names(dat)
dim(dat)

# Series
ser = pl$Series(1:10)

length(ser)
max(ser)
mean(ser) # this doesn't work... :)
ser$mean() # using the polars method does work
```

#### Python

In Python, the experience is more consistent - `polars` defines methods to be used on objects using the same `.fcn()` notation we used in `pandas`, so the experience is basically the same even though the methods used are different under the hood. 

```{python}
import polars as pl
import numpy as np
import pandas as pd

dat = pl.DataFrame(r.mtcars)
dat.head()
dat.describe()


ser = pl.Series(range(0,10))
ser.max()
ser.mean()
```

[Most aggregation functions will work out of the box with polars](https://pola-rs.github.io/polars/getting-started/series-dataframes/#methods).

:::

As a result of this set of design choices, though, it is important that if you choose to use `polars`, you fully commit. It will be best , you need to know that if you use polars, you should fully commit to doing things the polars way; you won't see benefits from using it if you don't fully invest in the package workflow.

:::


::: callout-demo

### Conversion to Regular Objects

Polars Series and DataFrames can be converted back to typical R/pandas objects.

::: panel-tabset

#### R

```{r}
#| eval: !expr F
library(polars)

# Don't run this if you don't have enough memory available...
lib_as_df <- lib$to_data_frame()
```

![RStudio Environment tab preview of the two objects.](../images/wrangling/polars-conversion-dataframe-r.png){fig-alt="A screenshot of the environment tab in RStudio showing the difference between the polars object, `lib`, and the R data frame `lib_as_df`; the primary difference is that the polars object shows as an external pointer, while the R data frame shows 3056 observations of 12 variables."}

#### Python

```{python}
#| eval: !expr F
import polars as pl

lib_as_df = lib.to_pandas()
```

![RStudio Environment tab preview of the two objects.](../images/wrangling/polars-conversion-dataframe-py.png){fig-alt="A screenshot of the environment tab in RStudio showing the difference between the polars object, `lib`, and the pandas data frame `lib_as_df`; the primary difference is that the polars object shows as a markdown-style table with a defined shape of (3056, 12), while the pandas data frame shows 3056 rows and 12 columns."}

:::

:::



::: callout-demo

### Pipelines (intro)

Polars works on **expressions**: easy queries and building blocks. Hopefully, this sounds pretty familiar - maybe even more so when you hear what the basic blocks are:

- select
- filter
- with_columns
- group_by


::: panel-tabset

#### R

```{r}
library(polars)

total_checkouts <- lib$
  groupby(pl$col(c("Title", "CheckoutYear", "CheckoutMonth")))$
  agg(pl$col("Checkouts")$sum()$alias("Checkouts"))

total_checkouts$head(5)
```


#### Python

```{python}
import polars as pl

```

:::

:::


